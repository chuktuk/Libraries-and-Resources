"use strict";
/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const utils = __importStar(require("./utils"));
// Specify the program signature.
commander_1.default
    .description('Create a patch release')
    .option('--force', 'Force the upgrade')
    .action((options) => {
    // Make sure we can patch release.
    const pyVersion = utils.getPythonVersion();
    if (pyVersion.includes('a') ||
        pyVersion.includes('b') ||
        pyVersion.includes('rc')) {
        throw new Error('Can only make a patch release from a final version');
    }
    // Run pre-bump actions.
    utils.prebump();
    // Version the changed
    let cmd = `lerna version patch -m \"New version\" --no-push`;
    if (options.force) {
        cmd += ' --yes';
    }
    const oldVersion = utils.run('git rev-parse HEAD', {
        stdio: 'pipe',
        encoding: 'utf8'
    }, true);
    utils.run(cmd);
    const newVersion = utils.run('git rev-parse HEAD', {
        stdio: 'pipe',
        encoding: 'utf8'
    }, true);
    if (oldVersion === newVersion) {
        console.debug('aborting');
        // lerna didn't version anything, so we assume the user aborted
        throw new Error('Lerna aborted');
    }
    // Patch the python version
    utils.run('bumpversion patch'); // switches to alpha
    utils.run('bumpversion release --allow-dirty'); // switches to beta
    utils.run('bumpversion release --allow-dirty'); // switches to rc.
    utils.run('bumpversion release --allow-dirty'); // switches to final.
    // Run post-bump actions.
    utils.postbump();
});
commander_1.default.parse(process.argv);
//# sourceMappingURL=patch-release.js.map