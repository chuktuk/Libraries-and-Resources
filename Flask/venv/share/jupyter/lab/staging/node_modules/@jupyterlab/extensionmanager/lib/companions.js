// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { Dialog, showDialog } from '@jupyterlab/apputils';
import * as React from 'react';
// Mapping of manager name to function that take name and gives command
const managerCommand = {
    pip: name => `pip install ${name}`,
    conda: name => `conda install -c conda-forge ${name}`
};
function getInstallCommands(info) {
    var _a, _b, _c, _d, _e;
    const commands = Array();
    for (const manager of info.managers) {
        const name = (_c = (_b = (_a = info.overrides) === null || _a === void 0 ? void 0 : _a[manager]) === null || _b === void 0 ? void 0 : _b.name, (_c !== null && _c !== void 0 ? _c : info.base.name));
        if (!name) {
            console.warn(`No package name found for manager ${manager}`);
            continue;
        }
        const command = (_e = (_d = managerCommand)[manager]) === null || _e === void 0 ? void 0 : _e.call(_d, name);
        if (!command) {
            console.warn(`Don't know how to install packages for manager ${manager}`);
        }
        commands.push(command);
    }
    return commands;
}
/**
 * Prompt the user what do about companion packages, if present.
 *
 * @param builder the build manager
 */
export function presentCompanions(kernelCompanions, serverCompanion) {
    const entries = [];
    if (serverCompanion) {
        entries.push(React.createElement("p", { key: "server-companion" },
            "This package has indicated that it needs a corresponding server extension. Please contact your Administrator to update the server with one of the following commands:",
            getInstallCommands(serverCompanion).map(command => {
                return (React.createElement("p", { key: command },
                    React.createElement("code", null, command)));
            })));
    }
    if (kernelCompanions.length > 0) {
        entries.push(React.createElement("p", { key: 'kernel-companion' }, "This package has indicated that it needs a corresponding package for the kernel."));
        for (const [index, entry] of kernelCompanions.entries()) {
            entries.push(React.createElement("p", { key: `companion-${index}` },
                "The package",
                React.createElement("code", null, entry.kernelInfo.base.name),
                ", is required by the following kernels:"));
            const kernelEntries = [];
            for (const [index, kernel] of entry.kernels.entries()) {
                kernelEntries.push(React.createElement("li", { key: `kernels-${index}` },
                    React.createElement("code", null, kernel.display_name)));
            }
            entries.push(React.createElement("ul", { key: 'kernel-companion-end' }, kernelEntries));
            entries.push(React.createElement("p", { key: `kernel-companion-${index}` },
                "This package has indicated that it needs a corresponding kernel package. Please contact your Administrator to update the server with one of the following commands:",
                getInstallCommands(entry.kernelInfo).map(command => {
                    return (React.createElement("p", { key: command },
                        React.createElement("code", null, command)));
                })));
        }
    }
    const body = (React.createElement("div", null,
        entries,
        React.createElement("p", null, "You should make sure that the indicated packages are installed before trying to use the extension. Do you want to continue with the extension installation?")));
    const hasKernelCompanions = kernelCompanions.length > 0;
    const hasServerCompanion = !!serverCompanion;
    let title = '';
    if (hasKernelCompanions && hasServerCompanion) {
        title = 'Kernel and Server Companions';
    }
    else if (hasKernelCompanions) {
        title = 'Kernel Companions';
    }
    else {
        title = 'Server Companion';
    }
    return showDialog({
        title,
        body,
        buttons: [
            Dialog.cancelButton(),
            Dialog.okButton({
                label: 'OK',
                caption: 'Install the JupyterLab extension.'
            })
        ]
    }).then(result => {
        return result.button.accept;
    });
}
//# sourceMappingURL=companions.js.map