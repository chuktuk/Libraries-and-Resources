import { PanelLayout } from '@lumino/widgets';
import { NotebookTools } from '@jupyterlab/notebook';
import { TagWidget } from './widget';
import { AddWidget } from './addwidget';
/**
 * A Tool for tag operations.
 */
export class TagTool extends NotebookTools.Tool {
    /**
     * Construct a new tag Tool.
     *
     * @param tracker - The notebook tracker.
     */
    constructor(tracker, app) {
        super();
        this.tagList = [];
        this.header = false;
        app;
        this.tracker = tracker;
        this.layout = new PanelLayout();
        this.createTagInput();
    }
    /**
     * Add an AddWidget input box to the layout.
     */
    createTagInput() {
        const layout = this.layout;
        const input = new AddWidget();
        input.id = 'add-tag';
        layout.insertWidget(0, input);
    }
    /**
     * Check whether a tag is applied to the current active cell
     *
     * @param name - The name of the tag.
     *
     * @returns A boolean representing whether it is applied.
     */
    checkApplied(name) {
        if (this.tracker.activeCell) {
            const tags = this.tracker.activeCell.model.metadata.get('tags');
            if (tags) {
                for (let i = 0; i < tags.length; i++) {
                    if (tags[i] === name) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    /**
     * Add a tag to the current active cell.
     *
     * @param name - The name of the tag.
     */
    addTag(name) {
        const cell = this.tracker.activeCell;
        if (!cell) {
            // bail
            return;
        }
        let tags = cell.model.metadata.get('tags');
        const newTags = name.split(/[,\s]+/);
        if (tags === undefined) {
            tags = [];
        }
        for (let i = 0; i < newTags.length; i++) {
            if (newTags[i] !== '' && tags.indexOf(newTags[i]) < 0) {
                tags.push(newTags[i]);
            }
        }
        cell.model.metadata.set('tags', tags);
        this.refreshTags();
        this.loadActiveTags();
    }
    /**
     * Remove a tag from the current active cell.
     *
     * @param name - The name of the tag.
     */
    removeTag(name) {
        const cell = this.tracker.activeCell;
        if (!cell) {
            // bail
            return;
        }
        const tags = cell.model.metadata.get('tags');
        const idx = tags.indexOf(name);
        if (idx > -1) {
            tags.splice(idx, 1);
        }
        cell.model.metadata.set('tags', tags);
        if (tags.length === 0) {
            cell.model.metadata.delete('tags');
        }
        this.refreshTags();
        this.loadActiveTags();
    }
    /**
     * Update each tag widget to represent whether it is applied to the current
     * active cell.
     */
    loadActiveTags() {
        const layout = this.layout;
        for (let i = 0; i < layout.widgets.length; i++) {
            layout.widgets[i].update();
        }
    }
    /**
     * Pull from cell metadata all the tags used in the notebook and update the
     * stored tag list.
     */
    pullTags() {
        var _a, _b, _c, _d, _e;
        const notebook = this.tracker.currentWidget;
        if (this.tracker && this.tracker.currentWidget) {
            const cells = (_b = (_a = notebook) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.cells;
            const allTags = [];
            for (let i = 0; i < (((_c = cells) === null || _c === void 0 ? void 0 : _c.length) || 0); i++) {
                const metadata = (_d = cells) === null || _d === void 0 ? void 0 : _d.get(i).metadata;
                const tags = (_e = metadata) === null || _e === void 0 ? void 0 : _e.get('tags');
                if (tags) {
                    for (let j = 0; j < tags.length; j++) {
                        const name = tags[j];
                        if (name !== '') {
                            if (allTags.indexOf(name) < 0) {
                                allTags.push(name);
                            }
                        }
                    }
                }
            }
            this.tagList = allTags;
        }
    }
    /**
     * Pull the most recent list of tags and update the tag widgets - dispose if
     * the tag no longer exists, and create new widgets for new tags.
     */
    refreshTags() {
        this.pullTags();
        const layout = this.layout;
        const tags = this.tagList;
        const toDispose = [];
        const nWidgets = layout.widgets.length;
        for (let i = 0; i < nWidgets; i++) {
            const idx = tags.indexOf(layout.widgets[i].name);
            if (idx < 0 && layout.widgets[i].id !== 'add-tag') {
                toDispose.push(layout.widgets[i]);
            }
            else if (layout.widgets[i].id !== 'add-tag') {
                tags.splice(idx, 1);
            }
        }
        for (let i = 0; i < toDispose.length; i++) {
            toDispose[i].dispose();
        }
        for (let i = 0; i < tags.length; i++) {
            const widget = new TagWidget(tags[i]);
            const idx = layout.widgets.length - 1;
            layout.insertWidget(idx, widget);
        }
    }
    /**
     * Validate the 'tags' of cell metadata, ensuring it is a list of strings and
     * that each string doesn't include spaces.
     */
    validateTags(cell, taglist) {
        const results = [];
        for (let i = 0; i < taglist.length; i++) {
            if (taglist[i] !== '' && typeof taglist[i] === 'string') {
                const spl = taglist[i].split(/[,\s]+/);
                for (let j = 0; j < spl.length; j++) {
                    if (spl[j] !== '' && results.indexOf(spl[j]) < 0) {
                        results.push(spl[j]);
                    }
                }
            }
        }
        cell.model.metadata.set('tags', results);
        this.refreshTags();
        this.loadActiveTags();
    }
    /**
     * Handle a change to the active cell.
     */
    onActiveCellChanged() {
        this.loadActiveTags();
    }
    /**
     * Get all tags once available.
     */
    onAfterShow() {
        this.refreshTags();
        this.loadActiveTags();
    }
    /**
     * Upon attach, add header if it doesn't already exist and listen for changes
     * from the notebook tracker.
     */
    onAfterAttach() {
        if (!this.header) {
            const header = document.createElement('header');
            header.textContent = 'Tags in Notebook';
            header.className = 'tag-header';
            this.parent.node.insertBefore(header, this.node);
            this.header = true;
        }
        if (this.tracker.currentWidget) {
            void this.tracker.currentWidget.context.ready.then(() => {
                this.refreshTags();
                this.loadActiveTags();
            });
            this.tracker.currentWidget.model.cells.changed.connect(() => {
                this.refreshTags();
                this.loadActiveTags();
            });
        }
        this.tracker.currentChanged.connect(() => {
            this.refreshTags();
            this.loadActiveTags();
        });
    }
    /**
     * Handle a change to active cell metadata.
     */
    onActiveCellMetadataChanged() {
        const tags = this.tracker.activeCell.model.metadata.get('tags');
        let taglist = [];
        if (tags === undefined) {
            return;
        }
        if (typeof tags === 'string') {
            taglist.push(tags);
        }
        else {
            taglist = tags;
        }
        this.validateTags(this.tracker.activeCell, taglist);
    }
}
//# sourceMappingURL=tool.js.map