"use strict";
/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const glob = __importStar(require("glob"));
const path = __importStar(require("path"));
const utils = __importStar(require("./utils"));
utils.run('npm run clean:slate');
utils.run('lerna run prepublishOnly');
utils.getLernaPaths().forEach(pkgPath => {
    const pkgData = utils.readJSONFile(path.join(pkgPath, 'package.json'));
    const name = pkgData.name;
    // Skip private packages.
    if (!pkgData.public) {
        return;
    }
    console.debug(`Checking ${name}...`);
    // Make sure each glob resolves to at least one file.
    pkgData.files.forEach((fGlob) => {
        const result = glob.sync(fGlob);
        if (result.length === 0) {
            throw new Error(`${name} has missing file(s) "${fGlob}"`);
        }
    });
    // Make sure there is a main and that it exists.
    const main = pkgData.main;
    if (!main) {
        throw new Error(`No "main" entry for ${name}`);
    }
    const mainPath = path.join(pkgPath, main);
    if (!fs.existsSync(mainPath)) {
        throw new Error(`"main" entry "${main}" not found for ${name}`);
    }
});
//# sourceMappingURL=prepublish-check.js.map