// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { Token } from '@lumino/coreutils';
import { DisposableDelegate } from '@lumino/disposable';
import * as React from 'react';
import { Dialog, ReactWidget, showDialog, ToolbarButtonComponent, UseSignal } from '@jupyterlab/apputils';
import { closeIcon, refreshIcon } from '@jupyterlab/ui-components';
/**
 * The class name added to a running widget.
 */
const RUNNING_CLASS = 'jp-RunningSessions';
/**
 * The class name added to a running widget header.
 */
const HEADER_CLASS = 'jp-RunningSessions-header';
/**
 * The class name added to the running terminal sessions section.
 */
const SECTION_CLASS = 'jp-RunningSessions-section';
/**
 * The class name added to the running sessions section header.
 */
const SECTION_HEADER_CLASS = 'jp-RunningSessions-sectionHeader';
/**
 * The class name added to a section container.
 */
const CONTAINER_CLASS = 'jp-RunningSessions-sectionContainer';
/**
 * The class name added to the running kernel sessions section list.
 */
const LIST_CLASS = 'jp-RunningSessions-sectionList';
/**
 * The class name added to the running sessions items.
 */
const ITEM_CLASS = 'jp-RunningSessions-item';
/**
 * The class name added to a running session item label.
 */
const ITEM_LABEL_CLASS = 'jp-RunningSessions-itemLabel';
/**
 * The class name added to a running session item shutdown button.
 */
const SHUTDOWN_BUTTON_CLASS = 'jp-RunningSessions-itemShutdown';
/* tslint:disable */
/**
 * The running sessions token.
 */
export const IRunningSessionManagers = new Token('@jupyterlab/running:IRunningSessionManagers');
export class RunningSessionManagers {
    constructor() {
        this._managers = [];
    }
    /**
     * Add a running item manager.
     *
     * @param manager - The running item manager.
     *
     */
    add(manager) {
        this._managers.push(manager);
        return new DisposableDelegate(() => {
            const i = this._managers.indexOf(manager);
            if (i > -1) {
                this._managers.splice(i, 1);
            }
        });
    }
    /**
     * Return an iterator of launcher items.
     */
    items() {
        return this._managers;
    }
}
function Item(props) {
    const { runningItem } = props;
    const icon = runningItem.icon();
    return (React.createElement("li", { className: ITEM_CLASS },
        React.createElement(icon.react, { tag: "span", stylesheet: "runningItem" }),
        React.createElement("span", { className: ITEM_LABEL_CLASS, title: runningItem.labelTitle ? runningItem.labelTitle() : '', onClick: () => runningItem.open() }, runningItem.label()),
        React.createElement("button", { className: `${SHUTDOWN_BUTTON_CLASS} jp-mod-styled`, onClick: () => runningItem.shutdown() }, "SHUT\u00A0DOWN")));
}
function ListView(props) {
    return (React.createElement("ul", { className: LIST_CLASS }, props.runningItems.map((item, i) => (React.createElement(Item, { key: i, runningItem: item })))));
}
function List(props) {
    return (React.createElement(UseSignal, { signal: props.manager.runningChanged }, () => React.createElement(ListView, { runningItems: props.manager.running() })));
}
/**
 * The Section component contains the shared look and feel for an interactive
 * list of kernels and sessions.
 *
 * It is specialized for each based on its props.
 */
function Section(props) {
    function onShutdown() {
        void showDialog({
            title: `Shut Down All ${props.manager.name} Sessions?`,
            buttons: [
                Dialog.cancelButton(),
                Dialog.warnButton({ label: 'SHUT DOWN' })
            ]
        }).then(result => {
            if (result.button.accept) {
                props.manager.shutdownAll();
            }
        });
    }
    return (React.createElement("div", { className: SECTION_CLASS },
        React.createElement(React.Fragment, null,
            React.createElement("header", { className: SECTION_HEADER_CLASS },
                React.createElement("h2", null,
                    props.manager.name,
                    " Sessions"),
                React.createElement(ToolbarButtonComponent, { icon: closeIcon, onClick: onShutdown, tooltip: `Shut Down All ${props.manager.name} Sessionsâ€¦` })),
            React.createElement("div", { className: CONTAINER_CLASS },
                React.createElement(List, { manager: props.manager })))));
}
function RunningSessionsComponent(props) {
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: HEADER_CLASS },
            React.createElement(ToolbarButtonComponent, { tooltip: "Refresh List", icon: refreshIcon, onClick: () => props.managers.items().forEach(manager => manager.refreshRunning()) })),
        props.managers.items().map(manager => (React.createElement(Section, { key: manager.name, manager: manager })))));
}
/**
 * A class that exposes the running terminal and kernel sessions.
 */
export class RunningSessions extends ReactWidget {
    /**
     * Construct a new running widget.
     */
    constructor(managers) {
        super();
        this.managers = managers;
        // this can't be in the react element, because then it would be too nested
        this.addClass(RUNNING_CLASS);
    }
    render() {
        return React.createElement(RunningSessionsComponent, { managers: this.managers });
    }
}
//# sourceMappingURL=index.js.map