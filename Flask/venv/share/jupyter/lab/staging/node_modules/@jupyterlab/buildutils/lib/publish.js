"use strict";
/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const crypto = __importStar(require("crypto"));
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const update_dist_tag_1 = require("./update-dist-tag");
const utils = __importStar(require("./utils"));
// Specify the program signature.
commander_1.default
    .description('Publish the JS packages and prep the Python package')
    .option('--skip-build', 'Skip the clean and build step (if there was a network error during a JS publish')
    .action(async (options) => {
    // Make sure we are logged in.
    if (utils.checkStatus('npm whoami') !== 0) {
        console.error('Please run `npm login`');
    }
    const distDir = './dist';
    // Optionally clean and build the python packages.
    if (!options.skipBuild) {
        // Ensure a clean state.
        utils.run('npm run clean:slate');
    }
    else {
        // Still clean the dist directory.
        if (fs.existsSync(distDir)) {
            fs.removeSync(distDir);
        }
    }
    // Publish JS to the appropriate tag.
    const curr = utils.getPythonVersion();
    if (curr.indexOf('rc') === -1 && curr.indexOf('a') === -1) {
        utils.run('lerna publish from-package -m "Publish"');
    }
    else {
        utils.run('lerna publish from-package --npm-tag=next -m "Publish"');
    }
    // Fix up any tagging issues.
    const basePath = path.resolve('.');
    const paths = utils.getLernaPaths(basePath).sort();
    const cmds = await Promise.all(paths.map(update_dist_tag_1.handlePackage));
    cmds.forEach(cmdList => {
        cmdList.forEach(cmd => {
            utils.run(cmd);
        });
    });
    // Update core mode.  This cannot be done until the JS packages are
    // released.
    utils.run('node buildutils/lib/update-core-mode.js');
    // Make the Python release.
    utils.run('python setup.py sdist');
    utils.run('python setup.py bdist_wheel');
    utils.run('python -m pip install -U twine');
    utils.run('twine check dist/*');
    const files = fs.readdirSync(distDir);
    const hashes = new Map();
    files.forEach(file => {
        const shasum = crypto.createHash('sha256');
        const hash = shasum.update(fs.readFileSync(path.join(distDir, file)));
        hashes.set(file, hash.digest('hex'));
    });
    const hashString = Array.from(hashes.entries())
        .map(entry => `${entry[0]}: ${entry[1]}`)
        .join('" -m "');
    // Make the commit and the tag.
    utils.run(`git commit -am "Publish ${curr}" -m "SHA256 hashes:" -m "${hashString}"`);
    utils.run(`git tag v${curr}`);
    // Prompt the user to finalize.
    console.debug('*'.repeat(40));
    console.debug('*'.repeat(40));
    console.debug('Ready to publish!');
    console.debug('Run these command when ready:');
    console.debug('twine upload dist/*');
    console.debug('git push origin <BRANCH> --tags');
    // Emit a system beep.
    process.stdout.write('\x07');
});
commander_1.default.parse(process.argv);
//# sourceMappingURL=publish.js.map