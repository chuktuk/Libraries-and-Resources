// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { sessionContextDialogs, Clipboard } from '@jupyterlab/apputils';
import { CodeEditor } from '@jupyterlab/codeeditor';
import { MarkdownCodeBlocks, PathExt } from '@jupyterlab/coreutils';
import { cutIcon, copyIcon, markdownIcon, pasteIcon, redoIcon, textEditorIcon, undoIcon } from '@jupyterlab/ui-components';
import { Menu } from '@lumino/widgets';
/**
 * The command IDs used by the fileeditor plugin.
 */
export var CommandIDs;
(function (CommandIDs) {
    CommandIDs.createNew = 'fileeditor:create-new';
    CommandIDs.createNewMarkdown = 'fileeditor:create-new-markdown-file';
    CommandIDs.changeFontSize = 'fileeditor:change-font-size';
    CommandIDs.lineNumbers = 'fileeditor:toggle-line-numbers';
    CommandIDs.lineWrap = 'fileeditor:toggle-line-wrap';
    CommandIDs.changeTabs = 'fileeditor:change-tabs';
    CommandIDs.matchBrackets = 'fileeditor:toggle-match-brackets';
    CommandIDs.autoClosingBrackets = 'fileeditor:toggle-autoclosing-brackets';
    CommandIDs.createConsole = 'fileeditor:create-console';
    CommandIDs.replaceSelection = 'fileeditor:replace-selection';
    CommandIDs.runCode = 'fileeditor:run-code';
    CommandIDs.runAllCode = 'fileeditor:run-all';
    CommandIDs.markdownPreview = 'fileeditor:markdown-preview';
    CommandIDs.undo = 'fileeditor:undo';
    CommandIDs.redo = 'fileeditor:redo';
    CommandIDs.cut = 'fileeditor:cut';
    CommandIDs.copy = 'fileeditor:copy';
    CommandIDs.paste = 'fileeditor:paste';
    CommandIDs.selectAll = 'fileeditor:select-all';
})(CommandIDs || (CommandIDs = {}));
/**
 * The name of the factory that creates editor widgets.
 */
export const FACTORY = 'Editor';
let config = Object.assign({}, CodeEditor.defaultConfig);
/**
 * A utility class for adding commands and menu items,
 * for use by the File Editor extension or other Editor extensions.
 */
export var Commands;
(function (Commands) {
    /**
     * Accessor function that returns the createConsole function for use by Create Console commands
     */
    function getCreateConsoleFunction(commands) {
        return async function createConsole(widget, args) {
            var _a;
            const options = args || {};
            const console = await commands.execute('console:create', {
                activate: options['activate'],
                name: (_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name,
                path: widget.context.path,
                preferredLanguage: widget.context.model.defaultKernelLanguage,
                ref: widget.id,
                insertMode: 'split-bottom'
            });
            widget.context.pathChanged.connect((sender, value) => {
                var _a;
                console.session.setPath(value);
                console.session.setName((_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name);
            });
        };
    }
    /**
     * Update the setting values.
     */
    function updateSettings(settings, commands) {
        config = Object.assign(Object.assign({}, CodeEditor.defaultConfig), settings.get('editorConfig').composite);
        // Trigger a refresh of the rendered commands
        commands.notifyCommandChanged();
    }
    Commands.updateSettings = updateSettings;
    /**
     * Update the settings of the current tracker instances.
     */
    function updateTracker(tracker) {
        tracker.forEach(widget => {
            updateWidget(widget.content);
        });
    }
    Commands.updateTracker = updateTracker;
    /**
     * Update the settings of a widget.
     * Skip global settings for transient editor specific configs.
     */
    function updateWidget(widget) {
        const transientConfigs = ['lineNumbers', 'lineWrap', 'matchBrackets'];
        const editor = widget.editor;
        Object.keys(config).forEach((key) => {
            if (!transientConfigs.includes(key)) {
                editor.setOption(key, config[key]);
            }
        });
    }
    Commands.updateWidget = updateWidget;
    /**
     * Wrapper function for adding the default File Editor commands
     */
    function addCommands(commands, settingRegistry, id, isEnabled, tracker, browserFactory) {
        // Add a command to change font size.
        addChangeFontSizeCommand(commands, settingRegistry, id);
        addLineNumbersCommand(commands, settingRegistry, id, isEnabled);
        addWordWrapCommand(commands, settingRegistry, id, isEnabled);
        addChangeTabsCommand(commands, settingRegistry, id);
        addMatchBracketsCommand(commands, settingRegistry, id, isEnabled);
        addAutoClosingBracketsCommand(commands, settingRegistry, id);
        addReplaceSelectionCommand(commands, tracker, isEnabled);
        addCreateConsoleCommand(commands, tracker, isEnabled);
        addRunCodeCommand(commands, tracker, isEnabled);
        addRunAllCodeCommand(commands, tracker, isEnabled);
        addMarkdownPreviewCommand(commands, tracker);
        // Add a command for creating a new text file.
        addCreateNewCommand(commands, browserFactory);
        // Add a command for creating a new Markdown file.
        addCreateNewMarkdownCommand(commands, browserFactory);
        addUndoCommand(commands, tracker, isEnabled);
        addRedoCommand(commands, tracker, isEnabled);
        addCutCommand(commands, tracker, isEnabled);
        addCopyCommand(commands, tracker, isEnabled);
        addPasteCommand(commands, tracker, isEnabled);
        addSelectAllCommand(commands, tracker, isEnabled);
    }
    Commands.addCommands = addCommands;
    /**
     * Add a command to change font size for File Editor
     */
    function addChangeFontSizeCommand(commands, settingRegistry, id) {
        commands.addCommand(CommandIDs.changeFontSize, {
            execute: args => {
                const delta = Number(args['delta']);
                if (Number.isNaN(delta)) {
                    console.error(`${CommandIDs.changeFontSize}: delta arg must be a number`);
                    return;
                }
                const style = window.getComputedStyle(document.documentElement);
                const cssSize = parseInt(style.getPropertyValue('--jp-code-font-size'), 10);
                const currentSize = config.fontSize || cssSize;
                config.fontSize = currentSize + delta;
                return settingRegistry
                    .set(id, 'editorConfig', config)
                    .catch((reason) => {
                    console.error(`Failed to set ${id}: ${reason.message}`);
                });
            },
            label: args => args['name']
        });
    }
    Commands.addChangeFontSizeCommand = addChangeFontSizeCommand;
    /**
     * Add the Line Numbers command
     */
    function addLineNumbersCommand(commands, settingRegistry, id, isEnabled) {
        commands.addCommand(CommandIDs.lineNumbers, {
            execute: () => {
                config.lineNumbers = !config.lineNumbers;
                return settingRegistry
                    .set(id, 'editorConfig', config)
                    .catch((reason) => {
                    console.error(`Failed to set ${id}: ${reason.message}`);
                });
            },
            isEnabled,
            isToggled: () => config.lineNumbers,
            label: 'Line Numbers'
        });
    }
    Commands.addLineNumbersCommand = addLineNumbersCommand;
    /**
     * Add the Word Wrap command
     */
    function addWordWrapCommand(commands, settingRegistry, id, isEnabled) {
        commands.addCommand(CommandIDs.lineWrap, {
            execute: args => {
                config.lineWrap = args['mode'] || 'off';
                return settingRegistry
                    .set(id, 'editorConfig', config)
                    .catch((reason) => {
                    console.error(`Failed to set ${id}: ${reason.message}`);
                });
            },
            isEnabled,
            isToggled: args => {
                const lineWrap = args['mode'] || 'off';
                return config.lineWrap === lineWrap;
            },
            label: 'Word Wrap'
        });
    }
    Commands.addWordWrapCommand = addWordWrapCommand;
    /**
     * Add command for changing tabs size or type in File Editor
     */
    function addChangeTabsCommand(commands, settingRegistry, id) {
        commands.addCommand(CommandIDs.changeTabs, {
            label: args => args['name'],
            execute: args => {
                config.tabSize = args['size'] || 4;
                config.insertSpaces = !!args['insertSpaces'];
                return settingRegistry
                    .set(id, 'editorConfig', config)
                    .catch((reason) => {
                    console.error(`Failed to set ${id}: ${reason.message}`);
                });
            },
            isToggled: args => {
                const insertSpaces = !!args['insertSpaces'];
                const size = args['size'] || 4;
                return config.insertSpaces === insertSpaces && config.tabSize === size;
            }
        });
    }
    Commands.addChangeTabsCommand = addChangeTabsCommand;
    /**
     * Add the Match Brackets command
     */
    function addMatchBracketsCommand(commands, settingRegistry, id, isEnabled) {
        commands.addCommand(CommandIDs.matchBrackets, {
            execute: () => {
                config.matchBrackets = !config.matchBrackets;
                return settingRegistry
                    .set(id, 'editorConfig', config)
                    .catch((reason) => {
                    console.error(`Failed to set ${id}: ${reason.message}`);
                });
            },
            label: 'Match Brackets',
            isEnabled,
            isToggled: () => config.matchBrackets
        });
    }
    Commands.addMatchBracketsCommand = addMatchBracketsCommand;
    /**
     * Add the Auto Close Brackets for Text Editor command
     */
    function addAutoClosingBracketsCommand(commands, settingRegistry, id) {
        commands.addCommand(CommandIDs.autoClosingBrackets, {
            execute: () => {
                config.autoClosingBrackets = !config.autoClosingBrackets;
                return settingRegistry
                    .set(id, 'editorConfig', config)
                    .catch((reason) => {
                    console.error(`Failed to set ${id}: ${reason.message}`);
                });
            },
            label: 'Auto Close Brackets for Text Editor',
            isToggled: () => config.autoClosingBrackets
        });
    }
    Commands.addAutoClosingBracketsCommand = addAutoClosingBracketsCommand;
    /**
     * Add the replace selection for text editor command
     */
    function addReplaceSelectionCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.replaceSelection, {
            execute: args => {
                var _a, _b;
                const text = args['text'] || '';
                const widget = tracker.currentWidget;
                if (!widget) {
                    return;
                }
                (_b = (_a = widget.content.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);
            },
            isEnabled,
            label: 'Replace Selection in Editor'
        });
    }
    Commands.addReplaceSelectionCommand = addReplaceSelectionCommand;
    /**
     * Add the Create Console for Editor command
     */
    function addCreateConsoleCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.createConsole, {
            execute: args => {
                const widget = tracker.currentWidget;
                if (!widget) {
                    return;
                }
                return getCreateConsoleFunction(commands)(widget, args);
            },
            isEnabled,
            label: 'Create Console for Editor'
        });
    }
    Commands.addCreateConsoleCommand = addCreateConsoleCommand;
    /**
     * Add the Run Code command
     */
    function addRunCodeCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.runCode, {
            execute: () => {
                var _a;
                // Run the appropriate code, taking into account a ```fenced``` code block.
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                let code = '';
                const editor = widget.editor;
                const path = widget.context.path;
                const extension = PathExt.extname(path);
                const selection = editor.getSelection();
                const { start, end } = selection;
                let selected = start.column !== end.column || start.line !== end.line;
                if (selected) {
                    // Get the selected code from the editor.
                    const start = editor.getOffsetAt(selection.start);
                    const end = editor.getOffsetAt(selection.end);
                    code = editor.model.value.text.substring(start, end);
                }
                else if (MarkdownCodeBlocks.isMarkdown(extension)) {
                    const { text } = editor.model.value;
                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);
                    for (const block of blocks) {
                        if (block.startLine <= start.line && start.line <= block.endLine) {
                            code = block.code;
                            selected = true;
                            break;
                        }
                    }
                }
                if (!selected) {
                    // no selection, submit whole line and advance
                    code = editor.getLine(selection.start.line);
                    const cursor = editor.getCursorPosition();
                    if (cursor.line + 1 === editor.lineCount) {
                        const text = editor.model.value.text;
                        editor.model.value.text = text + '\n';
                    }
                    editor.setCursorPosition({
                        line: cursor.line + 1,
                        column: cursor.column
                    });
                }
                const activate = false;
                if (code) {
                    return commands.execute('console:inject', { activate, code, path });
                }
                else {
                    return Promise.resolve(void 0);
                }
            },
            isEnabled,
            label: 'Run Code'
        });
    }
    Commands.addRunCodeCommand = addRunCodeCommand;
    /**
     * Add the Run All Code command
     */
    function addRunAllCodeCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.runAllCode, {
            execute: () => {
                var _a;
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                let code = '';
                const editor = widget.editor;
                const text = editor.model.value.text;
                const path = widget.context.path;
                const extension = PathExt.extname(path);
                if (MarkdownCodeBlocks.isMarkdown(extension)) {
                    // For Markdown files, run only code blocks.
                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);
                    for (const block of blocks) {
                        code += block.code;
                    }
                }
                else {
                    code = text;
                }
                const activate = false;
                if (code) {
                    return commands.execute('console:inject', { activate, code, path });
                }
                else {
                    return Promise.resolve(void 0);
                }
            },
            isEnabled,
            label: 'Run All Code'
        });
    }
    Commands.addRunAllCodeCommand = addRunAllCodeCommand;
    /**
     * Add markdown preview command
     */
    function addMarkdownPreviewCommand(commands, tracker) {
        commands.addCommand(CommandIDs.markdownPreview, {
            execute: () => {
                const widget = tracker.currentWidget;
                if (!widget) {
                    return;
                }
                const path = widget.context.path;
                return commands.execute('markdownviewer:open', {
                    path,
                    options: {
                        mode: 'split-right'
                    }
                });
            },
            isVisible: () => {
                const widget = tracker.currentWidget;
                return ((widget && PathExt.extname(widget.context.path) === '.md') || false);
            },
            label: 'Show Markdown Preview'
        });
    }
    Commands.addMarkdownPreviewCommand = addMarkdownPreviewCommand;
    /**
     * Add undo command
     */
    function addUndoCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.undo, {
            execute: () => {
                var _a;
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                widget.editor.undo();
            },
            isEnabled: () => {
                var _a;
                if (!isEnabled()) {
                    return false;
                }
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return false;
                }
                // Ideally enable it when there are undo events stored
                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events
                return true;
            },
            icon: undoIcon.bindprops({ stylesheet: 'menuItem' }),
            label: 'Undo'
        });
    }
    Commands.addUndoCommand = addUndoCommand;
    /**
     * Add redo command
     */
    function addRedoCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.redo, {
            execute: () => {
                var _a;
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                widget.editor.redo();
            },
            isEnabled: () => {
                var _a;
                if (!isEnabled()) {
                    return false;
                }
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return false;
                }
                // Ideally enable it when there are redo events stored
                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events
                return true;
            },
            icon: redoIcon.bindprops({ stylesheet: 'menuItem' }),
            label: 'Redo'
        });
    }
    Commands.addRedoCommand = addRedoCommand;
    /**
     * Add cut command
     */
    function addCutCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.cut, {
            execute: () => {
                var _a;
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                const editor = widget.editor;
                const text = getTextSelection(editor);
                Clipboard.copyToSystem(text);
                editor.replaceSelection && editor.replaceSelection('');
            },
            isEnabled: () => {
                var _a;
                if (!isEnabled()) {
                    return false;
                }
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return false;
                }
                // Enable command if there is a text selection in the editor
                return isSelected(widget.editor);
            },
            icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),
            label: 'Cut'
        });
    }
    Commands.addCutCommand = addCutCommand;
    /**
     * Add copy command
     */
    function addCopyCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.copy, {
            execute: () => {
                var _a;
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                const editor = widget.editor;
                const text = getTextSelection(editor);
                Clipboard.copyToSystem(text);
            },
            isEnabled: () => {
                var _a;
                if (!isEnabled()) {
                    return false;
                }
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return false;
                }
                // Enable command if there is a text selection in the editor
                return isSelected(widget.editor);
            },
            icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),
            label: 'Copy'
        });
    }
    Commands.addCopyCommand = addCopyCommand;
    /**
     * Add paste command
     */
    function addPasteCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.paste, {
            execute: async () => {
                var _a;
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                const editor = widget.editor;
                // Get data from clipboard
                const clipboard = window.navigator.clipboard;
                const clipboardData = await clipboard.readText();
                if (clipboardData) {
                    // Paste data to the editor
                    editor.replaceSelection && editor.replaceSelection(clipboardData);
                }
            },
            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },
            icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),
            label: 'Paste'
        });
    }
    Commands.addPasteCommand = addPasteCommand;
    /**
     * Add select all command
     */
    function addSelectAllCommand(commands, tracker, isEnabled) {
        commands.addCommand(CommandIDs.selectAll, {
            execute: () => {
                var _a;
                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;
                if (!widget) {
                    return;
                }
                const editor = widget.editor;
                editor.execCommand('selectAll');
            },
            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },
            label: 'Select All'
        });
    }
    Commands.addSelectAllCommand = addSelectAllCommand;
    /**
     * Helper function to check if there is a text selection in the editor
     */
    function isSelected(editor) {
        const selectionObj = editor.getSelection();
        const { start, end } = selectionObj;
        const selected = start.column !== end.column || start.line !== end.line;
        return selected;
    }
    /**
     * Helper function to get text selection from the editor
     */
    function getTextSelection(editor) {
        const selectionObj = editor.getSelection();
        const start = editor.getOffsetAt(selectionObj.start);
        const end = editor.getOffsetAt(selectionObj.end);
        const text = editor.model.value.text.substring(start, end);
        return text;
    }
    /**
     * Function to create a new untitled text file, given the current working directory.
     */
    function createNew(commands, cwd, ext = 'txt') {
        return commands
            .execute('docmanager:new-untitled', {
            path: cwd,
            type: 'file',
            ext
        })
            .then(model => {
            return commands.execute('docmanager:open', {
                path: model.path,
                factory: FACTORY
            });
        });
    }
    /**
     * Add the New File command
     */
    function addCreateNewCommand(commands, browserFactory) {
        commands.addCommand(CommandIDs.createNew, {
            label: args => (args['isPalette'] ? 'New Text File' : 'Text File'),
            caption: 'Create a new text file',
            icon: args => (args['isPalette'] ? undefined : textEditorIcon),
            execute: args => {
                const cwd = args['cwd'] || browserFactory.defaultBrowser.model.path;
                return createNew(commands, cwd);
            }
        });
    }
    Commands.addCreateNewCommand = addCreateNewCommand;
    /**
     * Add the New Markdown File command
     */
    function addCreateNewMarkdownCommand(commands, browserFactory) {
        commands.addCommand(CommandIDs.createNewMarkdown, {
            label: args => args['isPalette'] ? 'New Markdown File' : 'Markdown File',
            caption: 'Create a new markdown file',
            icon: args => (args['isPalette'] ? undefined : markdownIcon),
            execute: args => {
                const cwd = args['cwd'] || browserFactory.defaultBrowser.model.path;
                return createNew(commands, cwd, 'md');
            }
        });
    }
    Commands.addCreateNewMarkdownCommand = addCreateNewMarkdownCommand;
    /**
     * Wrapper function for adding the default launcher items for File Editor
     */
    function addLauncherItems(launcher) {
        addCreateNewToLauncher(launcher);
        addCreateNewMarkdownToLauncher(launcher);
    }
    Commands.addLauncherItems = addLauncherItems;
    /**
     * Add Create New Text File to the Launcher
     */
    function addCreateNewToLauncher(launcher) {
        launcher.add({
            command: CommandIDs.createNew,
            category: 'Other',
            rank: 1
        });
    }
    Commands.addCreateNewToLauncher = addCreateNewToLauncher;
    /**
     * Add Create New Markdown to the Launcher
     */
    function addCreateNewMarkdownToLauncher(launcher) {
        launcher.add({
            command: CommandIDs.createNewMarkdown,
            category: 'Other',
            rank: 2
        });
    }
    Commands.addCreateNewMarkdownToLauncher = addCreateNewMarkdownToLauncher;
    /**
     * Wrapper function for adding the default items to the File Editor palette
     */
    function addPaletteItems(palette) {
        addChangeTabsCommandsToPalette(palette);
        addCreateNewCommandToPalette(palette);
        addCreateNewMarkdownCommandToPalette(palette);
        addChangeFontSizeCommandsToPalette(palette);
    }
    Commands.addPaletteItems = addPaletteItems;
    /**
     * The category for File Editor palette commands for use in addToPalette functions
     */
    const paletteCategory = 'Text Editor';
    /**
     * Add commands to change the tab indentation to the File Editor palette
     */
    function addChangeTabsCommandsToPalette(palette) {
        const args = {
            insertSpaces: false,
            size: 4,
            name: 'Indent with Tab'
        };
        const command = 'fileeditor:change-tabs';
        palette.addItem({ command, args, category: paletteCategory });
        for (const size of [1, 2, 4, 8]) {
            const args = {
                insertSpaces: true,
                size,
                name: `Spaces: ${size} `
            };
            palette.addItem({ command, args, category: paletteCategory });
        }
    }
    Commands.addChangeTabsCommandsToPalette = addChangeTabsCommandsToPalette;
    /**
     * Add a Create New File command to the File Editor palette
     */
    function addCreateNewCommandToPalette(palette) {
        palette.addItem({
            command: CommandIDs.createNew,
            args: { isPalette: true },
            category: paletteCategory
        });
    }
    Commands.addCreateNewCommandToPalette = addCreateNewCommandToPalette;
    /**
     * Add a Create New Markdown command to the File Editor palette
     */
    function addCreateNewMarkdownCommandToPalette(palette) {
        palette.addItem({
            command: CommandIDs.createNewMarkdown,
            args: { isPalette: true },
            category: paletteCategory
        });
    }
    Commands.addCreateNewMarkdownCommandToPalette = addCreateNewMarkdownCommandToPalette;
    /**
     * Add commands to change the font size to the File Editor palette
     */
    function addChangeFontSizeCommandsToPalette(palette) {
        const command = CommandIDs.changeFontSize;
        let args = { name: 'Increase Font Size', delta: 1 };
        palette.addItem({ command, args, category: paletteCategory });
        args = { name: 'Decrease Font Size', delta: -1 };
        palette.addItem({ command, args, category: paletteCategory });
    }
    Commands.addChangeFontSizeCommandsToPalette = addChangeFontSizeCommandsToPalette;
    /**
     * Wrapper function for adding the default menu items for File Editor
     */
    function addMenuItems(menu, commands, tracker, consoleTracker, sessionDialogs) {
        // Add the editing commands to the settings menu.
        addEditingCommandsToSettingsMenu(menu, commands);
        // Add new text file creation to the file menu.
        addCreateNewFileToFileMenu(menu);
        // Add new markdown file creation to the file menu.
        addCreateNewMarkdownFileToFileMenu(menu);
        // Add undo/redo hooks to the edit menu.
        addUndoRedoToEditMenu(menu, tracker);
        // Add editor view options.
        addEditorViewerToViewMenu(menu, tracker);
        // Add a console creator the the file menu.
        addConsoleCreatorToFileMenu(menu, commands, tracker);
        // Add a code runner to the run menu.
        addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, sessionDialogs);
    }
    Commands.addMenuItems = addMenuItems;
    /**
     * Add File Editor editing commands to the Settings menu, including:
     * Indent with Tab, Tab Spaces, Change Font Size, and auto closing brackets
     */
    function addEditingCommandsToSettingsMenu(menu, commands) {
        const tabMenu = new Menu({ commands });
        tabMenu.title.label = 'Text Editor Indentation';
        const args = {
            insertSpaces: false,
            size: 4,
            name: 'Indent with Tab'
        };
        const command = 'fileeditor:change-tabs';
        tabMenu.addItem({ command, args });
        for (const size of [1, 2, 4, 8]) {
            const args = {
                insertSpaces: true,
                size,
                name: `Spaces: ${size} `
            };
            tabMenu.addItem({ command, args });
        }
        menu.settingsMenu.addGroup([
            {
                command: CommandIDs.changeFontSize,
                args: { name: 'Increase Text Editor Font Size', delta: +1 }
            },
            {
                command: CommandIDs.changeFontSize,
                args: { name: 'Decrease Text Editor Font Size', delta: -1 }
            },
            { type: 'submenu', submenu: tabMenu },
            { command: CommandIDs.autoClosingBrackets }
        ], 30);
    }
    Commands.addEditingCommandsToSettingsMenu = addEditingCommandsToSettingsMenu;
    /**
     * Add a Create New File command to the File menu
     */
    function addCreateNewFileToFileMenu(menu) {
        menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNew }], 30);
    }
    Commands.addCreateNewFileToFileMenu = addCreateNewFileToFileMenu;
    /**
     * Add a Create New Markdown File command to the File menu
     */
    function addCreateNewMarkdownFileToFileMenu(menu) {
        menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNewMarkdown }], 30);
    }
    Commands.addCreateNewMarkdownFileToFileMenu = addCreateNewMarkdownFileToFileMenu;
    /**
     * Add File Editor undo and redo widgets to the Edit menu
     */
    function addUndoRedoToEditMenu(menu, tracker) {
        menu.editMenu.undoers.add({
            tracker,
            undo: widget => {
                widget.content.editor.undo();
            },
            redo: widget => {
                widget.content.editor.redo();
            }
        });
    }
    Commands.addUndoRedoToEditMenu = addUndoRedoToEditMenu;
    /**
     * Add a File Editor editor viewer to the View Menu
     */
    function addEditorViewerToViewMenu(menu, tracker) {
        menu.viewMenu.editorViewers.add({
            tracker,
            toggleLineNumbers: widget => {
                const lineNumbers = !widget.content.editor.getOption('lineNumbers');
                widget.content.editor.setOption('lineNumbers', lineNumbers);
            },
            toggleWordWrap: widget => {
                const oldValue = widget.content.editor.getOption('lineWrap');
                const newValue = oldValue === 'off' ? 'on' : 'off';
                widget.content.editor.setOption('lineWrap', newValue);
            },
            toggleMatchBrackets: widget => {
                const matchBrackets = !widget.content.editor.getOption('matchBrackets');
                widget.content.editor.setOption('matchBrackets', matchBrackets);
            },
            lineNumbersToggled: widget => widget.content.editor.getOption('lineNumbers'),
            wordWrapToggled: widget => widget.content.editor.getOption('lineWrap') !== 'off',
            matchBracketsToggled: widget => widget.content.editor.getOption('matchBrackets')
        });
    }
    Commands.addEditorViewerToViewMenu = addEditorViewerToViewMenu;
    /**
     * Add a File Editor console creator to the File menu
     */
    function addConsoleCreatorToFileMenu(menu, commands, tracker) {
        const createConsole = getCreateConsoleFunction(commands);
        menu.fileMenu.consoleCreators.add({
            tracker,
            name: 'Editor',
            createConsole
        });
    }
    Commands.addConsoleCreatorToFileMenu = addConsoleCreatorToFileMenu;
    /**
     * Add a File Editor code runner to the Run menu
     */
    function addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, sessionDialogs) {
        menu.runMenu.codeRunners.add({
            tracker,
            noun: 'Code',
            isEnabled: current => !!consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; }),
            run: () => commands.execute(CommandIDs.runCode),
            runAll: () => commands.execute(CommandIDs.runAllCode),
            restartAndRunAll: current => {
                const widget = consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; });
                if (widget) {
                    return (sessionDialogs || sessionContextDialogs)
                        .restart(widget.sessionContext)
                        .then(restarted => {
                        if (restarted) {
                            void commands.execute(CommandIDs.runAllCode);
                        }
                        return restarted;
                    });
                }
            }
        });
    }
    Commands.addCodeRunnersToRunMenu = addCodeRunnersToRunMenu;
    /**
     * Wrapper function for adding the default items to the File Editor context menu
     */
    function addContextMenuItems(app) {
        addCreateConsoleToContextMenu(app);
        addMarkdownPreviewToContextMenu(app);
        addUndoCommandToContextMenu(app);
        addRedoCommandToContextMenu(app);
        addCutCommandToContextMenu(app);
        addCopyCommandToContextMenu(app);
        addPasteCommandToContextMenu(app);
        addSelectAllCommandToContextMenu(app);
    }
    Commands.addContextMenuItems = addContextMenuItems;
    /**
     * Add a Create Console item to the File Editor context menu
     */
    function addCreateConsoleToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.createConsole,
            selector: '.jp-FileEditor'
        });
    }
    Commands.addCreateConsoleToContextMenu = addCreateConsoleToContextMenu;
    /**
     * Add a Markdown Preview item to the File Editor context menu
     */
    function addMarkdownPreviewToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.markdownPreview,
            selector: '.jp-FileEditor'
        });
    }
    Commands.addMarkdownPreviewToContextMenu = addMarkdownPreviewToContextMenu;
    /**
     * Add a Undo item to the File Editor context menu
     */
    function addUndoCommandToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.undo,
            selector: '.jp-FileEditor',
            rank: 1
        });
    }
    Commands.addUndoCommandToContextMenu = addUndoCommandToContextMenu;
    /**
     * Add a Redo item to the File Editor context menu
     */
    function addRedoCommandToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.redo,
            selector: '.jp-FileEditor',
            rank: 2
        });
    }
    Commands.addRedoCommandToContextMenu = addRedoCommandToContextMenu;
    /**
     * Add a Cut item to the File Editor context menu
     */
    function addCutCommandToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.cut,
            selector: '.jp-FileEditor',
            rank: 3
        });
    }
    Commands.addCutCommandToContextMenu = addCutCommandToContextMenu;
    /**
     * Add a Copy item to the File Editor context menu
     */
    function addCopyCommandToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.copy,
            selector: '.jp-FileEditor',
            rank: 4
        });
    }
    Commands.addCopyCommandToContextMenu = addCopyCommandToContextMenu;
    /**
     * Add a Paste item to the File Editor context menu
     */
    function addPasteCommandToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.paste,
            selector: '.jp-FileEditor',
            rank: 5
        });
    }
    Commands.addPasteCommandToContextMenu = addPasteCommandToContextMenu;
    /**
     * Add a Select All item to the File Editor context menu
     */
    function addSelectAllCommandToContextMenu(app) {
        app.contextMenu.addItem({
            command: CommandIDs.selectAll,
            selector: '.jp-FileEditor',
            rank: 6
        });
    }
    Commands.addSelectAllCommandToContextMenu = addSelectAllCommandToContextMenu;
})(Commands || (Commands = {}));
//# sourceMappingURL=commands.js.map