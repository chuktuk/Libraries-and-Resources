import { JupyterFrontEnd } from '@jupyterlab/application';
import { ICommandPalette, WidgetTracker, ISessionContextDialogs } from '@jupyterlab/apputils';
import { IConsoleTracker } from '@jupyterlab/console';
import { IDocumentWidget } from '@jupyterlab/docregistry';
import { IFileBrowserFactory } from '@jupyterlab/filebrowser';
import { FileEditor } from '@jupyterlab/fileeditor';
import { ILauncher } from '@jupyterlab/launcher';
import { IMainMenu } from '@jupyterlab/mainmenu';
import { ISettingRegistry } from '@jupyterlab/settingregistry';
import { CommandRegistry } from '@lumino/commands';
/**
 * The command IDs used by the fileeditor plugin.
 */
export declare namespace CommandIDs {
    const createNew = "fileeditor:create-new";
    const createNewMarkdown = "fileeditor:create-new-markdown-file";
    const changeFontSize = "fileeditor:change-font-size";
    const lineNumbers = "fileeditor:toggle-line-numbers";
    const lineWrap = "fileeditor:toggle-line-wrap";
    const changeTabs = "fileeditor:change-tabs";
    const matchBrackets = "fileeditor:toggle-match-brackets";
    const autoClosingBrackets = "fileeditor:toggle-autoclosing-brackets";
    const createConsole = "fileeditor:create-console";
    const replaceSelection = "fileeditor:replace-selection";
    const runCode = "fileeditor:run-code";
    const runAllCode = "fileeditor:run-all";
    const markdownPreview = "fileeditor:markdown-preview";
    const undo = "fileeditor:undo";
    const redo = "fileeditor:redo";
    const cut = "fileeditor:cut";
    const copy = "fileeditor:copy";
    const paste = "fileeditor:paste";
    const selectAll = "fileeditor:select-all";
}
/**
 * The name of the factory that creates editor widgets.
 */
export declare const FACTORY = "Editor";
/**
 * A utility class for adding commands and menu items,
 * for use by the File Editor extension or other Editor extensions.
 */
export declare namespace Commands {
    /**
     * Update the setting values.
     */
    function updateSettings(settings: ISettingRegistry.ISettings, commands: CommandRegistry): void;
    /**
     * Update the settings of the current tracker instances.
     */
    function updateTracker(tracker: WidgetTracker<IDocumentWidget<FileEditor>>): void;
    /**
     * Update the settings of a widget.
     * Skip global settings for transient editor specific configs.
     */
    function updateWidget(widget: FileEditor): void;
    /**
     * Wrapper function for adding the default File Editor commands
     */
    function addCommands(commands: CommandRegistry, settingRegistry: ISettingRegistry, id: string, isEnabled: () => boolean, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, browserFactory: IFileBrowserFactory): void;
    /**
     * Add a command to change font size for File Editor
     */
    function addChangeFontSizeCommand(commands: CommandRegistry, settingRegistry: ISettingRegistry, id: string): void;
    /**
     * Add the Line Numbers command
     */
    function addLineNumbersCommand(commands: CommandRegistry, settingRegistry: ISettingRegistry, id: string, isEnabled: () => boolean): void;
    /**
     * Add the Word Wrap command
     */
    function addWordWrapCommand(commands: CommandRegistry, settingRegistry: ISettingRegistry, id: string, isEnabled: () => boolean): void;
    /**
     * Add command for changing tabs size or type in File Editor
     */
    function addChangeTabsCommand(commands: CommandRegistry, settingRegistry: ISettingRegistry, id: string): void;
    /**
     * Add the Match Brackets command
     */
    function addMatchBracketsCommand(commands: CommandRegistry, settingRegistry: ISettingRegistry, id: string, isEnabled: () => boolean): void;
    /**
     * Add the Auto Close Brackets for Text Editor command
     */
    function addAutoClosingBracketsCommand(commands: CommandRegistry, settingRegistry: ISettingRegistry, id: string): void;
    /**
     * Add the replace selection for text editor command
     */
    function addReplaceSelectionCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add the Create Console for Editor command
     */
    function addCreateConsoleCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add the Run Code command
     */
    function addRunCodeCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add the Run All Code command
     */
    function addRunAllCodeCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add markdown preview command
     */
    function addMarkdownPreviewCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>): void;
    /**
     * Add undo command
     */
    function addUndoCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add redo command
     */
    function addRedoCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add cut command
     */
    function addCutCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add copy command
     */
    function addCopyCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add paste command
     */
    function addPasteCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add select all command
     */
    function addSelectAllCommand(commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, isEnabled: () => boolean): void;
    /**
     * Add the New File command
     */
    function addCreateNewCommand(commands: CommandRegistry, browserFactory: IFileBrowserFactory): void;
    /**
     * Add the New Markdown File command
     */
    function addCreateNewMarkdownCommand(commands: CommandRegistry, browserFactory: IFileBrowserFactory): void;
    /**
     * Wrapper function for adding the default launcher items for File Editor
     */
    function addLauncherItems(launcher: ILauncher): void;
    /**
     * Add Create New Text File to the Launcher
     */
    function addCreateNewToLauncher(launcher: ILauncher): void;
    /**
     * Add Create New Markdown to the Launcher
     */
    function addCreateNewMarkdownToLauncher(launcher: ILauncher): void;
    /**
     * Wrapper function for adding the default items to the File Editor palette
     */
    function addPaletteItems(palette: ICommandPalette): void;
    /**
     * Add commands to change the tab indentation to the File Editor palette
     */
    function addChangeTabsCommandsToPalette(palette: ICommandPalette): void;
    /**
     * Add a Create New File command to the File Editor palette
     */
    function addCreateNewCommandToPalette(palette: ICommandPalette): void;
    /**
     * Add a Create New Markdown command to the File Editor palette
     */
    function addCreateNewMarkdownCommandToPalette(palette: ICommandPalette): void;
    /**
     * Add commands to change the font size to the File Editor palette
     */
    function addChangeFontSizeCommandsToPalette(palette: ICommandPalette): void;
    /**
     * Wrapper function for adding the default menu items for File Editor
     */
    function addMenuItems(menu: IMainMenu, commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, consoleTracker: IConsoleTracker, sessionDialogs: ISessionContextDialogs | null): void;
    /**
     * Add File Editor editing commands to the Settings menu, including:
     * Indent with Tab, Tab Spaces, Change Font Size, and auto closing brackets
     */
    function addEditingCommandsToSettingsMenu(menu: IMainMenu, commands: CommandRegistry): void;
    /**
     * Add a Create New File command to the File menu
     */
    function addCreateNewFileToFileMenu(menu: IMainMenu): void;
    /**
     * Add a Create New Markdown File command to the File menu
     */
    function addCreateNewMarkdownFileToFileMenu(menu: IMainMenu): void;
    /**
     * Add File Editor undo and redo widgets to the Edit menu
     */
    function addUndoRedoToEditMenu(menu: IMainMenu, tracker: WidgetTracker<IDocumentWidget<FileEditor>>): void;
    /**
     * Add a File Editor editor viewer to the View Menu
     */
    function addEditorViewerToViewMenu(menu: IMainMenu, tracker: WidgetTracker<IDocumentWidget<FileEditor>>): void;
    /**
     * Add a File Editor console creator to the File menu
     */
    function addConsoleCreatorToFileMenu(menu: IMainMenu, commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>): void;
    /**
     * Add a File Editor code runner to the Run menu
     */
    function addCodeRunnersToRunMenu(menu: IMainMenu, commands: CommandRegistry, tracker: WidgetTracker<IDocumentWidget<FileEditor>>, consoleTracker: IConsoleTracker, sessionDialogs: ISessionContextDialogs | null): void;
    /**
     * Wrapper function for adding the default items to the File Editor context menu
     */
    function addContextMenuItems(app: JupyterFrontEnd): void;
    /**
     * Add a Create Console item to the File Editor context menu
     */
    function addCreateConsoleToContextMenu(app: JupyterFrontEnd): void;
    /**
     * Add a Markdown Preview item to the File Editor context menu
     */
    function addMarkdownPreviewToContextMenu(app: JupyterFrontEnd): void;
    /**
     * Add a Undo item to the File Editor context menu
     */
    function addUndoCommandToContextMenu(app: JupyterFrontEnd): void;
    /**
     * Add a Redo item to the File Editor context menu
     */
    function addRedoCommandToContextMenu(app: JupyterFrontEnd): void;
    /**
     * Add a Cut item to the File Editor context menu
     */
    function addCutCommandToContextMenu(app: JupyterFrontEnd): void;
    /**
     * Add a Copy item to the File Editor context menu
     */
    function addCopyCommandToContextMenu(app: JupyterFrontEnd): void;
    /**
     * Add a Paste item to the File Editor context menu
     */
    function addPasteCommandToContextMenu(app: JupyterFrontEnd): void;
    /**
     * Add a Select All item to the File Editor context menu
     */
    function addSelectAllCommandToContextMenu(app: JupyterFrontEnd): void;
}
