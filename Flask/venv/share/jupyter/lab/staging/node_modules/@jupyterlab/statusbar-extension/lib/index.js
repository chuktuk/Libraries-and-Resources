// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { ILabShell } from '@jupyterlab/application';
import { ICommandPalette, ISessionContextDialogs, sessionContextDialogs } from '@jupyterlab/apputils';
import { IConsoleTracker } from '@jupyterlab/console';
import { IEditorTracker } from '@jupyterlab/fileeditor';
import { INotebookTracker } from '@jupyterlab/notebook';
import { IStatusBar, KernelStatus, LineCol, MemoryUsage, RunningSessions, StatusBar } from '@jupyterlab/statusbar';
import { IMainMenu } from '@jupyterlab/mainmenu';
import { ISettingRegistry } from '@jupyterlab/settingregistry';
export const STATUSBAR_PLUGIN_ID = '@jupyterlab/statusbar-extension:plugin';
/**
 * Initialization data for the statusbar extension.
 */
const statusBar = {
    id: STATUSBAR_PLUGIN_ID,
    provides: IStatusBar,
    autoStart: true,
    activate: (app, labShell, settingRegistry, mainMenu, palette) => {
        const statusBar = new StatusBar();
        statusBar.id = 'jp-main-statusbar';
        app.shell.add(statusBar, 'bottom');
        // If available, connect to the shell's layout modified signal.
        if (labShell) {
            labShell.layoutModified.connect(() => {
                statusBar.update();
            });
        }
        const category = 'Main Area';
        const command = 'statusbar:toggle';
        app.commands.addCommand(command, {
            label: 'Show Status Bar',
            execute: (args) => {
                statusBar.setHidden(statusBar.isVisible);
                if (settingRegistry) {
                    void settingRegistry.set(STATUSBAR_PLUGIN_ID, 'visible', statusBar.isVisible);
                }
            },
            isToggled: () => statusBar.isVisible
        });
        if (palette) {
            palette.addItem({ command, category });
        }
        if (mainMenu) {
            mainMenu.viewMenu.addGroup([{ command }], 1);
        }
        if (settingRegistry) {
            const updateSettings = (settings) => {
                const visible = settings.get('visible').composite;
                statusBar.setHidden(!visible);
            };
            Promise.all([settingRegistry.load(STATUSBAR_PLUGIN_ID), app.restored])
                .then(([settings]) => {
                updateSettings(settings);
                settings.changed.connect(settings => {
                    updateSettings(settings);
                });
            })
                .catch((reason) => {
                console.error(reason.message);
            });
        }
        return statusBar;
    },
    optional: [ILabShell, ISettingRegistry, IMainMenu, ICommandPalette]
};
/**
 * A plugin that provides a kernel status item to the status bar.
 */
export const kernelStatus = {
    id: '@jupyterlab/statusbar-extension:kernel-status',
    autoStart: true,
    requires: [IStatusBar, INotebookTracker, IConsoleTracker, ILabShell],
    optional: [ISessionContextDialogs],
    activate: (app, statusBar, notebookTracker, consoleTracker, labShell, sessionDialogs) => {
        // When the status item is clicked, launch the kernel
        // selection dialog for the current session.
        let currentSession = null;
        const changeKernel = async () => {
            if (!currentSession) {
                return;
            }
            await (sessionDialogs || sessionContextDialogs).selectKernel(currentSession);
        };
        // Create the status item.
        const item = new KernelStatus({
            onClick: changeKernel
        });
        // When the title of the active widget changes, update the label
        // of the hover text.
        const onTitleChanged = (title) => {
            item.model.activityName = title.label;
        };
        // Keep the session object on the status item up-to-date.
        labShell.currentChanged.connect((_, change) => {
            const { oldValue, newValue } = change;
            // Clean up after the old value if it exists,
            // listen for changes to the title of the activity
            if (oldValue) {
                oldValue.title.changed.disconnect(onTitleChanged);
            }
            if (newValue) {
                newValue.title.changed.connect(onTitleChanged);
            }
            // Grab the session off of the current widget, if it exists.
            if (newValue && consoleTracker.has(newValue)) {
                currentSession = newValue.sessionContext;
            }
            else if (newValue && notebookTracker.has(newValue)) {
                currentSession = newValue.sessionContext;
            }
            else {
                currentSession = null;
            }
            item.model.sessionContext = currentSession;
        });
        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:kernel-status', {
            item,
            align: 'left',
            rank: 1,
            isActive: () => {
                const current = labShell.currentWidget;
                return (!!current &&
                    (notebookTracker.has(current) || consoleTracker.has(current)));
            }
        });
    }
};
/**
 * A plugin providing a line/column status item to the application.
 */
export const lineColItem = {
    id: '@jupyterlab/statusbar-extension:line-col-status',
    autoStart: true,
    requires: [
        IStatusBar,
        INotebookTracker,
        IEditorTracker,
        IConsoleTracker,
        ILabShell
    ],
    activate: (_, statusBar, notebookTracker, editorTracker, consoleTracker, labShell) => {
        const item = new LineCol();
        const onActiveCellChanged = (notebook, cell) => {
            item.model.editor = cell && cell.editor;
        };
        const onPromptCreated = (console, prompt) => {
            item.model.editor = prompt && prompt.editor;
        };
        labShell.currentChanged.connect((_, change) => {
            const { oldValue, newValue } = change;
            // Check if we need to disconnect the console listener
            // or the notebook active cell listener
            if (oldValue && consoleTracker.has(oldValue)) {
                oldValue.console.promptCellCreated.disconnect(onPromptCreated);
            }
            else if (oldValue && notebookTracker.has(oldValue)) {
                oldValue.content.activeCellChanged.disconnect(onActiveCellChanged);
            }
            // Wire up the new editor to the model if it exists
            if (newValue && consoleTracker.has(newValue)) {
                newValue.console.promptCellCreated.connect(onPromptCreated);
                const prompt = newValue.console.promptCell;
                item.model.editor = prompt && prompt.editor;
            }
            else if (newValue && notebookTracker.has(newValue)) {
                newValue.content.activeCellChanged.connect(onActiveCellChanged);
                const cell = newValue.content.activeCell;
                item.model.editor = cell && cell.editor;
            }
            else if (newValue && editorTracker.has(newValue)) {
                item.model.editor = newValue.content.editor;
            }
            else {
                item.model.editor = null;
            }
        });
        // Add the status item to the status bar.
        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:line-col-status', {
            item,
            align: 'right',
            rank: 2,
            isActive: () => {
                const current = labShell.currentWidget;
                return (!!current &&
                    (notebookTracker.has(current) ||
                        editorTracker.has(current) ||
                        consoleTracker.has(current)));
            }
        });
    }
};
/**
 * A plugin providing memory usage statistics to the application.
 *
 * #### Notes
 * This plugin will not work unless the memory usage server extension
 * is installed.
 */
export const memoryUsageItem = {
    id: '@jupyterlab/statusbar-extension:memory-usage-status',
    autoStart: true,
    requires: [IStatusBar],
    activate: (app, statusBar) => {
        const item = new MemoryUsage();
        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:memory-usage-status', {
            item,
            align: 'left',
            rank: 2,
            isActive: () => item.model.metricsAvailable,
            activeStateChanged: item.model.stateChanged
        });
    }
};
/*
 * A plugin providing running terminals and sessions information
 * to the status bar.
 */
export const runningSessionsItem = {
    id: '@jupyterlab/statusbar-extension:running-sessions-status',
    autoStart: true,
    requires: [IStatusBar],
    activate: (app, statusBar) => {
        const item = new RunningSessions({
            onClick: () => app.shell.activateById('jp-running-sessions'),
            serviceManager: app.serviceManager
        });
        statusBar.registerStatusItem('@jupyterlab/statusbar-extension:running-sessions-status', {
            item,
            align: 'left',
            rank: 0
        });
    }
};
const plugins = [
    statusBar,
    lineColItem,
    kernelStatus,
    runningSessionsItem,
    memoryUsageItem
];
export default plugins;
//# sourceMappingURL=index.js.map