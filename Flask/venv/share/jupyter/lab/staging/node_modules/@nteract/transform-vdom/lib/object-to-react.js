"use strict";
/**
 * The original copy of this comes from
 * https://github.com/remarkablemark/REON/blob/1f126e71c17f96daad518abffdb2c53b66b8b792/lib/object-to-react.js
 *
 * This version is heavily modified to:
 *
 *   * Match the application/vdom.v1+json spec
 *   * Not mutate data
 *
 * MIT License
 *
 * Copyright (c) 2016 Menglin "Mark" Xu <mark@remarkablemark.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const event_to_object_1 = require("./event-to-object");
/**
 * Convert an object to React element(s).
 *
 * The object schema should be similar to React element's.
 * Note: The object passed in this function will be mutated.
 *
 * @param  {Object}       obj - The element object.
 * @return {ReactElement}
 */
function objectToReactElement(obj, onVDOMEvent) {
    // Pack args for React.createElement
    let args = [];
    if (!obj.tagName || typeof obj.tagName !== "string") {
        throw new Error(`Invalid tagName on ${JSON.stringify(obj, null, 2)}`);
    }
    if (!obj.attributes ||
        Array.isArray(obj.attributes) ||
        typeof obj.attributes !== "object") {
        throw new Error("Attributes must exist on a VDOM Object as an object");
    }
    // style must be an object (non-array)
    if (obj.attributes.style === null || obj.attributes.style === undefined) {
        // no worries here, style can be null or undefined, note that we don't want
        // the falsy values to sneak through (NaN, "", 0, false)
    }
    else if (Array.isArray(obj.attributes.style) ||
        typeof obj.attributes.style !== "object") {
        throw new Error("Style attribute must be an object like { 'backgroundColor': 'DeepPink' }");
    }
    if (obj.attributes.dangerouslySetInnerHTML) {
        delete obj.attributes.dangerouslySetInnerHTML;
    }
    // Add event handlers to attributes.
    // Replace event handlers values (target name) with callback functions that
    // serialize the event object and call `onVDOMEvent` with the comm target name
    // and serialized event.
    // `onVDOMEvent` will send a comm message to a comm channel of target name
    // with a body of serialized event and vdom on kernel will handle the event.
    if (obj.eventHandlers) {
        for (const eventType in obj.eventHandlers) {
            if (obj.eventHandlers.hasOwnProperty(eventType)) {
                const targetName = obj.eventHandlers[eventType];
                obj.attributes[eventType] = (event) => {
                    const serializedEvent = event_to_object_1.serializeEvent(event);
                    onVDOMEvent(targetName, serializedEvent);
                };
            }
        }
    }
    // `React.createElement` 1st argument: type
    args[0] = obj.tagName;
    args[1] = obj.attributes;
    const children = obj.children;
    if (children) {
        if (Array.isArray(children)) {
            // to be safe (although this should never happen)
            if (args[1] === undefined) {
                args[1] = null;
            }
            args = args.concat(arrayToReactChildren(children, onVDOMEvent));
        }
        else if (typeof children === "string") {
            args[2] = children;
        }
        else if (typeof children === "object") {
            args[2] = objectToReactElement(children, onVDOMEvent);
        }
        else {
            throw new Error("children of a vdom element must be a string, object, null, or array of vdom nodes");
        }
    }
    return React.createElement.apply({}, args);
}
exports.objectToReactElement = objectToReactElement;
/**
 * Convert an array of items to React children.
 *
 * @param  {Array} arr - The array.
 * @return {Array}     - The array of mixed values.
 */
function arrayToReactChildren(arr, onVDOMEvent) {
    const result = [];
    // iterate through the `children`
    for (let i = 0, len = arr.length; i < len; i++) {
        // child can have mixed values: text, React element, or array
        const item = arr[i];
        if (item === null) {
            continue;
        }
        else if (Array.isArray(item)) {
            result.push(arrayToReactChildren(item, onVDOMEvent));
        }
        else if (typeof item === "string") {
            result.push(item);
        }
        else if (typeof item === "object") {
            // Create a new object so that if we have to set the key, we are not
            // mutating the original object
            const keyedItem = {
                tagName: item.tagName,
                attributes: item.attributes,
                children: item.children,
                eventHandlers: item.eventHandlers,
                key: i
            };
            if (item.attributes && item.attributes.key) {
                keyedItem.key = item.attributes.key;
            }
            result.push(objectToReactElement(keyedItem, onVDOMEvent));
        }
        else {
            throw new Error(`invalid vdom child: "${item}"`);
        }
    }
    return result;
}
