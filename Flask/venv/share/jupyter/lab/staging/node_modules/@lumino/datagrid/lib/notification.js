"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2019, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var widgets_1 = require("@lumino/widgets");
/**
 * A widget which implements a notification popup.
 */
var Notification = /** @class */ (function (_super) {
    __extends(Notification, _super);
    /**
     * Construct a new notification.
     *
     * @param options - The options for initializing the notification.
     */
    function Notification(options) {
        var _this = _super.call(this, { node: Private.createNode() }) || this;
        _this._message = '';
        _this.addClass('lm-DataGrid-notification');
        _this.setFlag(widgets_1.Widget.Flag.DisallowLayout);
        _this._target = options.target;
        _this._message = options.message || '';
        _this._placement = options.placement || 'bottom';
        widgets_1.Widget.attach(_this, document.body);
        if (options.timeout && options.timeout > 0) {
            setTimeout(function () {
                _this.close();
            }, options.timeout);
        }
        return _this;
    }
    /**
     * Handle the DOM events for the notification.
     *
     * @param event - The DOM event sent to the notification.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the notification's DOM node.
     *
     * This should not be called directly by user code.
     */
    Notification.prototype.handleEvent = function (event) {
        switch (event.type) {
            case 'mousedown':
                this._evtMouseDown(event);
                break;
            case 'contextmenu':
                event.preventDefault();
                event.stopPropagation();
                break;
        }
    };
    Object.defineProperty(Notification.prototype, "placement", {
        /**
         * Get the placement of the notification.
         */
        get: function () {
            return this._placement;
        },
        /**
         * Set the placement of the notification.
         */
        set: function (value) {
            // Do nothing if the placement does not change.
            if (this._placement === value) {
                return;
            }
            // Update the internal placement.
            this._placement = value;
            // Schedule an update for notification.
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "message", {
        /**
         * Get the current value of the message.
         */
        get: function () {
            return this._message;
        },
        /**
         * Set the current value of the message.
         *
         */
        set: function (value) {
            // Do nothing if the value does not change.
            if (this._message === value) {
                return;
            }
            // Update the internal value.
            this._message = value;
            // Schedule an update for notification.
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Notification.prototype, "messageNode", {
        /**
         * Get the node presenting the message.
         */
        get: function () {
            return this.node.getElementsByClassName('lm-DataGrid-notificationMessage')[0];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * A method invoked on a 'before-attach' message.
     */
    Notification.prototype.onBeforeAttach = function (msg) {
        this.node.addEventListener('mousedown', this);
        this.update();
    };
    /**
     * A method invoked on an 'after-detach' message.
     */
    Notification.prototype.onAfterDetach = function (msg) {
        this.node.removeEventListener('mousedown', this);
    };
    /**
     * A method invoked on an 'update-request' message.
     */
    Notification.prototype.onUpdateRequest = function (msg) {
        var targetRect = this._target.getBoundingClientRect();
        var style = this.node.style;
        switch (this._placement) {
            case 'bottom':
                style.left = targetRect.left + 'px';
                style.top = targetRect.bottom + 'px';
                break;
            case 'top':
                style.left = targetRect.left + 'px';
                style.height = targetRect.top + 'px';
                style.top = '0';
                style.alignItems = 'flex-end';
                style.justifyContent = 'flex-end';
                break;
            case 'left':
                style.left = '0';
                style.width = targetRect.left + 'px';
                style.top = targetRect.top + 'px';
                style.alignItems = 'flex-end';
                style.justifyContent = 'flex-end';
                break;
            case 'right':
                style.left = targetRect.right + 'px';
                style.top = targetRect.top + 'px';
                break;
        }
        this.messageNode.innerHTML = this._message;
    };
    /**
     * Handle the `'mousedown'` event for the notification.
     */
    Notification.prototype._evtMouseDown = function (event) {
        // Do nothing if it's not a left mouse press.
        if (event.button !== 0) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        this.close();
    };
    return Notification;
}(widgets_1.Widget));
exports.Notification = Notification;
/**
 * The namespace for the module implementation details.
 */
var Private;
(function (Private) {
    /**
     * Create the DOM node for notification.
     */
    function createNode() {
        var node = document.createElement('div');
        var container = document.createElement('div');
        container.className = 'lm-DataGrid-notificationContainer';
        var message = document.createElement('span');
        message.className = 'lm-DataGrid-notificationMessage';
        container.appendChild(message);
        node.appendChild(container);
        return node;
    }
    Private.createNode = createNode;
})(Private || (Private = {}));
