{"version":3,"sources":["../src/boxengine.ts","../../../node_modules/tslib/tslib.es6.js","../src/widget.ts","../src/layout.ts","../src/title.ts","../src/panellayout.ts","../src/boxlayout.ts","../src/panel.ts","../src/boxpanel.ts","../src/commandpalette.ts","../src/menu.ts","../src/contextmenu.ts","../src/docklayout.ts","../src/tabbar.ts","../src/dockpanel.ts","../src/focustracker.ts","../src/gridlayout.ts","../src/menubar.ts","../src/scrollbar.ts","../src/singletonlayout.ts","../src/splitlayout.ts","../src/splitpanel.ts","../src/stackedlayout.ts","../src/stackedpanel.ts","../src/tabpanel.ts"],"names":["BoxEngine","this","sizeHint","minSize","maxSize","Infinity","stretch","size","done","calc","sizers","space","count","length","totalMin","totalMax","totalSize","totalStretch","stretchCount","i","min","sizer","max","hint","Math","notDoneCount","freeSpace","distSpace","distStretch","amt","adjust","index","delta","growLimit","shrinkLimit","n","grow","limit","shrink","growSizer","shrinkSizer","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","Private","Layout","__assign","assign","t","s","arguments","call","apply","Title","options","_label","_caption","_mnemonic","_iconClass","_iconLabel","_className","_closable","_changed","Signal","owner","undefined","label","mnemonic","icon","_icon","iconClass","iconLabel","iconRenderer","caption","className","closable","_dataset","dataset","defineProperty","value","emit","exports","Widget","_flags","_layout","_parent","_disposed","node","createNode","addClass","dispose","isDisposed","setFlag","Flag","IsDisposed","parent","isAttached","detach","clearData","MessageLoop","AttachedProperty","testFlag","IsAttached","IsHidden","IsVisible","titleProperty","get","id","contains","Error","msg","ChildMessage","sendMessage","Msg","ParentChanged","DisallowLayout","children","iter","empty","widget","hasClass","name","classList","add","removeClass","remove","toggleClass","force","toggle","update","postMessage","UpdateRequest","fit","FitRequest","activate","ActivateRequest","close","CloseRequest","show","isVisible","BeforeShow","clearFlag","AfterShow","hide","BeforeHide","AfterHide","setHidden","hidden","flag","processMessage","type","notifyLayout","onResize","onUpdateRequest","onFitRequest","onBeforeShow","onAfterShow","onBeforeHide","onAfterHide","onBeforeAttach","isHidden","onAfterAttach","onBeforeDetach","onAfterDetach","onActivateRequest","onCloseRequest","onChildAdded","onChildRemoved","processParentMessage","Message","BeforeAttach","AfterAttach","BeforeDetach","AfterDetach","ConflatableMessage","_super","child","_this","ResizeMessage","width","height","UnknownSize","attach","host","ref","document","body","insertBefore","parentNode","removeChild","createElement","_fitPolicy","fitPolicy","layout","init","style","minWidth","minHeight","maxWidth","maxHeight","onChildShown","onChildHidden","each","removeWidget","getHorizontalAlignment","horizontalAlignmentProperty","setHorizontalAlignment","set","getVerticalAlignment","verticalAlignmentProperty","setVerticalAlignment","LayoutItem","_top","NaN","_left","_width","_height","_minWidth","_minHeight","_maxWidth","_maxHeight","position","top","left","limits","ElementExt","sizeLimits","clampW","clampH","resized","onAlignmentChanged","changed","BoxLayout","PanelLayout","_widgets","pop","addWidget","insertWidget","indexOf","j","ArrayExt","insert","attachWidget","move","moveWidget","removeWidgetAt","removeAt","detachWidget","fromIndex","toIndex","_fixed","_spacing","_dirty","_sizers","_items","_box","_alignment","_direction","direction","alignment","spacing","clampSpacing","item","BoxSizer","appendChild","_update","_fit","nVisible","horz","isHorizontal","minW","minH","getSizeBasis","getStretch","box","boxSizing","horizontalSum","verticalSum","offsetWidth","offsetHeight","paddingTop","paddingLeft","extra","offset","stretchProperty","setStretch","sizeBasisProperty","setSizeBasis","onChildSizingChanged","coerce","floor","dir","BoxPanel","CommandPalette","Renderer","Panel","createLayout","widgets","_activeIndex","_results","commands","renderer","defaultRenderer","commandChanged","connect","_onGenericChange","keyBindingChanged","getElementsByClassName","addItem","createItem","push","refresh","removeItem","removeItemAt","clearItems","inputNode","display","handleEvent","event","_evtClick","_evtKeyDown","_toggleFocused","addEventListener","removeEventListener","input","focus","select","query","contentNode","results","search","findFirstIndex","canActivate","content_1","renderEmptyMessage","VirtualDOM","render","activeIndex","content","result","indices","category","renderHeader","active","renderItem","scrollTop","element","scrollIntoViewIfNeeded","button","target","preventDefault","stopPropagation","_execute","altKey","ctrlKey","metaKey","shiftKey","keyCode","_activatePreviousItem","_activateNextItem","ai","start","stop","findLastIndex","part","toLowerCase","isEnabled","execute","command","args","focused","activeElement","data","formatHeader","h","li","createItemClass","createItemDataset","renderItemIcon","renderItemContent","renderItemShortcut","formatEmptyMessage","createIconClass","div","renderItemLabel","renderItemCaption","formatItemLabel","formatItemCaption","formatItemShortcut","isToggled","StringExt","highlight","mark","kb","keyBinding","keys","map","CommandRegistry","formatKeystroke","join","fuzzySearch","source","score","rgx","rgxMatch","exec","match","matchSumOfDeltas","pivot","lowerBound","a","categoryIndices","slice","labelIndices","matchType","scoreCmp","m1","d1","i1","i2","d2","localeCompare","r1","rank","r2","wrapper","clear","spellcheck","CommandItem","items","scores","text","replace","matchItems","sort","visited","fill","_a","_b","item_1","createResults","_commands","trim","JSONExt","emptyObject","findLastValue","keyBindings","deepEqual","Menu","_childIndex","_openTimerID","_closeTimerID","_childMenu","_parentMenu","_aboutToClose","_menuRequested","menu","activateNextItem","activatePreviousItem","triggerActiveItem","activeItem","_cancelOpenTimer","_cancelCloseTimer","rootMenu","console","log","_openChildMenu","insertItem","open","x","y","forceX","forceY","openRootMenu","_evtMouseUp","_evtMouseMove","_evtMouseEnter","_evtMouseLeave","_evtMouseDown","collapsedFlags","computeCollapsed","collapsed","childMenu","parentMenu","kc","key","getKeyboardLayout","keyForKeydownEvent","findMnemonic","multiple","auto","hitTest","clientX","clientY","_startCloseTimer","submenu","_startOpenTimer","hitTestMenus","activateFirst","_closeChildMenu","itemNode","openSubmenu","window","setTimeout","TIMER_DELAY","clearTimeout","renderIcon","renderLabel","renderShortcut","renderSubmenu","formatLabel","formatShortcut","prefix","suffix","char","span","SUBMENU_OVERLAP","tabIndex","MenuItem","temp","k1","k2","px","pageXOffset","py","pageYOffset","cw","documentElement","clientWidth","ch","clientHeight","visibility","getBoundingClientRect","itemRect","right","borderTop","bottom","borderBottom","paddingBottom","upperKey","toUpperCase","k","mn","title","command_1","args_1","ContextMenu","_idTick","DisposableDelegate","removeFirstOf","itemCmp","s1","Selector","calculateSpecificity","selector","s2","isValid","validateSelector","currentTarget","elementFromPoint","availableItems","matches","parentElement","DockLayout","_root","Map","forEach","iterAllWidgets","iterUserWidgets","selectedWidgets","iterSelectedWidgets","tabBars","iterTabBars","handles","iterHandles","moveHandle","handle","offsetX","offsetY","findSplitNode","orientation","offsetLeft","offsetTop","holdSizes","saveLayout","holdAllSizes","main","createConfig","restoreLayout","config","mainConfig","widgetSet","Set","normalizeAreaConfig","oldWidgets","oldTabBars","oldHandles","has","tabBar","realizeAreaConfig","createTabBar","_createTabBar","createHandle","_createHandle","mode","refNode","findTabNode","_insertTab","_insertSplit","_removeWidget","hitTestTabAreas","rect","borderLeft","tabNode","hitTestTabNodes","borderWidth","borderRight","borderHeight","delete","titles","removeTab","splitNode","syncHandles","maybeParent","childNode","childHandle","TabLayoutNode","splitHandle","i_1","gChild","gHandle","gSizer","after","addTab","findFirstTabNode","currentIndex","insertTab","root","_splitRoot","i_2","normalizeSizes","createSizer","GOLDEN_RATIO","i_3","j_1","SplitLayoutNode","normalized","oldRoot","newRoot","normalizeTabAreaConfig","sizes","abs","normalizeSplitAreaConfig","realizeTabAreaConfig","realizeSplitAreaConfig","tabSizer","widgetSizer","chain","once","currentTitle","tabBarItem","current","widgetItem","tabBarSizer","ChainIterator","createNormalizedSizes","setAttribute","sum","reduce","v","horizontal","fixed","handleStyle","TabBar","_currentIndex","_titles","_previousTitle","_dragData","_tabMoved","_currentChanged","_tabCloseRequested","_tabDetachRequested","_tabActivateRequested","tabsMovable","allowDeselect","insertBehavior","removeBehavior","_orientation","_releaseMouse","pi","pt","ci","ct","previousIndex","previousTitle","asTitle","_onTitleChanged","_adjustCurrentForInsert","_adjustCurrentForMove","removeTabAt","disconnect","_adjustCurrentForRemove","clearTabs","_i","releaseMouse","zIndex","renderTab","tabs","tab","pressX","pressY","tabPos","tabSize","tabPressPos","targetIndex","tabLayout","contentRect","override","dragActive","dragAborted","detachRequested","querySelector","closeIconSelector","dragExceeded","tabRect","snapTabLayout","Drag","overrideCursor","detachExceeded","layoutTabs","finalizeTabPosition","duration","parseTransitionDuration","resetTabPositions","bh","sender","_tabID","_tabKeys","WeakMap","createTabKey","createTabStyle","createTabClass","createTabDataset","renderCloseIcon","DRAG_THRESHOLD","DETACH_THRESHOLD","getComputedStyle","parseFloat","transitionDuration","pos","margin","marginLeft","marginTop","dx","dy","pressPos","localPos","clientPos","clientSize","targetPos","targetEnd","pxPos","threshold","ideal","tgt","final","DockPanel","_drag","_tabsMovable","_pressData","_layoutModified","_mode","_renderer","_edges","edges","DEFAULT_EDGES","overlay","Overlay","createSingleDocumentConfig","LayoutModified","tabbar","isEmpty","selectWidget","find","bar","activateWidget","Platform","IS_EDGE","IS_IE","flush","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","isGeneratedTabBarProperty","mimeData","hasData","_showOverlay","dropAction","proposedAction","Private$a","findDropTarget","zone","factory","getData","getDropRef","deltaX","deltaY","cursor","xPos","yPos","paddingRight","tabHeight","tabMoved","_onTabMoved","currentChanged","_onCurrentChanged","tabCloseRequested","_onTabCloseRequested","tabDetachRequested","_onTabDetachRequested","tabActivateRequested","_onTabActivateRequested","MimeData","setData","dragImage","cloneNode","supportedActions","then","_timer","_hidden","geo","delay","panel","toArray","selected","next","panelRect","pl","pr","pb","al","at","ar","ab","rx","round","ry","GridLayout","FocusTracker","_counter","_activeWidget","_currentWidget","_numbers","_nodes","_activeChanged","w","focusNumber","disposed","_onWidgetDisposed","_setWidgets","valid","filter","previous","first","second","_evtFocus","_evtBlur","oldCurrent","oldActive","oldValue","newValue","focusTarget","relatedTarget","_rowSpacing","_columnSpacing","_rowStarts","_columnStarts","_rowSizers","_columnSizers","rowCount","reallocSizers","columnCount","rowSpacing","clampValue","columnSpacing","rowStretch","setRowStretch","columnStretch","setColumnStretch","it","maxRow","maxCol","rowSpanCmp","getCellConfig","row","rowSpan","distributeMin","columnSpanCmp","c1","column","c2","columnSpan","fixedRowSpace","fixedColSpace","cellConfigProperty","setCellConfig","normalizeConfig","portion","MenuBar","_menus","openActiveMenu","addMenu","insertMenu","aboutToClose","_onMenuAboutToClose","menuRequested","_onMenuMenuRequested","removeMenu","removeMenuAt","clearMenus","menus","blur","stopImmediatePropagation","newMenu","activeMenu","oldMenu","ScrollBar","_onRepeat","_repeatTimer","mouseX","mouseY","trackNode","thumbNode","thumbRect","_pageRequested","incrementNode","_stepRequested","decrementNode","_value","_page","_maximum","_thumbMoved","maximum","page","thumbStyle","transform","_moveThumb","findPart","trackPos","trackSpan","trackRect","decrement","increment","track","thumb","scrollBar","SplitLayout","SingletonLayout","_widget","_hasNormedSizes","_handles","relativeSizes","normalize","setRelativeSizes","normed","average","averageSize","lastHandleIndex","values","SplitPanel","StackedLayout","StackedPanel","_widgetRemoved","TabPanel","stackedPanel","widgetRemoved","_onWidgetRemoved","_tabPlacement","tabPlacement","directionFromPlacement","orientationFromPlacement","currentWidget","previousWidget","plc","placementToOrientationMap","placementToDirectionMap"],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n\n/**\n * A sizer object for use with the box engine layout functions.\n *\n * #### Notes\n * A box sizer holds the geometry information for an object along an\n * arbitrary layout orientation.\n *\n * For best performance, this class should be treated as a raw data\n * struct. It should not typically be subclassed.\n */\nexport\nclass BoxSizer {\n  /**\n   * The preferred size for the sizer.\n   *\n   * #### Notes\n   * The sizer will be given this initial size subject to its size\n   * bounds. The sizer will not deviate from this size unless such\n   * deviation is required to fit into the available layout space.\n   *\n   * There is no limit to this value, but it will be clamped to the\n   * bounds defined by [[minSize]] and [[maxSize]].\n   *\n   * The default value is `0`.\n   */\n  sizeHint = 0;\n\n  /**\n   * The minimum size of the sizer.\n   *\n   * #### Notes\n   * The sizer will never be sized less than this value, even if\n   * it means the sizer will overflow the available layout space.\n   *\n   * It is assumed that this value lies in the range `[0, Infinity)`\n   * and that it is `<=` to [[maxSize]]. Failure to adhere to this\n   * constraint will yield undefined results.\n   *\n   * The default value is `0`.\n   */\n  minSize = 0;\n\n  /**\n   * The maximum size of the sizer.\n   *\n   * #### Notes\n   * The sizer will never be sized greater than this value, even if\n   * it means the sizer will underflow the available layout space.\n   *\n   * It is assumed that this value lies in the range `[0, Infinity]`\n   * and that it is `>=` to [[minSize]]. Failure to adhere to this\n   * constraint will yield undefined results.\n   *\n   * The default value is `Infinity`.\n   */\n  maxSize = Infinity;\n\n  /**\n   * The stretch factor for the sizer.\n   *\n   * #### Notes\n   * This controls how much the sizer stretches relative to its sibling\n   * sizers when layout space is distributed. A stretch factor of zero\n   * is special and will cause the sizer to only be resized after all\n   * other sizers with a stretch factor greater than zero have been\n   * resized to their limits.\n   *\n   * It is assumed that this value is an integer that lies in the range\n   * `[0, Infinity)`. Failure to adhere to this constraint will yield\n   * undefined results.\n   *\n   * The default value is `1`.\n   */\n  stretch = 1;\n\n  /**\n   * The computed size of the sizer.\n   *\n   * #### Notes\n   * This value is the output of a call to [[boxCalc]]. It represents\n   * the computed size for the object along the layout orientation,\n   * and will always lie in the range `[minSize, maxSize]`.\n   *\n   * This value is output only.\n   *\n   * Changing this value will have no effect.\n   */\n  size = 0;\n\n  /**\n   * An internal storage property for the layout algorithm.\n   *\n   * #### Notes\n   * This value is used as temporary storage by the layout algorithm.\n   *\n   * Changing this value will have no effect.\n   */\n  done = false;\n}\n\n\n/**\n * The namespace for the box engine layout functions.\n */\nexport\nnamespace BoxEngine {\n  /**\n   * Calculate the optimal layout sizes for a sequence of box sizers.\n   *\n   * This distributes the available layout space among the box sizers\n   * according to the following algorithm:\n   *\n   * 1. Initialize the sizers's size to its size hint and compute the\n   *    sums for each of size hint, min size, and max size.\n   *\n   * 2. If the total size hint equals the available space, return.\n   *\n   * 3. If the available space is less than the total min size, set all\n   *    sizers to their min size and return.\n   *\n   * 4. If the available space is greater than the total max size, set\n   *    all sizers to their max size and return.\n   *\n   * 5. If the layout space is less than the total size hint, distribute\n   *    the negative delta as follows:\n   *\n   *    a. Shrink each sizer with a stretch factor greater than zero by\n   *       an amount proportional to the negative space and the sum of\n   *       stretch factors. If the sizer reaches its min size, remove\n   *       it and its stretch factor from the computation.\n   *\n   *    b. If after adjusting all stretch sizers there remains negative\n   *       space, distribute the space equally among the sizers with a\n   *       stretch factor of zero. If a sizer reaches its min size,\n   *       remove it from the computation.\n   *\n   * 6. If the layout space is greater than the total size hint,\n   *    distribute the positive delta as follows:\n   *\n   *    a. Expand each sizer with a stretch factor greater than zero by\n   *       an amount proportional to the postive space and the sum of\n   *       stretch factors. If the sizer reaches its max size, remove\n   *       it and its stretch factor from the computation.\n   *\n   *    b. If after adjusting all stretch sizers there remains positive\n   *       space, distribute the space equally among the sizers with a\n   *       stretch factor of zero. If a sizer reaches its max size,\n   *       remove it from the computation.\n   *\n   * 7. return\n   *\n   * @param sizers - The sizers for a particular layout line.\n   *\n   * @param space - The available layout space for the sizers.\n   *\n   * @returns The delta between the provided available space and the\n   *   actual consumed space. This value will be zero if the sizers\n   *   can be adjusted to fit, negative if the available space is too\n   *   small, and positive if the available space is too large.\n   *\n   * #### Notes\n   * The [[size]] of each sizer is updated with the computed size.\n   *\n   * This function can be called at any time to recompute the layout for\n   * an existing sequence of sizers. The previously computed results will\n   * have no effect on the new output. It is therefore not necessary to\n   * create new sizer objects on each resize event.\n   */\n  export\n  function calc(sizers: ArrayLike<BoxSizer>, space: number): number {\n    // Bail early if there is nothing to do.\n    let count = sizers.length;\n    if (count === 0) {\n      return space;\n    }\n\n    // Setup the size and stretch counters.\n    let totalMin = 0;\n    let totalMax = 0;\n    let totalSize = 0;\n    let totalStretch = 0;\n    let stretchCount = 0;\n\n    // Setup the sizers and compute the totals.\n    for (let i = 0; i < count; ++i) {\n      let sizer = sizers[i];\n      let min = sizer.minSize;\n      let max = sizer.maxSize;\n      let hint = sizer.sizeHint;\n      sizer.done = false;\n      sizer.size = Math.max(min, Math.min(hint, max));\n      totalSize += sizer.size;\n      totalMin += min;\n      totalMax += max;\n      if (sizer.stretch > 0) {\n        totalStretch += sizer.stretch;\n        stretchCount++;\n      }\n    }\n\n    // If the space is equal to the total size, return early.\n    if (space === totalSize) {\n      return 0;\n    }\n\n    // If the space is less than the total min, minimize each sizer.\n    if (space <= totalMin) {\n      for (let i = 0; i < count; ++i) {\n        let sizer = sizers[i];\n        sizer.size = sizer.minSize;\n      }\n      return space - totalMin;\n    }\n\n    // If the space is greater than the total max, maximize each sizer.\n    if (space >= totalMax) {\n      for (let i = 0; i < count; ++i) {\n        let sizer = sizers[i];\n        sizer.size = sizer.maxSize;\n      }\n      return space - totalMax;\n    }\n\n    // The loops below perform sub-pixel precision sizing. A near zero\n    // value is used for compares instead of zero to ensure that the\n    // loop terminates when the subdivided space is reasonably small.\n    let nearZero = 0.01;\n\n    // A counter which is decremented each time a sizer is resized to\n    // its limit. This ensures the loops terminate even if there is\n    // space remaining to distribute.\n    let notDoneCount = count;\n\n    // Distribute negative delta space.\n    if (space < totalSize) {\n      // Shrink each stretchable sizer by an amount proportional to its\n      // stretch factor. If a sizer reaches its min size it's marked as\n      // done. The loop progresses in phases where each sizer is given\n      // a chance to consume its fair share for the pass, regardless of\n      // whether a sizer before it reached its limit. This continues\n      // until the stretchable sizers or the free space is exhausted.\n      let freeSpace = totalSize - space;\n      while (stretchCount > 0 && freeSpace > nearZero) {\n        let distSpace = freeSpace;\n        let distStretch = totalStretch;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done || sizer.stretch === 0) {\n            continue;\n          }\n          let amt = sizer.stretch * distSpace / distStretch;\n          if (sizer.size - amt <= sizer.minSize) {\n            freeSpace -= sizer.size - sizer.minSize;\n            totalStretch -= sizer.stretch;\n            sizer.size = sizer.minSize;\n            sizer.done = true;\n            notDoneCount--;\n            stretchCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size -= amt;\n          }\n        }\n      }\n      // Distribute any remaining space evenly among the non-stretchable\n      // sizers. This progresses in phases in the same manner as above.\n      while (notDoneCount > 0 && freeSpace > nearZero) {\n        let amt = freeSpace / notDoneCount;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done) {\n            continue;\n          }\n          if (sizer.size - amt <= sizer.minSize) {\n            freeSpace -= sizer.size - sizer.minSize;\n            sizer.size = sizer.minSize;\n            sizer.done = true;\n            notDoneCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size -= amt;\n          }\n        }\n      }\n    }\n    // Distribute positive delta space.\n    else {\n      // Expand each stretchable sizer by an amount proportional to its\n      // stretch factor. If a sizer reaches its max size it's marked as\n      // done. The loop progresses in phases where each sizer is given\n      // a chance to consume its fair share for the pass, regardless of\n      // whether a sizer before it reached its limit. This continues\n      // until the stretchable sizers or the free space is exhausted.\n      let freeSpace = space - totalSize;\n      while (stretchCount > 0 && freeSpace > nearZero) {\n        let distSpace = freeSpace;\n        let distStretch = totalStretch;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done || sizer.stretch === 0) {\n            continue;\n          }\n          let amt = sizer.stretch * distSpace / distStretch;\n          if (sizer.size + amt >= sizer.maxSize) {\n            freeSpace -= sizer.maxSize - sizer.size;\n            totalStretch -= sizer.stretch;\n            sizer.size = sizer.maxSize;\n            sizer.done = true;\n            notDoneCount--;\n            stretchCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size += amt;\n          }\n        }\n      }\n      // Distribute any remaining space evenly among the non-stretchable\n      // sizers. This progresses in phases in the same manner as above.\n      while (notDoneCount > 0 && freeSpace > nearZero) {\n        let amt = freeSpace / notDoneCount;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done) {\n            continue;\n          }\n          if (sizer.size + amt >= sizer.maxSize) {\n            freeSpace -= sizer.maxSize - sizer.size;\n            sizer.size = sizer.maxSize;\n            sizer.done = true;\n            notDoneCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size += amt;\n          }\n        }\n      }\n    }\n\n    // Indicate that the consumed space equals the available space.\n    return 0;\n  }\n\n  /**\n   * Adjust a sizer by a delta and update its neighbors accordingly.\n   *\n   * @param sizers - The sizers which should be adjusted.\n   *\n   * @param index - The index of the sizer to grow.\n   *\n   * @param delta - The amount to adjust the sizer, positive or negative.\n   *\n   * #### Notes\n   * This will adjust the indicated sizer by the specified amount, along\n   * with the sizes of the appropriate neighbors, subject to the limits\n   * specified by each of the sizers.\n   *\n   * This is useful when implementing box layouts where the boundaries\n   * between the sizers are interactively adjustable by the user.\n   */\n  export\n  function adjust(sizers: ArrayLike<BoxSizer>, index: number, delta: number): void {\n    // Bail early when there is nothing to do.\n    if (sizers.length === 0 || delta === 0) {\n      return;\n    }\n\n    // Dispatch to the proper implementation.\n    if (delta > 0) {\n      growSizer(sizers, index, delta);\n    } else {\n      shrinkSizer(sizers, index, -delta);\n    }\n  }\n\n  /**\n   * Grow a sizer by a positive delta and adjust neighbors.\n   */\n  function growSizer(sizers: ArrayLike<BoxSizer>, index: number, delta: number): void {\n    // Compute how much the items to the left can expand.\n    let growLimit = 0;\n    for (let i = 0; i <= index; ++i) {\n      let sizer = sizers[i];\n      growLimit += sizer.maxSize - sizer.size;\n    }\n\n    // Compute how much the items to the right can shrink.\n    let shrinkLimit = 0;\n    for (let i = index + 1, n = sizers.length; i < n; ++i) {\n      let sizer = sizers[i];\n      shrinkLimit += sizer.size - sizer.minSize;\n    }\n\n    // Clamp the delta adjustment to the limits.\n    delta = Math.min(delta, growLimit, shrinkLimit);\n\n    // Grow the sizers to the left by the delta.\n    let grow = delta;\n    for (let i = index; i >= 0 && grow > 0; --i) {\n      let sizer = sizers[i];\n      let limit = sizer.maxSize - sizer.size;\n      if (limit >= grow) {\n        sizer.sizeHint = sizer.size + grow;\n        grow = 0;\n      } else {\n        sizer.sizeHint = sizer.size + limit;\n        grow -= limit;\n      }\n    }\n\n    // Shrink the sizers to the right by the delta.\n    let shrink = delta;\n    for (let i = index + 1, n = sizers.length; i < n && shrink > 0; ++i) {\n      let sizer = sizers[i];\n      let limit = sizer.size - sizer.minSize;\n      if (limit >= shrink) {\n        sizer.sizeHint = sizer.size - shrink;\n        shrink = 0;\n      } else {\n        sizer.sizeHint = sizer.size - limit;\n        shrink -= limit;\n      }\n    }\n  }\n\n  /**\n   * Shrink a sizer by a positive delta and adjust neighbors.\n   */\n  function shrinkSizer(sizers: ArrayLike<BoxSizer>, index: number, delta: number): void {\n    // Compute how much the items to the right can expand.\n    let growLimit = 0;\n    for (let i = index + 1, n = sizers.length; i < n; ++i) {\n      let sizer = sizers[i];\n      growLimit += sizer.maxSize - sizer.size;\n    }\n\n    // Compute how much the items to the left can shrink.\n    let shrinkLimit = 0;\n    for (let i = 0; i <= index; ++i) {\n      let sizer = sizers[i];\n      shrinkLimit += sizer.size - sizer.minSize;\n    }\n\n    // Clamp the delta adjustment to the limits.\n    delta = Math.min(delta, growLimit, shrinkLimit);\n\n    // Grow the sizers to the right by the delta.\n    let grow = delta;\n    for (let i = index + 1, n = sizers.length; i < n && grow > 0; ++i) {\n      let sizer = sizers[i];\n      let limit = sizer.maxSize - sizer.size;\n      if (limit >= grow) {\n        sizer.sizeHint = sizer.size + grow;\n        grow = 0;\n      } else {\n        sizer.sizeHint = sizer.size + limit;\n        grow -= limit;\n      }\n    }\n\n    // Shrink the sizers to the left by the delta.\n    let shrink = delta;\n    for (let i = index; i >= 0 && shrink > 0; --i) {\n      let sizer = sizers[i];\n      let limit = sizer.size - sizer.minSize;\n      if (limit >= shrink) {\n        sizer.sizeHint = sizer.size - shrink;\n        shrink = 0;\n      } else {\n        sizer.sizeHint = sizer.size - limit;\n        shrink -= limit;\n      }\n    }\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterator, empty\n} from '@lumino/algorithm';\n\nimport {\n  IObservableDisposable\n} from '@lumino/disposable';\n\nimport {\n  ConflatableMessage, IMessageHandler, Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Layout\n} from './layout';\n\nimport {\n  Title\n} from './title';\n\n\n/**\n * The base class of the lumino widget hierarchy.\n *\n * #### Notes\n * This class will typically be subclassed in order to create a useful\n * widget. However, it can be used directly to host externally created\n * content.\n */\nexport\nclass Widget implements IMessageHandler, IObservableDisposable {\n  /**\n   * Construct a new widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: Widget.IOptions = {}) {\n    this.node = Private.createNode(options);\n    this.addClass('lm-Widget');\n    /* <DEPRECATED> */\n    this.addClass('p-Widget');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Dispose of the widget and its descendant widgets.\n   *\n   * #### Notes\n   * It is unsafe to use the widget after it has been disposed.\n   *\n   * All calls made to this method after the first are a no-op.\n   */\n  dispose(): void {\n    // Do nothing if the widget is already disposed.\n    if (this.isDisposed) {\n      return;\n    }\n\n    // Set the disposed flag and emit the disposed signal.\n    this.setFlag(Widget.Flag.IsDisposed);\n    this._disposed.emit(undefined);\n\n    // Remove or detach the widget if necessary.\n    if (this.parent) {\n      this.parent = null;\n    } else if (this.isAttached) {\n      Widget.detach(this);\n    }\n\n    // Dispose of the widget layout.\n    if (this._layout) {\n      this._layout.dispose();\n      this._layout = null;\n    }\n\n    // Clear the extra data associated with the widget.\n    Signal.clearData(this);\n    MessageLoop.clearData(this);\n    AttachedProperty.clearData(this);\n  }\n\n  /**\n   * A signal emitted when the widget is disposed.\n   */\n  get disposed(): ISignal<this, void> {\n    return this._disposed;\n  }\n\n  /**\n   * Get the DOM node owned by the widget.\n   */\n  readonly node: HTMLElement;\n\n  /**\n   * Test whether the widget has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this.testFlag(Widget.Flag.IsDisposed);\n  }\n\n  /**\n   * Test whether the widget's node is attached to the DOM.\n   */\n  get isAttached(): boolean {\n    return this.testFlag(Widget.Flag.IsAttached);\n  }\n\n  /**\n   * Test whether the widget is explicitly hidden.\n   */\n  get isHidden(): boolean {\n    return this.testFlag(Widget.Flag.IsHidden);\n  }\n\n  /**\n   * Test whether the widget is visible.\n   *\n   * #### Notes\n   * A widget is visible when it is attached to the DOM, is not\n   * explicitly hidden, and has no explicitly hidden ancestors.\n   */\n  get isVisible(): boolean {\n    return this.testFlag(Widget.Flag.IsVisible);\n  }\n\n  /**\n   * The title object for the widget.\n   *\n   * #### Notes\n   * The title object is used by some container widgets when displaying\n   * the widget alongside some title, such as a tab panel or side bar.\n   *\n   * Since not all widgets will use the title, it is created on demand.\n   *\n   * The `owner` property of the title is set to this widget.\n   */\n  get title(): Title<Widget> {\n    return Private.titleProperty.get(this);\n  }\n\n  /**\n   * Get the id of the widget's DOM node.\n   */\n  get id(): string {\n    return this.node.id;\n  }\n\n  /**\n   * Set the id of the widget's DOM node.\n   */\n  set id(value: string) {\n    this.node.id = value;\n  }\n\n  /**\n   * The dataset for the widget's DOM node.\n   */\n  get dataset(): DOMStringMap {\n    return this.node.dataset;\n  }\n\n  /**\n   * Get the parent of the widget.\n   */\n  get parent(): Widget | null {\n    return this._parent;\n  }\n\n  /**\n   * Set the parent of the widget.\n   *\n   * #### Notes\n   * Children are typically added to a widget by using a layout, which\n   * means user code will not normally set the parent widget directly.\n   *\n   * The widget will be automatically removed from its old parent.\n   *\n   * This is a no-op if there is no effective parent change.\n   */\n  set parent(value: Widget | null) {\n    if (this._parent === value) {\n      return;\n    }\n    if (value && this.contains(value)) {\n      throw new Error('Invalid parent widget.');\n    }\n    if (this._parent && !this._parent.isDisposed) {\n      let msg = new Widget.ChildMessage('child-removed', this);\n      MessageLoop.sendMessage(this._parent, msg);\n    }\n    this._parent = value;\n    if (this._parent && !this._parent.isDisposed) {\n      let msg = new Widget.ChildMessage('child-added', this);\n      MessageLoop.sendMessage(this._parent, msg);\n    }\n    if (!this.isDisposed) {\n      MessageLoop.sendMessage(this, Widget.Msg.ParentChanged);\n    }\n  }\n\n  /**\n   * Get the layout for the widget.\n   */\n  get layout(): Layout | null {\n    return this._layout;\n  }\n\n  /**\n   * Set the layout for the widget.\n   *\n   * #### Notes\n   * The layout is single-use only. It cannot be changed after the\n   * first assignment.\n   *\n   * The layout is disposed automatically when the widget is disposed.\n   */\n  set layout(value: Layout | null) {\n    if (this._layout === value) {\n      return;\n    }\n    if (this.testFlag(Widget.Flag.DisallowLayout)) {\n      throw new Error('Cannot set widget layout.');\n    }\n    if (this._layout) {\n      throw new Error('Cannot change widget layout.');\n    }\n    if (value!.parent) {\n      throw new Error('Cannot change layout parent.');\n    }\n    this._layout = value;\n    value!.parent = this;\n  }\n\n  /**\n   * Create an iterator over the widget's children.\n   *\n   * @returns A new iterator over the children of the widget.\n   *\n   * #### Notes\n   * The widget must have a populated layout in order to have children.\n   *\n   * If a layout is not installed, the returned iterator will be empty.\n   */\n  children(): IIterator<Widget> {\n    return this._layout ? this._layout.iter() : empty<Widget>();\n  }\n\n  /**\n   * Test whether a widget is a descendant of this widget.\n   *\n   * @param widget - The descendant widget of interest.\n   *\n   * @returns `true` if the widget is a descendant, `false` otherwise.\n   */\n  contains(widget: Widget): boolean {\n    for (let value: Widget | null = widget; value; value = value._parent) {\n      if (value === this) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Test whether the widget's DOM node has the given class name.\n   *\n   * @param name - The class name of interest.\n   *\n   * @returns `true` if the node has the class, `false` otherwise.\n   */\n  hasClass(name: string): boolean {\n    return this.node.classList.contains(name);\n  }\n\n  /**\n   * Add a class name to the widget's DOM node.\n   *\n   * @param name - The class name to add to the node.\n   *\n   * #### Notes\n   * If the class name is already added to the node, this is a no-op.\n   *\n   * The class name must not contain whitespace.\n   */\n  addClass(name: string): void {\n    this.node.classList.add(name);\n  }\n\n  /**\n   * Remove a class name from the widget's DOM node.\n   *\n   * @param name - The class name to remove from the node.\n   *\n   * #### Notes\n   * If the class name is not yet added to the node, this is a no-op.\n   *\n   * The class name must not contain whitespace.\n   */\n  removeClass(name: string): void {\n    this.node.classList.remove(name);\n  }\n\n  /**\n   * Toggle a class name on the widget's DOM node.\n   *\n   * @param name - The class name to toggle on the node.\n   *\n   * @param force - Whether to force add the class (`true`) or force\n   *   remove the class (`false`). If not provided, the presence of\n   *   the class will be toggled from its current state.\n   *\n   * @returns `true` if the class is now present, `false` otherwise.\n   *\n   * #### Notes\n   * The class name must not contain whitespace.\n   */\n  toggleClass(name: string, force?: boolean): boolean {\n    if (force === true) {\n      this.node.classList.add(name);\n      return true;\n    }\n    if (force === false) {\n      this.node.classList.remove(name);\n      return false;\n    }\n    return this.node.classList.toggle(name);\n  }\n\n  /**\n   * Post an `'update-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for posting the message.\n   */\n  update(): void {\n    MessageLoop.postMessage(this, Widget.Msg.UpdateRequest);\n  }\n\n  /**\n   * Post a `'fit-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for posting the message.\n   */\n  fit(): void {\n    MessageLoop.postMessage(this, Widget.Msg.FitRequest);\n  }\n\n  /**\n   * Post an `'activate-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for posting the message.\n   */\n  activate(): void {\n    MessageLoop.postMessage(this, Widget.Msg.ActivateRequest);\n  }\n\n  /**\n   * Send a `'close-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for sending the message.\n   */\n  close(): void {\n    MessageLoop.sendMessage(this, Widget.Msg.CloseRequest);\n  }\n\n  /**\n   * Show the widget and make it visible to its parent widget.\n   *\n   * #### Notes\n   * This causes the [[isHidden]] property to be `false`.\n   *\n   * If the widget is not explicitly hidden, this is a no-op.\n   */\n  show(): void {\n    if (!this.testFlag(Widget.Flag.IsHidden)) {\n      return;\n    }\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.BeforeShow);\n    }\n    this.clearFlag(Widget.Flag.IsHidden);\n    this.removeClass('lm-mod-hidden');\n    /* <DEPRECATED> */\n    this.removeClass('p-mod-hidden');\n    /* </DEPRECATED> */\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.AfterShow);\n    }\n    if (this.parent) {\n      let msg = new Widget.ChildMessage('child-shown', this);\n      MessageLoop.sendMessage(this.parent, msg);\n    }\n  }\n\n  /**\n   * Hide the widget and make it hidden to its parent widget.\n   *\n   * #### Notes\n   * This causes the [[isHidden]] property to be `true`.\n   *\n   * If the widget is explicitly hidden, this is a no-op.\n   */\n  hide(): void {\n    if (this.testFlag(Widget.Flag.IsHidden)) {\n      return;\n    }\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.BeforeHide);\n    }\n    this.setFlag(Widget.Flag.IsHidden);\n    this.addClass('lm-mod-hidden');\n    /* <DEPRECATED> */\n    this.addClass('p-mod-hidden');\n    /* </DEPRECATED> */\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.AfterHide);\n    }\n    if (this.parent) {\n      let msg = new Widget.ChildMessage('child-hidden', this);\n      MessageLoop.sendMessage(this.parent, msg);\n    }\n  }\n\n  /**\n   * Show or hide the widget according to a boolean value.\n   *\n   * @param hidden - `true` to hide the widget, or `false` to show it.\n   *\n   * #### Notes\n   * This is a convenience method for `hide()` and `show()`.\n   */\n  setHidden(hidden: boolean): void {\n    if (hidden) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Test whether the given widget flag is set.\n   *\n   * #### Notes\n   * This will not typically be called directly by user code.\n   */\n  testFlag(flag: Widget.Flag): boolean {\n    return (this._flags & flag) !== 0;\n  }\n\n  /**\n   * Set the given widget flag.\n   *\n   * #### Notes\n   * This will not typically be called directly by user code.\n   */\n  setFlag(flag: Widget.Flag): void {\n    this._flags |= flag;\n  }\n\n  /**\n   * Clear the given widget flag.\n   *\n   * #### Notes\n   * This will not typically be called directly by user code.\n   */\n  clearFlag(flag: Widget.Flag): void {\n    this._flags &= ~flag;\n  }\n\n  /**\n   * Process a message sent to the widget.\n   *\n   * @param msg - The message sent to the widget.\n   *\n   * #### Notes\n   * Subclasses may reimplement this method as needed.\n   */\n  processMessage(msg: Message): void {\n    switch (msg.type) {\n    case 'resize':\n      this.notifyLayout(msg);\n      this.onResize(msg as Widget.ResizeMessage);\n      break;\n    case 'update-request':\n      this.notifyLayout(msg);\n      this.onUpdateRequest(msg);\n      break;\n    case 'fit-request':\n      this.notifyLayout(msg);\n      this.onFitRequest(msg);\n      break;\n    case 'before-show':\n      this.notifyLayout(msg);\n      this.onBeforeShow(msg);\n      break;\n    case 'after-show':\n      this.setFlag(Widget.Flag.IsVisible);\n      this.notifyLayout(msg);\n      this.onAfterShow(msg);\n      break;\n    case 'before-hide':\n      this.notifyLayout(msg);\n      this.onBeforeHide(msg);\n      break;\n    case 'after-hide':\n      this.clearFlag(Widget.Flag.IsVisible);\n      this.notifyLayout(msg);\n      this.onAfterHide(msg);\n      break;\n    case 'before-attach':\n      this.notifyLayout(msg);\n      this.onBeforeAttach(msg);\n      break;\n    case 'after-attach':\n      if (!this.isHidden && (!this.parent || this.parent.isVisible)) {\n        this.setFlag(Widget.Flag.IsVisible);\n      }\n      this.setFlag(Widget.Flag.IsAttached);\n      this.notifyLayout(msg);\n      this.onAfterAttach(msg);\n      break;\n    case 'before-detach':\n      this.notifyLayout(msg);\n      this.onBeforeDetach(msg);\n      break;\n    case 'after-detach':\n      this.clearFlag(Widget.Flag.IsVisible);\n      this.clearFlag(Widget.Flag.IsAttached);\n      this.notifyLayout(msg);\n      this.onAfterDetach(msg);\n      break;\n    case 'activate-request':\n      this.notifyLayout(msg);\n      this.onActivateRequest(msg);\n      break;\n    case 'close-request':\n      this.notifyLayout(msg);\n      this.onCloseRequest(msg);\n      break;\n    case 'child-added':\n      this.notifyLayout(msg);\n      this.onChildAdded(msg as Widget.ChildMessage);\n      break;\n    case 'child-removed':\n      this.notifyLayout(msg);\n      this.onChildRemoved(msg as Widget.ChildMessage);\n      break;\n    default:\n      this.notifyLayout(msg);\n      break;\n    }\n  }\n\n  /**\n   * Invoke the message processing routine of the widget's layout.\n   *\n   * @param msg - The message to dispatch to the layout.\n   *\n   * #### Notes\n   * This is a no-op if the widget does not have a layout.\n   *\n   * This will not typically be called directly by user code.\n   */\n  protected notifyLayout(msg: Message): void {\n    if (this._layout) {\n      this._layout.processParentMessage(msg);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'close-request'` message.\n   *\n   * #### Notes\n   * The default implementation unparents or detaches the widget.\n   */\n  protected onCloseRequest(msg: Message): void {\n    if (this.parent) {\n      this.parent = null;\n    } else if (this.isAttached) {\n      Widget.detach(this);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void { }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onUpdateRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onFitRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onActivateRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeShow(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterShow(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeHide(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterHide(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeAttach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterAttach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeDetach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterDetach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void { }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void { }\n\n  private _flags = 0;\n  private _layout: Layout | null = null;\n  private _parent: Widget | null = null;\n  private _disposed = new Signal<this, void>(this);\n}\n\n\n/**\n * The namespace for the `Widget` class statics.\n */\nexport\nnamespace Widget {\n  /**\n   * An options object for initializing a widget.\n   */\n  export\n  interface IOptions {\n    /**\n     * The optional node to use for the widget.\n     *\n     * If a node is provided, the widget will assume full ownership\n     * and control of the node, as if it had created the node itself.\n     *\n     * The default is a new `<div>`.\n     */\n    node?: HTMLElement;\n  }\n\n  /**\n   * An enum of widget bit flags.\n   */\n  export\n  enum Flag {\n    /**\n     * The widget has been disposed.\n     */\n    IsDisposed = 0x1,\n\n    /**\n     * The widget is attached to the DOM.\n     */\n    IsAttached = 0x2,\n\n    /**\n     * The widget is hidden.\n     */\n    IsHidden = 0x4,\n\n    /**\n     * The widget is visible.\n     */\n    IsVisible = 0x8,\n\n    /**\n     * A layout cannot be set on the widget.\n     */\n    DisallowLayout = 0x10\n  }\n\n  /**\n   * A collection of stateless messages related to widgets.\n   */\n  export\n  namespace Msg {\n    /**\n     * A singleton `'before-show'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it becomes visible.\n     *\n     * This message is **not** sent when the widget is being attached.\n     */\n    export\n    const BeforeShow = new Message('before-show');\n\n    /**\n     * A singleton `'after-show'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it becomes visible.\n     *\n     * This message is **not** sent when the widget is being attached.\n     */\n    export\n    const AfterShow = new Message('after-show');\n\n    /**\n     * A singleton `'before-hide'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it becomes not-visible.\n     *\n     * This message is **not** sent when the widget is being detached.\n     */\n    export\n    const BeforeHide = new Message('before-hide');\n\n    /**\n     * A singleton `'after-hide'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it becomes not-visible.\n     *\n     * This message is **not** sent when the widget is being detached.\n     */\n    export\n    const AfterHide = new Message('after-hide');\n\n    /**\n     * A singleton `'before-attach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it is attached.\n     */\n    export\n    const BeforeAttach = new Message('before-attach');\n\n    /**\n     * A singleton `'after-attach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it is attached.\n     */\n    export\n    const AfterAttach = new Message('after-attach');\n\n    /**\n     * A singleton `'before-detach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it is detached.\n     */\n    export\n    const BeforeDetach = new Message('before-detach');\n\n    /**\n     * A singleton `'after-detach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it is detached.\n     */\n    export\n    const AfterDetach = new Message('after-detach');\n\n    /**\n     * A singleton `'parent-changed'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget when its parent has changed.\n     */\n    export\n    const ParentChanged = new Message('parent-changed');\n\n    /**\n     * A singleton conflatable `'update-request'` message.\n     *\n     * #### Notes\n     * This message can be dispatched to supporting widgets in order to\n     * update their content based on the current widget state. Not all\n     * widgets will respond to messages of this type.\n     *\n     * For widgets with a layout, this message will inform the layout to\n     * update the position and size of its child widgets.\n     */\n    export\n    const UpdateRequest = new ConflatableMessage('update-request');\n\n    /**\n     * A singleton conflatable `'fit-request'` message.\n     *\n     * #### Notes\n     * For widgets with a layout, this message will inform the layout to\n     * recalculate its size constraints to fit the space requirements of\n     * its child widgets, and to update their position and size. Not all\n     * layouts will respond to messages of this type.\n     */\n    export\n    const FitRequest = new ConflatableMessage('fit-request');\n\n    /**\n     * A singleton conflatable `'activate-request'` message.\n     *\n     * #### Notes\n     * This message should be dispatched to a widget when it should\n     * perform the actions necessary to activate the widget, which\n     * may include focusing its node or descendant node.\n     */\n    export\n    const ActivateRequest = new ConflatableMessage('activate-request');\n\n    /**\n     * A singleton conflatable `'close-request'` message.\n     *\n     * #### Notes\n     * This message should be dispatched to a widget when it should close\n     * and remove itself from the widget hierarchy.\n     */\n    export\n    const CloseRequest = new ConflatableMessage('close-request');\n  }\n\n  /**\n   * A message class for child related messages.\n   */\n  export\n  class ChildMessage extends Message {\n    /**\n     * Construct a new child message.\n     *\n     * @param type - The message type.\n     *\n     * @param child - The child widget for the message.\n     */\n    constructor(type: string, child: Widget) {\n      super(type);\n      this.child = child;\n    }\n\n    /**\n     * The child widget for the message.\n     */\n    readonly child: Widget;\n  }\n\n  /**\n   * A message class for `'resize'` messages.\n   */\n  export\n  class ResizeMessage extends Message {\n    /**\n     * Construct a new resize message.\n     *\n     * @param width - The **offset width** of the widget, or `-1` if\n     *   the width is not known.\n     *\n     * @param height - The **offset height** of the widget, or `-1` if\n     *   the height is not known.\n     */\n    constructor(width: number, height: number) {\n      super('resize');\n      this.width = width;\n      this.height = height;\n    }\n\n    /**\n     * The offset width of the widget.\n     *\n     * #### Notes\n     * This will be `-1` if the width is unknown.\n     */\n    readonly width: number;\n\n    /**\n     * The offset height of the widget.\n     *\n     * #### Notes\n     * This will be `-1` if the height is unknown.\n     */\n    readonly height: number;\n  }\n\n  /**\n   * The namespace for the `ResizeMessage` class statics.\n   */\n  export\n  namespace ResizeMessage {\n    /**\n     * A singleton `'resize'` message with an unknown size.\n     */\n    export\n    const UnknownSize = new ResizeMessage(-1, -1);\n  }\n\n  /**\n   * Attach a widget to a host DOM node.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param host - The DOM node to use as the widget's host.\n   *\n   * @param ref - The child of `host` to use as the reference element.\n   *   If this is provided, the widget will be inserted before this\n   *   node in the host. The default is `null`, which will cause the\n   *   widget to be added as the last child of the host.\n   *\n   * #### Notes\n   * This will throw an error if the widget is not a root widget, if\n   * the widget is already attached, or if the host is not attached\n   * to the DOM.\n   */\n  export\n  function attach(widget: Widget, host: HTMLElement, ref: HTMLElement | null = null): void {\n    if (widget.parent) {\n      throw new Error('Cannot attach a child widget.');\n    }\n    if (widget.isAttached || document.body.contains(widget.node)) {\n      throw new Error('Widget is already attached.');\n    }\n    if (!document.body.contains(host)) {\n      throw new Error('Host is not attached.');\n    }\n    MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    host.insertBefore(widget.node, ref);\n    MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n  }\n\n  /**\n   * Detach the widget from its host DOM node.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * This will throw an error if the widget is not a root widget,\n   * or if the widget is not attached to the DOM.\n   */\n  export\n  function detach(widget: Widget): void {\n    if (widget.parent) {\n      throw new Error('Cannot detach a child widget.');\n    }\n    if (!widget.isAttached || !document.body.contains(widget.node)) {\n      throw new Error('Widget is not attached.');\n    }\n    MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    widget.node.parentNode!.removeChild(widget.node);\n    MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * An attached property for the widget title object.\n   */\n  export\n  const titleProperty = new AttachedProperty<Widget, Title<Widget>>({\n    name: 'title',\n    create: owner => new Title<Widget>({ owner }),\n  });\n\n  /**\n   * Create a DOM node for the given widget options.\n   */\n  export\n  function createNode(options: Widget.IOptions): HTMLElement {\n    return options.node || document.createElement('div');\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterable, IIterator, each\n} from '@lumino/algorithm';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  Signal\n} from '@lumino/signaling';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * An abstract base class for creating lumino layouts.\n *\n * #### Notes\n * A layout is used to add widgets to a parent and to arrange those\n * widgets within the parent's DOM node.\n *\n * This class implements the base functionality which is required of\n * nearly all layouts. It must be subclassed in order to be useful.\n *\n * Notably, this class does not define a uniform interface for adding\n * widgets to the layout. A subclass should define that API in a way\n * which is meaningful for its intended use.\n */\nexport\nabstract class Layout implements IIterable<Widget>, IDisposable {\n  /**\n   * Construct a new layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: Layout.IOptions = {}) {\n    this._fitPolicy = options.fitPolicy || 'set-min-size';\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   *\n   * #### Notes\n   * This should be reimplemented to clear and dispose of the widgets.\n   *\n   * All reimplementations should call the superclass method.\n   *\n   * This method is called automatically when the parent is disposed.\n   */\n  dispose(): void {\n    this._parent = null;\n    this._disposed = true;\n    Signal.clearData(this);\n    AttachedProperty.clearData(this);\n  }\n\n  /**\n   * Test whether the layout is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Get the parent widget of the layout.\n   */\n  get parent(): Widget | null {\n    return this._parent;\n  }\n\n  /**\n   * Set the parent widget of the layout.\n   *\n   * #### Notes\n   * This is set automatically when installing the layout on the parent\n   * widget. The parent widget should not be set directly by user code.\n   */\n  set parent(value: Widget | null) {\n    if (this._parent === value) {\n      return;\n    }\n    if (this._parent) {\n      throw new Error('Cannot change parent widget.');\n    }\n    if (value!.layout !== this) {\n      throw new Error('Invalid parent widget.');\n    }\n    this._parent = value;\n    this.init();\n  }\n\n  /**\n   * Get the fit policy for the layout.\n   *\n   * #### Notes\n   * The fit policy controls the computed size constraints which are\n   * applied to the parent widget by the layout.\n   *\n   * Some layout implementations may ignore the fit policy.\n   */\n  get fitPolicy(): Layout.FitPolicy {\n    return this._fitPolicy;\n  }\n\n  /**\n   * Set the fit policy for the layout.\n   *\n   * #### Notes\n   * The fit policy controls the computed size constraints which are\n   * applied to the parent widget by the layout.\n   *\n   * Some layout implementations may ignore the fit policy.\n   *\n   * Changing the fit policy will clear the current size constraint\n   * for the parent widget and then re-fit the parent.\n   */\n  set fitPolicy(value: Layout.FitPolicy) {\n    // Bail if the policy does not change\n    if (this._fitPolicy === value) {\n      return;\n    }\n\n    // Update the internal policy.\n    this._fitPolicy = value;\n\n    // Clear the size constraints and schedule a fit of the parent.\n    if (this._parent) {\n      let style = this._parent.node.style;\n      style.minWidth = '';\n      style.minHeight = '';\n      style.maxWidth = '';\n      style.maxHeight = '';\n      this._parent.fit();\n    }\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   *\n   * #### Notes\n   * This abstract method must be implemented by a subclass.\n   */\n  abstract iter(): IIterator<Widget>;\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method should *not* modify the widget's `parent`.\n   */\n  abstract removeWidget(widget: Widget): void;\n\n  /**\n   * Process a message sent to the parent widget.\n   *\n   * @param msg - The message sent to the parent widget.\n   *\n   * #### Notes\n   * This method is called by the parent widget to process a message.\n   *\n   * Subclasses may reimplement this method as needed.\n   */\n  processParentMessage(msg: Message): void {\n    switch (msg.type) {\n    case 'resize':\n      this.onResize(msg as Widget.ResizeMessage);\n      break;\n    case 'update-request':\n      this.onUpdateRequest(msg);\n      break;\n    case 'fit-request':\n      this.onFitRequest(msg);\n      break;\n    case 'before-show':\n      this.onBeforeShow(msg);\n      break;\n    case 'after-show':\n      this.onAfterShow(msg);\n      break;\n    case 'before-hide':\n      this.onBeforeHide(msg);\n      break;\n    case 'after-hide':\n      this.onAfterHide(msg);\n      break;\n    case 'before-attach':\n      this.onBeforeAttach(msg);\n      break;\n    case 'after-attach':\n      this.onAfterAttach(msg);\n      break;\n    case 'before-detach':\n      this.onBeforeDetach(msg);\n      break;\n    case 'after-detach':\n      this.onAfterDetach(msg);\n      break;\n    case 'child-removed':\n      this.onChildRemoved(msg as Widget.ChildMessage);\n      break;\n    case 'child-shown':\n      this.onChildShown(msg as Widget.ChildMessage);\n      break;\n    case 'child-hidden':\n      this.onChildHidden(msg as Widget.ChildMessage);\n      break;\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   *\n   * #### Notes\n   * This method is invoked immediately after the layout is installed\n   * on the parent widget.\n   *\n   * The default implementation reparents all of the widgets to the\n   * layout parent widget.\n   *\n   * Subclasses should reimplement this method and attach the child\n   * widget nodes to the parent widget's node.\n   */\n  protected init(): void {\n    each(this, widget => {\n      widget.parent = this.parent;\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   *\n   * #### Notes\n   * The layout should ensure that its widgets are resized according\n   * to the specified layout space, and that they are sent a `'resize'`\n   * message if appropriate.\n   *\n   * The default implementation of this method sends an `UnknownSize`\n   * resize message to all widgets.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, Widget.ResizeMessage.UnknownSize);\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   *\n   * #### Notes\n   * The layout should ensure that its widgets are resized according\n   * to the available layout space, and that they are sent a `'resize'`\n   * message if appropriate.\n   *\n   * The default implementation of this method sends an `UnknownSize`\n   * resize message to all widgets.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, Widget.ResizeMessage.UnknownSize);\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterAttach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterDetach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeShow(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterShow(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeHide(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterHide(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   *\n   * #### Notes\n   * This will remove the child widget from the layout.\n   *\n   * Subclasses should **not** typically reimplement this method.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    this.removeWidget(msg.child);\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onFitRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void { }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void { }\n\n  private _disposed = false;\n  private _fitPolicy: Layout.FitPolicy;\n  private _parent: Widget | null = null;\n}\n\n\n/**\n * The namespace for the `Layout` class statics.\n */\nexport\nnamespace Layout {\n  /**\n   * A type alias for the layout fit policy.\n   *\n   * #### Notes\n   * The fit policy controls the computed size constraints which are\n   * applied to the parent widget by the layout.\n   *\n   * Some layout implementations may ignore the fit policy.\n   */\n  export\n  type FitPolicy = (\n    /**\n     * No size constraint will be applied to the parent widget.\n     */\n    'set-no-constraint' |\n\n    /**\n     * The computed min size will be applied to the parent widget.\n     */\n    'set-min-size'\n  );\n\n  /**\n   * An options object for initializing a layout.\n   */\n  export\n  interface IOptions {\n    /**\n     * The fit policy for the layout.\n     *\n     * The default is `'set-min-size'`.\n     */\n    fitPolicy?: FitPolicy;\n  }\n\n  /**\n   * A type alias for the horizontal alignment of a widget.\n   */\n  export\n  type HorizontalAlignment = 'left' | 'center' | 'right';\n\n  /**\n   * A type alias for the vertical alignment of a widget.\n   */\n  export\n  type VerticalAlignment = 'top' | 'center' | 'bottom';\n\n  /**\n   * Get the horizontal alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The horizontal alignment for the widget.\n   *\n   * #### Notes\n   * If the layout width allocated to a widget is larger than its max\n   * width, the horizontal alignment controls how the widget is placed\n   * within the extra horizontal space.\n   *\n   * If the allocated width is less than the widget's max width, the\n   * horizontal alignment has no effect.\n   *\n   * Some layout implementations may ignore horizontal alignment.\n   */\n  export\n  function getHorizontalAlignment(widget: Widget): HorizontalAlignment {\n    return Private.horizontalAlignmentProperty.get(widget);\n  }\n\n  /**\n   * Set the horizontal alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the horizontal alignment.\n   *\n   * #### Notes\n   * If the layout width allocated to a widget is larger than its max\n   * width, the horizontal alignment controls how the widget is placed\n   * within the extra horizontal space.\n   *\n   * If the allocated width is less than the widget's max width, the\n   * horizontal alignment has no effect.\n   *\n   * Some layout implementations may ignore horizontal alignment.\n   *\n   * Changing the horizontal alignment will post an `update-request`\n   * message to widget's parent, provided the parent has a layout\n   * installed.\n   */\n  export\n  function setHorizontalAlignment(widget: Widget, value: HorizontalAlignment): void {\n    Private.horizontalAlignmentProperty.set(widget, value);\n  }\n\n  /**\n   * Get the vertical alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The vertical alignment for the widget.\n   *\n   * #### Notes\n   * If the layout height allocated to a widget is larger than its max\n   * height, the vertical alignment controls how the widget is placed\n   * within the extra vertical space.\n   *\n   * If the allocated height is less than the widget's max height, the\n   * vertical alignment has no effect.\n   *\n   * Some layout implementations may ignore vertical alignment.\n   */\n  export\n  function getVerticalAlignment(widget: Widget): VerticalAlignment {\n    return Private.verticalAlignmentProperty.get(widget);\n  }\n\n  /**\n   * Set the vertical alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the vertical alignment.\n   *\n   * #### Notes\n   * If the layout height allocated to a widget is larger than its max\n   * height, the vertical alignment controls how the widget is placed\n   * within the extra vertical space.\n   *\n   * If the allocated height is less than the widget's max height, the\n   * vertical alignment has no effect.\n   *\n   * Some layout implementations may ignore vertical alignment.\n   *\n   * Changing the horizontal alignment will post an `update-request`\n   * message to widget's parent, provided the parent has a layout\n   * installed.\n   */\n  export\n  function setVerticalAlignment(widget: Widget, value: VerticalAlignment): void {\n    Private.verticalAlignmentProperty.set(widget, value);\n  }\n}\n\n\n/**\n * An object which assists in the absolute layout of widgets.\n *\n * #### Notes\n * This class is useful when implementing a layout which arranges its\n * widgets using absolute positioning.\n *\n * This class is used by nearly all of the built-in lumino layouts.\n */\nexport\nclass LayoutItem implements IDisposable {\n  /**\n   * Construct a new layout item.\n   *\n   * @param widget - The widget to be managed by the item.\n   *\n   * #### Notes\n   * The widget will be set to absolute positioning.\n   */\n  constructor(widget: Widget) {\n    this.widget = widget;\n    this.widget.node.style.position = 'absolute';\n  }\n\n  /**\n   * Dispose of the the layout item.\n   *\n   * #### Notes\n   * This will reset the positioning of the widget.\n   */\n  dispose(): void {\n    // Do nothing if the item is already disposed.\n    if (this._disposed) {\n      return;\n    }\n\n    // Mark the item as disposed.\n    this._disposed = true;\n\n    // Reset the widget style.\n    let style = this.widget.node.style;\n    style.position = '';\n    style.top = '';\n    style.left = '';\n    style.width = '';\n    style.height = '';\n  }\n\n  /**\n   * The widget managed by the layout item.\n   */\n  readonly widget: Widget;\n\n  /**\n   * The computed minimum width of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get minWidth(): number {\n    return this._minWidth;\n  }\n\n  /**\n   * The computed minimum height of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get minHeight(): number {\n    return this._minHeight;\n  }\n\n  /**\n   * The computed maximum width of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get maxWidth(): number {\n    return this._maxWidth;\n  }\n\n  /**\n   * The computed maximum height of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get maxHeight(): number {\n    return this._maxHeight;\n  }\n\n  /**\n   * Whether the layout item is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Whether the managed widget is hidden.\n   */\n  get isHidden(): boolean {\n    return this.widget.isHidden;\n  }\n\n  /**\n   * Whether the managed widget is visible.\n   */\n  get isVisible(): boolean {\n    return this.widget.isVisible;\n  }\n\n  /**\n   * Whether the managed widget is attached.\n   */\n  get isAttached(): boolean {\n    return this.widget.isAttached;\n  }\n\n  /**\n   * Update the computed size limits of the managed widget.\n   */\n  fit(): void {\n    let limits = ElementExt.sizeLimits(this.widget.node);\n    this._minWidth = limits.minWidth;\n    this._minHeight = limits.minHeight;\n    this._maxWidth = limits.maxWidth;\n    this._maxHeight = limits.maxHeight;\n  }\n\n  /**\n   * Update the position and size of the managed widget.\n   *\n   * @param left - The left edge position of the layout box.\n   *\n   * @param top - The top edge position of the layout box.\n   *\n   * @param width - The width of the layout box.\n   *\n   * @param height - The height of the layout box.\n   */\n  update(left: number, top: number, width: number, height: number): void {\n    // Clamp the size to the computed size limits.\n    let clampW = Math.max(this._minWidth, Math.min(width, this._maxWidth));\n    let clampH = Math.max(this._minHeight, Math.min(height, this._maxHeight));\n\n    // Adjust the left edge for the horizontal alignment, if needed.\n    if (clampW < width) {\n      switch (Layout.getHorizontalAlignment(this.widget)) {\n      case 'left':\n        break;\n      case 'center':\n        left += (width - clampW) / 2;\n        break;\n      case 'right':\n        left += width - clampW;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n\n    // Adjust the top edge for the vertical alignment, if needed.\n    if (clampH < height) {\n      switch (Layout.getVerticalAlignment(this.widget)) {\n      case 'top':\n        break;\n      case 'center':\n        top += (height - clampH) / 2;\n        break;\n      case 'bottom':\n        top += height - clampH;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n\n    // Set up the resize variables.\n    let resized = false;\n    let style = this.widget.node.style;\n\n    // Update the top edge of the widget if needed.\n    if (this._top !== top) {\n      this._top = top;\n      style.top = `${top}px`;\n    }\n\n    // Update the left edge of the widget if needed.\n    if (this._left !== left) {\n      this._left = left;\n      style.left = `${left}px`;\n    }\n\n    // Update the width of the widget if needed.\n    if (this._width !== clampW) {\n      resized = true;\n      this._width = clampW;\n      style.width = `${clampW}px`;\n    }\n\n    // Update the height of the widget if needed.\n    if (this._height !== clampH) {\n      resized = true;\n      this._height = clampH;\n      style.height = `${clampH}px`;\n    }\n\n    // Send a resize message to the widget if needed.\n    if (resized) {\n      let msg = new Widget.ResizeMessage(clampW, clampH);\n      MessageLoop.sendMessage(this.widget, msg);\n    }\n  }\n\n  private _top = NaN;\n  private _left = NaN;\n  private _width = NaN;\n  private _height = NaN;\n  private _minWidth = 0;\n  private _minHeight = 0;\n  private _maxWidth = Infinity;\n  private _maxHeight = Infinity;\n  private _disposed = false;\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The attached property for a widget horizontal alignment.\n   */\n  export\n  const horizontalAlignmentProperty = new AttachedProperty<Widget, Layout.HorizontalAlignment>({\n    name: 'horizontalAlignment',\n    create: () => 'center',\n    changed: onAlignmentChanged\n  });\n\n  /**\n   * The attached property for a widget vertical alignment.\n   */\n  export\n  const verticalAlignmentProperty = new AttachedProperty<Widget, Layout.VerticalAlignment>({\n    name: 'verticalAlignment',\n    create: () => 'top',\n    changed: onAlignmentChanged\n  });\n\n  /**\n   * The change handler for the attached alignment properties.\n   */\n  function onAlignmentChanged(child: Widget): void {\n    if (child.parent && child.parent.layout) {\n      child.parent.update();\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport { VirtualElement } from \"@lumino/virtualdom\";\n\n\n/**\n * An object which holds data related to an object's title.\n *\n * #### Notes\n * A title object is intended to hold the data necessary to display a\n * header for a particular object. A common example is the `TabPanel`,\n * which uses the widget title to populate the tab for a child widget.\n */\nexport\nclass Title<T> {\n  /**\n   * Construct a new title.\n   *\n   * @param options - The options for initializing the title.\n   */\n  constructor(options: Title.IOptions<T>) {\n    this.owner = options.owner;\n    if (options.label !== undefined) {\n      this._label = options.label;\n    }\n    if (options.mnemonic !== undefined) {\n      this._mnemonic = options.mnemonic;\n    }\n    if (options.icon !== undefined) {\n      /* <DEPRECATED> */\n      if (typeof options.icon === \"string\") {\n        // when ._icon is null, the .icon getter will alias .iconClass\n        this._icon = null;\n        this._iconClass = options.icon;\n      } else {\n      /* </DEPRECATED> */\n\n      this._icon = options.icon;\n\n      /* <DEPRECATED> */\n      }\n      /* </DEPRECATED> */\n    }\n\n    /* <DEPRECATED> */\n    else {\n      // if unset, default to aliasing .iconClass\n      this._icon = null;\n    }\n    /* </DEPRECATED> */\n\n    if (options.iconClass !== undefined) {\n      this._iconClass = options.iconClass;\n    }\n    if (options.iconLabel !== undefined) {\n      this._iconLabel = options.iconLabel;\n    }\n    if (options.iconRenderer !== undefined) {\n      this._icon = options.iconRenderer;\n    }\n    if (options.caption !== undefined) {\n      this._caption = options.caption;\n    }\n    if (options.className !== undefined) {\n      this._className = options.className;\n    }\n    if (options.closable !== undefined) {\n      this._closable = options.closable;\n    }\n    this._dataset = options.dataset || {};\n  }\n\n  /**\n   * A signal emitted when the state of the title changes.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * The object which owns the title.\n   */\n  readonly owner: T;\n\n  /**\n   * Get the label for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get label(): string {\n    return this._label;\n  }\n\n  /**\n   * Set the label for the title.\n   */\n  set label(value: string) {\n    if (this._label === value) {\n      return;\n    }\n    this._label = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the mnemonic index for the title.\n   *\n   * #### Notes\n   * The default value is `-1`.\n   */\n  get mnemonic(): number {\n    return this._mnemonic;\n  }\n\n  /**\n   * Set the mnemonic index for the title.\n   */\n  set mnemonic(value: number) {\n    if (this._mnemonic === value) {\n      return;\n    }\n    this._mnemonic = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the icon renderer for the title.\n   *\n   * #### Notes\n   * The default value is undefined.\n   *\n   * DEPRECATED: if set to a string value, the .icon field will function as\n   * an alias for the .iconClass field, for backwards compatibility\n   */\n  get icon(): VirtualElement.IRenderer| undefined\n  /* <DEPRECATED> */ | string /* </DEPRECATED> */\n  {\n    /* <DEPRECATED> */\n    if (this._icon === null) {\n      // only alias .iconClass if ._icon has been explicitly nulled\n      return this.iconClass\n    }\n    /* </DEPRECATED> */\n\n    return this._icon;\n  }\n\n  /**\n   * Set the icon renderer for the title.\n   *\n   * #### Notes\n   * A renderer is an object that supplies a render and unrender function.\n   *\n   * DEPRECATED: if set to a string value, the .icon field will function as\n   * an alias for the .iconClass field, for backwards compatibility\n   */\n  set icon(value: VirtualElement.IRenderer | undefined\n  /* <DEPRECATED> */ | string /* </DEPRECATED> */\n  ) {\n    /* <DEPRECATED> */\n    if (typeof value === \"string\") {\n      // when ._icon is null, the .icon getter will alias .iconClass\n      this._icon = null;\n      this.iconClass = value;\n    } else {\n    /* </DEPRECATED> */\n\n    if (this._icon === value) {\n      return;\n    }\n    this._icon = value;\n    this._changed.emit(undefined);\n\n    /* <DEPRECATED> */\n    }\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Get the icon class name for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get iconClass(): string {\n    return this._iconClass;\n  }\n\n  /**\n   * Set the icon class name for the title.\n   *\n   * #### Notes\n   * Multiple class names can be separated with whitespace.\n   */\n  set iconClass(value: string) {\n    if (this._iconClass === value) {\n      return;\n    }\n    this._iconClass = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the icon label for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get iconLabel(): string {\n    return this._iconLabel;\n  }\n\n  /**\n   * Set the icon label for the title.\n   *\n   * #### Notes\n   * Multiple class names can be separated with whitespace.\n   */\n  set iconLabel(value: string) {\n    if (this._iconLabel === value) {\n      return;\n    }\n    this._iconLabel = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * @deprecated Use `icon` instead.\n   */\n  get iconRenderer(): VirtualElement.IRenderer | undefined {\n    return this._icon || undefined;\n  }\n\n  /**\n   * @deprecated Use `icon` instead.\n   */\n  set iconRenderer(value: VirtualElement.IRenderer | undefined) {\n    this.icon = value;\n  }\n\n  /**\n   * Get the caption for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get caption(): string {\n    return this._caption;\n  }\n\n  /**\n   * Set the caption for the title.\n   */\n  set caption(value: string) {\n    if (this._caption === value) {\n      return;\n    }\n    this._caption = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the extra class name for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get className(): string {\n    return this._className;\n  }\n\n  /**\n   * Set the extra class name for the title.\n   *\n   * #### Notes\n   * Multiple class names can be separated with whitespace.\n   */\n  set className(value: string) {\n    if (this._className === value) {\n      return;\n    }\n    this._className = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the closable state for the title.\n   *\n   * #### Notes\n   * The default value is `false`.\n   */\n  get closable(): boolean {\n    return this._closable;\n  }\n\n  /**\n   * Set the closable state for the title.\n   *\n   * #### Notes\n   * This controls the presence of a close icon when applicable.\n   */\n  set closable(value: boolean) {\n    if (this._closable === value) {\n      return;\n    }\n    this._closable = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the dataset for the title.\n   *\n   * #### Notes\n   * The default value is an empty dataset.\n   */\n  get dataset(): Title.Dataset {\n    return this._dataset;\n  }\n\n  /**\n   * Set the dataset for the title.\n   *\n   * #### Notes\n   * This controls the data attributes when applicable.\n   */\n  set dataset(value: Title.Dataset) {\n    if (this._dataset === value) {\n      return;\n    }\n    this._dataset = value;\n    this._changed.emit(undefined);\n  }\n\n  private _label = '';\n  private _caption = '';\n  private _mnemonic = -1;\n\n  private _icon: VirtualElement.IRenderer | undefined\n  /* <DEPRECATED> */ | null /* </DEPRECATED> */;\n\n  private _iconClass = '';\n  private _iconLabel = '';\n  private _className = '';\n  private _closable = false;\n  private _dataset: Title.Dataset;\n  private _changed = new Signal<this, void>(this);\n}\n\n\n/**\n * The namespace for the `Title` class statics.\n */\nexport\nnamespace Title {\n  /**\n   * A type alias for a simple immutable string dataset.\n   */\n  export\n  type Dataset = { readonly [key: string]: string };\n\n  /**\n   * An options object for initializing a title.\n   */\n  export\n  interface IOptions<T> {\n    /**\n     * The object which owns the title.\n     */\n    owner: T;\n\n    /**\n     * The label for the title.\n     */\n    label?: string;\n\n    /**\n     * The mnemonic index for the title.\n     */\n    mnemonic?: number;\n\n    /**\n     * The icon renderer for the title.\n     *\n     * DEPRECATED: if set to a string value, the .icon field will function as\n     * an alias for the .iconClass field, for backwards compatibility\n     */\n    icon?: VirtualElement.IRenderer | string;\n\n    /**\n     * The icon class name for the title.\n     */\n    iconClass?: string;\n\n    /**\n     * The icon label for the title.\n     */\n    iconLabel?: string;\n\n    /**\n     * @deprecated Use `icon` instead.\n     */\n    iconRenderer?: VirtualElement.IRenderer;\n\n    /**\n     * The caption for the title.\n     */\n    caption?: string;\n\n    /**\n     * The extra class name for the title.\n     */\n    className?: string;\n\n    /**\n     * The closable state for the title.\n     */\n    closable?: boolean;\n\n    /**\n     * The dataset for the title.\n     */\n    dataset?: Dataset;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, IIterator, each, iter\n} from '@lumino/algorithm';\n\nimport {\n  MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  Layout\n} from './layout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A concrete layout implementation suitable for many use cases.\n *\n * #### Notes\n * This class is suitable as a base class for implementing a variety of\n * layouts, but can also be used directly with standard CSS to layout a\n * collection of widgets.\n */\nexport\nclass PanelLayout extends Layout {\n  /**\n   * Dispose of the resources held by the layout.\n   *\n   * #### Notes\n   * This will clear and dispose all widgets in the layout.\n   *\n   * All reimplementations should call the superclass method.\n   *\n   * This method is called automatically when the parent is disposed.\n   */\n  dispose(): void {\n    while (this._widgets.length > 0) {\n      this._widgets.pop()!.dispose();\n    }\n    super.dispose();\n  }\n\n  /**\n   * A read-only array of the widgets in the layout.\n   */\n  get widgets(): ReadonlyArray<Widget> {\n    return this._widgets;\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   */\n  iter(): IIterator<Widget> {\n    return iter(this._widgets);\n  }\n\n  /**\n   * Add a widget to the end of the layout.\n   *\n   * @param widget - The widget to add to the layout.\n   *\n   * #### Notes\n   * If the widget is already contained in the layout, it will be moved.\n   */\n  addWidget(widget: Widget): void {\n    this.insertWidget(this._widgets.length, widget);\n  }\n\n  /**\n   * Insert a widget into the layout at the specified index.\n   *\n   * @param index - The index at which to insert the widget.\n   *\n   * @param widget - The widget to insert into the layout.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the widgets.\n   *\n   * If the widget is already added to the layout, it will be moved.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  insertWidget(index: number, widget: Widget): void {\n    // Remove the widget from its current parent. This is a no-op\n    // if the widget's parent is already the layout parent widget.\n    widget.parent = this.parent;\n\n    // Look up the current index of the widget.\n    let i = this._widgets.indexOf(widget);\n\n    // Clamp the insert index to the array bounds.\n    let j = Math.max(0, Math.min(index, this._widgets.length));\n\n    // If the widget is not in the array, insert it.\n    if (i === -1) {\n      // Insert the widget into the array.\n      ArrayExt.insert(this._widgets, j, widget);\n\n      // If the layout is parented, attach the widget to the DOM.\n      if (this.parent) {\n        this.attachWidget(j, widget);\n      }\n\n      // There is nothing more to do.\n      return;\n    }\n\n    // Otherwise, the widget exists in the array and should be moved.\n\n    // Adjust the index if the location is at the end of the array.\n    if (j === this._widgets.length) {\n      j--;\n    }\n\n    // Bail if there is no effective move.\n    if (i === j) {\n      return;\n    }\n\n    // Move the widget to the new location.\n    ArrayExt.move(this._widgets, i, j);\n\n    // If the layout is parented, move the widget in the DOM.\n    if (this.parent) {\n      this.moveWidget(i, j, widget);\n    }\n  }\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    this.removeWidgetAt(this._widgets.indexOf(widget));\n  }\n\n  /**\n   * Remove the widget at a given index from the layout.\n   *\n   * @param index - The index of the widget to remove.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  removeWidgetAt(index: number): void {\n    // Remove the widget from the array.\n    let widget = ArrayExt.removeAt(this._widgets, index);\n\n    // If the layout is parented, detach the widget from the DOM.\n    if (widget && this.parent) {\n      this.detachWidget(index, widget);\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    super.init();\n    each(this, (widget, index) => {\n      this.attachWidget(index, widget);\n    });\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the panel layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation adds the widgets's node to the parent's\n   * node at the proper location, and sends the appropriate attach\n   * messages to the widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is added to the parent's node.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Look up the next sibling reference node.\n    let ref = this.parent!.node.children[index];\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Insert the widget's node before the sibling.\n    this.parent!.node.insertBefore(widget.node, ref);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the panel layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation moves the widget's node to the proper\n   * location in the parent's node and sends the appropriate attach and\n   * detach messages to the widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is moved in the parent's node.\n   */\n  protected moveWidget(fromIndex: number, toIndex: number, widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` and  message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Look up the next sibling reference node.\n    let ref = this.parent!.node.children[toIndex];\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Insert the widget's node before the sibling.\n    this.parent!.node.insertBefore(widget.node, ref);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the panel layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation removes the widget's node from the\n   * parent's node, and sends the appropriate detach messages to the\n   * widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is removed from the parent's node.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n  }\n\n  private _widgets: Widget[] = [];\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  BoxEngine, BoxSizer\n} from './boxengine';\n\nimport {\n  LayoutItem\n} from './layout';\n\nimport {\n  PanelLayout\n} from './panellayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout which arranges its widgets in a single row or column.\n */\nexport\nclass BoxLayout extends PanelLayout {\n  /**\n   * Construct a new box layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: BoxLayout.IOptions = {}) {\n    super();\n    if (options.direction !== undefined) {\n      this._direction = options.direction;\n    }\n    if (options.alignment !== undefined) {\n      this._alignment = options.alignment;\n    }\n    if (options.spacing !== undefined) {\n      this._spacing = Private.clampSpacing(options.spacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the layout items.\n    each(this._items, item => { item.dispose(); });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n    this._sizers.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * Get the layout direction for the box layout.\n   */\n  get direction(): BoxLayout.Direction {\n    return this._direction;\n  }\n\n  /**\n   * Set the layout direction for the box layout.\n   */\n  set direction(value: BoxLayout.Direction) {\n    if (this._direction === value) {\n      return;\n    }\n    this._direction = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['direction'] = value;\n    this.parent.fit();\n  }\n\n  /**\n   * Get the content alignment for the box layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  get alignment(): BoxLayout.Alignment {\n    return this._alignment;\n  }\n\n  /**\n   * Set the content alignment for the box layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  set alignment(value: BoxLayout.Alignment) {\n    if (this._alignment === value) {\n      return;\n    }\n    this._alignment = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['alignment'] = value;\n    this.parent.update();\n  }\n\n  /**\n   * Get the inter-element spacing for the box layout.\n   */\n  get spacing(): number {\n    return this._spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the box layout.\n   */\n  set spacing(value: number) {\n    value = Private.clampSpacing(value);\n    if (this._spacing === value) {\n      return;\n    }\n    this._spacing = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.fit();\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    this.parent!.dataset['direction'] = this.direction;\n    this.parent!.dataset['alignment'] = this.alignment;\n    super.init();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Create and add a new layout item for the widget.\n    ArrayExt.insert(this._items, index, new LayoutItem(widget));\n\n    // Create and add a new sizer for the widget.\n    ArrayExt.insert(this._sizers, index, new BoxSizer());\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected moveWidget(fromIndex: number, toIndex: number, widget: Widget): void {\n    // Move the layout item for the widget.\n    ArrayExt.move(this._items, fromIndex, toIndex);\n\n    // Move the sizer for the widget.\n    ArrayExt.move(this._sizers, fromIndex, toIndex);\n\n    // Post an update request for the parent widget.\n    this.parent!.update();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Remove the layout item for the widget.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Remove the sizer for the widget.\n    ArrayExt.removeAt(this._sizers, index);\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Dispose of the layout item.\n    item!.dispose();\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Update the fixed space for the visible items.\n    this._fixed = this._spacing * Math.max(0, nVisible - 1);\n\n    // Setup the computed minimum size.\n    let horz = Private.isHorizontal(this._direction);\n    let minW = horz ? this._fixed : 0;\n    let minH = horz ? 0 : this._fixed;\n\n    // Update the sizers and computed minimum size.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item and corresponding box sizer.\n      let item = this._items[i];\n      let sizer = this._sizers[i];\n\n      // If the item is hidden, it should consume zero size.\n      if (item.isHidden) {\n        sizer.minSize = 0;\n        sizer.maxSize = 0;\n        continue;\n      }\n\n      // Update the size limits for the item.\n      item.fit();\n\n      // Update the size basis and stretch factor.\n      sizer.sizeHint = BoxLayout.getSizeBasis(item.widget);\n      sizer.stretch = BoxLayout.getStretch(item.widget);\n\n      // Update the sizer limits and computed min size.\n      if (horz) {\n        sizer.minSize = item.minWidth;\n        sizer.maxSize = item.maxWidth;\n        minW += item.minWidth;\n        minH = Math.max(minH, item.minHeight);\n      } else {\n        sizer.minSize = item.minHeight;\n        sizer.maxSize = item.maxHeight;\n        minH += item.minHeight;\n        minW = Math.max(minW, item.minWidth);\n      }\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Bail early if there are no visible items to layout.\n    if (nVisible === 0) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the layout area adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Distribute the layout space and adjust the start position.\n    let delta: number;\n    switch (this._direction) {\n    case 'left-to-right':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, width - this._fixed));\n      break;\n    case 'top-to-bottom':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, height - this._fixed));\n      break;\n    case 'right-to-left':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, width - this._fixed));\n      left += width;\n      break;\n    case 'bottom-to-top':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, height - this._fixed));\n      top += height;\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Setup the variables for justification and alignment offset.\n    let extra = 0;\n    let offset = 0;\n\n    // Account for alignment if there is extra layout space.\n    if (delta > 0) {\n      switch (this._alignment) {\n      case 'start':\n        break;\n      case 'center':\n        extra = 0;\n        offset = delta / 2;\n        break;\n      case 'end':\n        extra = 0;\n        offset = delta;\n        break;\n      case 'justify':\n        extra = delta / nVisible;\n        offset = 0;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n\n    // Layout the items using the computed box sizes.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Fetch the computed size for the widget.\n      let size = this._sizers[i].size;\n\n      // Update the widget geometry and advance the relevant edge.\n      switch (this._direction) {\n      case 'left-to-right':\n        item.update(left + offset, top, size + extra, height);\n        left += size + extra + this._spacing;\n        break;\n      case 'top-to-bottom':\n        item.update(left, top + offset, width, size + extra);\n        top += size + extra + this._spacing;\n        break;\n      case 'right-to-left':\n        item.update(left - offset - size - extra, top, size + extra, height);\n        left -= size + extra + this._spacing;\n        break;\n      case 'bottom-to-top':\n        item.update(left, top - offset - size - extra, width, size + extra);\n        top -= size + extra + this._spacing;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n  }\n\n  private _fixed = 0;\n  private _spacing = 4;\n  private _dirty = false;\n  private _sizers: BoxSizer[] = [];\n  private _items: LayoutItem[] = [];\n  private _box: ElementExt.IBoxSizing | null = null;\n  private _alignment: BoxLayout.Alignment = 'start';\n  private _direction: BoxLayout.Direction = 'top-to-bottom';\n}\n\n\n/**\n * The namespace for the `BoxLayout` class statics.\n */\nexport\nnamespace BoxLayout {\n  /**\n   * A type alias for a box layout direction.\n   */\n  export\n  type Direction = (\n    'left-to-right' | 'right-to-left' | 'top-to-bottom' | 'bottom-to-top'\n  );\n\n  /**\n   * A type alias for a box layout alignment.\n   */\n  export\n  type Alignment = 'start' | 'center' | 'end' | 'justify';\n\n  /**\n   * An options object for initializing a box layout.\n   */\n  export\n  interface IOptions {\n    /**\n     * The direction of the layout.\n     *\n     * The default is `'top-to-bottom'`.\n     */\n    direction?: Direction;\n\n    /**\n     * The content alignment of the layout.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the layout.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n  }\n\n  /**\n   * Get the box layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box layout stretch factor for the widget.\n   */\n  export\n  function getStretch(widget: Widget): number {\n    return Private.stretchProperty.get(widget);\n  }\n\n  /**\n   * Set the box layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export\n  function setStretch(widget: Widget, value: number): void {\n    Private.stretchProperty.set(widget, value);\n  }\n\n  /**\n   * Get the box layout size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box layout size basis for the widget.\n   */\n  export\n  function getSizeBasis(widget: Widget): number {\n    return Private.sizeBasisProperty.get(widget);\n  }\n\n  /**\n   * Set the box layout size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the size basis.\n   */\n  export\n  function setSizeBasis(widget: Widget, value: number): void {\n    Private.sizeBasisProperty.set(widget, value);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The property descriptor for a widget stretch factor.\n   */\n  export\n  const stretchProperty = new AttachedProperty<Widget, number>({\n    name: 'stretch',\n    create: () => 0,\n    coerce: (owner, value) => Math.max(0, Math.floor(value)),\n    changed: onChildSizingChanged\n  });\n\n  /**\n   * The property descriptor for a widget size basis.\n   */\n  export\n  const sizeBasisProperty = new AttachedProperty<Widget, number>({\n    name: 'sizeBasis',\n    create: () => 0,\n    coerce: (owner, value) => Math.max(0, Math.floor(value)),\n    changed: onChildSizingChanged\n  });\n\n  /**\n   * Test whether a direction has horizontal orientation.\n   */\n  export\n  function isHorizontal(dir: BoxLayout.Direction): boolean {\n    return dir === 'left-to-right' || dir === 'right-to-left';\n  }\n\n  /**\n   * Clamp a spacing value to an integer >= 0.\n   */\n  export\n  function clampSpacing(value: number): number {\n    return Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * The change handler for the attached sizing properties.\n   */\n  function onChildSizingChanged(child: Widget): void {\n    if (child.parent && child.parent.layout instanceof BoxLayout) {\n      child.parent.fit();\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  PanelLayout\n} from './panellayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A simple and convenient panel widget class.\n *\n * #### Notes\n * This class is suitable as a base class for implementing a variety of\n * convenience panel widgets, but can also be used directly with CSS to\n * arrange a collection of widgets.\n *\n * This class provides a convenience wrapper around a [[PanelLayout]].\n */\nexport\nclass Panel extends Widget {\n  /**\n   * Construct a new panel.\n   *\n   * @param options - The options for initializing the panel.\n   */\n  constructor(options: Panel.IOptions = {}) {\n    super();\n    this.addClass('lm-Panel');\n    /* <DEPRECATED> */\n    this.addClass('p-Panel');\n    /* </DEPRECATED> */\n    this.layout = Private.createLayout(options);\n  }\n\n  /**\n   * A read-only array of the widgets in the panel.\n   */\n  get widgets(): ReadonlyArray<Widget> {\n    return (this.layout as PanelLayout).widgets;\n  }\n\n  /**\n   * Add a widget to the end of the panel.\n   *\n   * @param widget - The widget to add to the panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   */\n  addWidget(widget: Widget): void {\n    (this.layout as PanelLayout).addWidget(widget);\n  }\n\n  /**\n   * Insert a widget at the specified index.\n   *\n   * @param index - The index at which to insert the widget.\n   *\n   * @param widget - The widget to insert into to the panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   */\n  insertWidget(index: number, widget: Widget): void {\n    (this.layout as PanelLayout).insertWidget(index, widget);\n  }\n}\n\n\n/**\n * The namespace for the `Panel` class statics.\n */\nexport\nnamespace Panel {\n  /**\n   * An options object for creating a panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The panel layout to use for the panel.\n     *\n     * The default is a new `PanelLayout`.\n     */\n    layout?: PanelLayout;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create a panel layout for the given panel options.\n   */\n  export\n  function createLayout(options: Panel.IOptions): PanelLayout {\n    return options.layout || new PanelLayout();\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  BoxLayout\n} from './boxlayout';\n\nimport {\n  Panel\n} from './panel';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A panel which arranges its widgets in a single row or column.\n *\n * #### Notes\n * This class provides a convenience wrapper around a [[BoxLayout]].\n */\nexport\nclass BoxPanel extends Panel {\n  /**\n   * Construct a new box panel.\n   *\n   * @param options - The options for initializing the box panel.\n   */\n  constructor(options: BoxPanel.IOptions = {}) {\n    super({ layout: Private.createLayout(options) });\n    this.addClass('lm-BoxPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-BoxPanel');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Get the layout direction for the box panel.\n   */\n  get direction(): BoxPanel.Direction {\n    return (this.layout as BoxLayout).direction;\n  }\n\n  /**\n   * Set the layout direction for the box panel.\n   */\n  set direction(value: BoxPanel.Direction) {\n    (this.layout as BoxLayout).direction = value;\n  }\n\n  /**\n   * Get the content alignment for the box panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  get alignment(): BoxPanel.Alignment {\n    return (this.layout as BoxLayout).alignment;\n  }\n\n  /**\n   * Set the content alignment for the box panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  set alignment(value: BoxPanel.Alignment) {\n    (this.layout as BoxLayout).alignment = value;\n  }\n\n  /**\n   * Get the inter-element spacing for the box panel.\n   */\n  get spacing(): number {\n    return (this.layout as BoxLayout).spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the box panel.\n   */\n  set spacing(value: number) {\n    (this.layout as BoxLayout).spacing = value;\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    msg.child.addClass('lm-BoxPanel-child');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-BoxPanel-child');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    msg.child.removeClass('lm-BoxPanel-child');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-BoxPanel-child');\n    /* </DEPRECATED> */\n  }\n}\n\n\n/**\n * The namespace for the `BoxPanel` class statics.\n */\nexport\nnamespace BoxPanel {\n  /**\n   * A type alias for a box panel direction.\n   */\n  export\n  type Direction = BoxLayout.Direction;\n\n  /**\n   * A type alias for a box panel alignment.\n   */\n  export\n  type Alignment = BoxLayout.Alignment;\n\n  /**\n   * An options object for initializing a box panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The layout direction of the panel.\n     *\n     * The default is `'top-to-bottom'`.\n     */\n    direction?: Direction;\n\n    /**\n     * The content alignment of the panel.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the panel.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n\n    /**\n     * The box layout to use for the box panel.\n     *\n     * If this is provided, the other options are ignored.\n     *\n     * The default is a new `BoxLayout`.\n     */\n    layout?: BoxLayout;\n  }\n\n  /**\n   * Get the box panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box panel stretch factor for the widget.\n   */\n  export\n  function getStretch(widget: Widget): number {\n    return BoxLayout.getStretch(widget);\n  }\n\n  /**\n   * Set the box panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export\n  function setStretch(widget: Widget, value: number): void {\n    BoxLayout.setStretch(widget, value);\n  }\n\n  /**\n   * Get the box panel size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box panel size basis for the widget.\n   */\n  export\n  function getSizeBasis(widget: Widget): number {\n    return BoxLayout.getSizeBasis(widget);\n  }\n\n  /**\n   * Set the box panel size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the size basis.\n   */\n  export\n  function setSizeBasis(widget: Widget, value: number): void {\n    BoxLayout.setSizeBasis(widget, value);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create a box layout for the given panel options.\n   */\n  export\n  function createLayout(options: BoxPanel.IOptions): BoxLayout {\n    return options.layout || new BoxLayout(options);\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, StringExt\n} from '@lumino/algorithm';\n\nimport {\n  JSONExt, ReadonlyJSONObject\n} from '@lumino/coreutils';\n\nimport {\n  CommandRegistry\n} from '@lumino/commands';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message\n} from '@lumino/messaging';\n\nimport {\n  ElementDataset, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays command items as a searchable palette.\n */\nexport\nclass CommandPalette extends Widget {\n  /**\n   * Construct a new command palette.\n   *\n   * @param options - The options for initializing the palette.\n   */\n  constructor(options: CommandPalette.IOptions) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-CommandPalette');\n    /* <DEPRECATED> */\n    this.addClass('p-CommandPalette');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.commands = options.commands;\n    this.renderer = options.renderer || CommandPalette.defaultRenderer;\n    this.commands.commandChanged.connect(this._onGenericChange, this);\n    this.commands.keyBindingChanged.connect(this._onGenericChange, this);\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    this._items.length = 0;\n    this._results = null;\n    super.dispose();\n  }\n\n  /**\n   * The command registry used by the command palette.\n   */\n  readonly commands: CommandRegistry;\n\n  /**\n   * The renderer used by the command palette.\n   */\n  readonly renderer: CommandPalette.IRenderer;\n\n  /**\n   * The command palette search node.\n   *\n   * #### Notes\n   * This is the node which contains the search-related elements.\n   */\n  get searchNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-CommandPalette-search')[0] as HTMLDivElement;\n  }\n\n  /**\n   * The command palette input node.\n   *\n   * #### Notes\n   * This is the actual input node for the search area.\n   */\n  get inputNode(): HTMLInputElement {\n    return this.node.getElementsByClassName('lm-CommandPalette-input')[0] as HTMLInputElement;\n  }\n\n  /**\n   * The command palette content node.\n   *\n   * #### Notes\n   * This is the node which holds the command item nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-CommandPalette-content')[0] as HTMLUListElement;\n  }\n\n  /**\n   * A read-only array of the command items in the palette.\n   */\n  get items(): ReadonlyArray<CommandPalette.IItem> {\n    return this._items;\n  }\n\n  /**\n   * Add a command item to the command palette.\n   *\n   * @param options - The options for creating the command item.\n   *\n   * @returns The command item added to the palette.\n   */\n  addItem(options: CommandPalette.IItemOptions): CommandPalette.IItem {\n    // Create a new command item for the options.\n    let item = Private.createItem(this.commands, options);\n\n    // Add the item to the array.\n    this._items.push(item);\n\n    // Refresh the search results.\n    this.refresh();\n\n    // Return the item added to the palette.\n    return item;\n  }\n\n  /**\n   * Remove an item from the command palette.\n   *\n   * @param item - The item to remove from the palette.\n   *\n   * #### Notes\n   * This is a no-op if the item is not in the palette.\n   */\n  removeItem(item: CommandPalette.IItem): void {\n    this.removeItemAt(this._items.indexOf(item));\n  }\n\n  /**\n   * Remove the item at a given index from the command palette.\n   *\n   * @param index - The index of the item to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeItemAt(index: number): void {\n    // Remove the item from the array.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Bail if the index is out of range.\n    if (!item) {\n      return;\n    }\n\n    // Refresh the search results.\n    this.refresh();\n  }\n\n  /**\n   * Remove all items from the command palette.\n   */\n  clearItems(): void {\n    // Bail if there is nothing to remove.\n    if (this._items.length === 0) {\n      return;\n    }\n\n    // Clear the array of items.\n    this._items.length = 0;\n\n    // Refresh the search results.\n    this.refresh();\n  }\n\n  /**\n   * Clear the search results and schedule an update.\n   *\n   * #### Notes\n   * This should be called whenever the search results of the palette\n   * should be updated.\n   *\n   * This is typically called automatically by the palette as needed,\n   * but can be called manually if the input text is programatically\n   * changed.\n   *\n   * The rendered results are updated asynchronously.\n   */\n  refresh(): void {\n    this._results = null;\n    if(this.inputNode.value !== '') {\n      let clear = this.node.getElementsByClassName('lm-close-icon')[0] as HTMLInputElement;\n      clear.style.display = 'inherit'\n    }\n    else {\n      let clear = this.node.getElementsByClassName('lm-close-icon')[0] as HTMLInputElement;\n      clear.style.display = 'none'\n    }\n    this.update();\n  }\n\n  /**\n   * Handle the DOM events for the command palette.\n   *\n   * @param event - The DOM event sent to the command palette.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the command palette's DOM node.\n   * It should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'click':\n      this._evtClick(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'input':\n      this.refresh();\n      break;\n    case 'focus':\n    case 'blur':\n      this._toggleFocused();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n    this.node.addEventListener('keydown', this);\n    this.node.addEventListener('input', this);\n    this.node.addEventListener('focus', this, true);\n    this.node.addEventListener('blur', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('click', this);\n    this.node.removeEventListener('keydown', this);\n    this.node.removeEventListener('input', this);\n    this.node.removeEventListener('focus', this, true);\n    this.node.removeEventListener('blur', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (this.isAttached) {\n      let input = this.inputNode;\n      input.focus();\n      input.select();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    // Fetch the current query text and content node.\n    let query = this.inputNode.value;\n    let contentNode = this.contentNode;\n\n    // Ensure the search results are generated.\n    let results = this._results;\n    if (!results) {\n      // Generate and store the new search results.\n      results = this._results = Private.search(this._items, query);\n\n      // Reset the active index.\n      this._activeIndex = (\n        query ? ArrayExt.findFirstIndex(results, Private.canActivate) : -1\n      );\n    }\n\n    // If there is no query and no results, clear the content.\n    if (!query && results.length === 0) {\n      VirtualDOM.render(null, contentNode);\n      return;\n    }\n\n    // If the is a query but no results, render the empty message.\n    if (query && results.length === 0) {\n      let content = this.renderer.renderEmptyMessage({ query });\n      VirtualDOM.render(content, contentNode);\n      return;\n    }\n\n    // Create the render content for the search results.\n    let renderer = this.renderer;\n    let activeIndex = this._activeIndex;\n    let content = new Array<VirtualElement>(results.length);\n    for (let i = 0, n = results.length; i < n; ++i) {\n      let result = results[i];\n      if (result.type === 'header') {\n        let indices = result.indices;\n        let category = result.category;\n        content[i] = renderer.renderHeader({ category, indices });\n      } else {\n        let item = result.item;\n        let indices = result.indices;\n        let active = i === activeIndex;\n        content[i] = renderer.renderItem({ item, indices, active });\n      }\n    }\n\n    // Render the search result content.\n    VirtualDOM.render(content, contentNode);\n\n    // Adjust the scroll position as needed.\n    if (activeIndex < 0 || activeIndex >= results.length) {\n      contentNode.scrollTop = 0;\n    } else {\n      let element = contentNode.children[activeIndex];\n      ElementExt.scrollIntoViewIfNeeded(contentNode, element);\n    }\n  }\n\n  /**\n   * Handle the `'click'` event for the command palette.\n   */\n  private _evtClick(event: MouseEvent): void {\n    // Bail if the click is not the left button.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Clear input if the target is clear button\n    if((event.target as HTMLElement).classList.contains(\"lm-close-icon\")) {\n      this.inputNode.value = '';\n      this.refresh();\n      return;\n    }\n\n    // Find the index of the item which was clicked.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return node.contains(event.target as HTMLElement);\n    });\n\n    // Bail if the click was not on an item.\n    if (index === -1) {\n      return;\n    }\n\n    // Kill the event when a content item is clicked.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Execute the item if possible.\n    this._execute(index);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the command palette.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n    switch (event.keyCode) {\n    case 13:  // Enter\n      event.preventDefault();\n      event.stopPropagation();\n      this._execute(this._activeIndex);\n      break;\n    case 38:  // Up Arrow\n      event.preventDefault();\n      event.stopPropagation();\n      this._activatePreviousItem();\n      break;\n    case 40:  // Down Arrow\n      event.preventDefault();\n      event.stopPropagation();\n      this._activateNextItem();\n      break;\n    }\n  }\n\n  /**\n   * Activate the next enabled command item.\n   */\n  private _activateNextItem(): void {\n    // Bail if there are no search results.\n    if (!this._results || this._results.length === 0) {\n      return;\n    }\n\n    // Find the next enabled item index.\n    let ai = this._activeIndex;\n    let n = this._results.length;\n    let start = ai < n - 1 ? ai + 1 : 0;\n    let stop = start === 0 ? n - 1 : start - 1;\n    this._activeIndex = ArrayExt.findFirstIndex(\n      this._results, Private.canActivate, start, stop\n    );\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Activate the previous enabled command item.\n   */\n  private _activatePreviousItem(): void {\n    // Bail if there are no search results.\n    if (!this._results || this._results.length === 0) {\n      return;\n    }\n\n    // Find the previous enabled item index.\n    let ai = this._activeIndex;\n    let n = this._results.length;\n    let start = ai <= 0 ? n - 1 : ai - 1;\n    let stop = start === n - 1 ? 0 : start + 1;\n    this._activeIndex = ArrayExt.findLastIndex(\n      this._results, Private.canActivate, start, stop\n    );\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Execute the command item at the given index, if possible.\n   */\n  private _execute(index: number): void {\n    // Bail if there are no search results.\n    if (!this._results) {\n      return;\n    }\n\n    // Bail if the index is out of range.\n    let part = this._results[index];\n    if (!part) {\n      return;\n    }\n\n    // Update the search text if the item is a header.\n    if (part.type === 'header') {\n      let input = this.inputNode;\n      input.value = `${part.category.toLowerCase()} `;\n      input.focus();\n      this.refresh();\n      return;\n    }\n\n    // Bail if item is not enabled.\n    if (!part.item.isEnabled) {\n      return;\n    }\n\n    // Execute the item.\n    this.commands.execute(part.item.command, part.item.args);\n\n    // Clear the query text.\n    this.inputNode.value = '';\n\n    // Refresh the search results.\n    this.refresh();\n  }\n\n  /**\n   * Toggle the focused modifier based on the input node focus state.\n   */\n  private _toggleFocused(): void {\n    let focused = document.activeElement === this.inputNode;\n    this.toggleClass('lm-mod-focused', focused);\n    /* <DEPRECATED> */\n    this.toggleClass('p-mod-focused', focused);\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A signal handler for generic command changes.\n   */\n  private _onGenericChange(): void {\n    this.refresh();\n  }\n\n  private _activeIndex = -1;\n  private _items: CommandPalette.IItem[] = [];\n  private _results: Private.SearchResult[] | null = null;\n}\n\n\n/**\n * The namespace for the `CommandPalette` class statics.\n */\nexport\nnamespace CommandPalette {\n  /**\n   * An options object for creating a command palette.\n   */\n  export\n  interface IOptions {\n    /**\n     * The command registry for use with the command palette.\n     */\n    commands: CommandRegistry;\n\n    /**\n     * A custom renderer for use with the command palette.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n  }\n\n  /**\n   * An options object for creating a command item.\n   */\n  export\n  interface IItemOptions {\n    /**\n     * The category for the item.\n     */\n    category: string;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    command: string;\n\n    /**\n     * The arguments for the command.\n     *\n     * The default value is an empty object.\n     */\n    args?: ReadonlyJSONObject;\n\n    /**\n     * The rank for the command item.\n     *\n     * The rank is used as a tie-breaker when ordering command items\n     * for display. Items are sorted in the following order:\n     *   1. Text match (lower is better)\n     *   2. Category (locale order)\n     *   3. Rank (lower is better)\n     *   4. Label (locale order)\n     *\n     * The default rank is `Infinity`.\n     */\n    rank?: number;\n  }\n\n  /**\n   * An object which represents an item in a command palette.\n   *\n   * #### Notes\n   * Item objects are created automatically by a command palette.\n   */\n  export\n  interface IItem {\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The category for the command item.\n     */\n    readonly category: string;\n\n    /**\n     * The rank for the command item.\n     */\n    readonly rank: number;\n\n    /**\n     * The display label for the command item.\n     */\n    readonly label: string;\n\n    /**\n     * The display caption for the command item.\n     */\n    readonly caption: string;\n\n    /**\n     * The icon renderer for the command item.\n     */\n    readonly icon: VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */;\n\n    /**\n     * The icon class for the command item.\n     */\n    readonly iconClass: string;\n\n    /**\n     * The icon label for the command item.\n     */\n    readonly iconLabel: string;\n\n    /**\n     * The extra class name for the command item.\n     */\n    readonly className: string;\n\n    /**\n     * The dataset for the command item.\n     */\n    readonly dataset: CommandRegistry.Dataset;\n\n    /**\n     * Whether the command item is enabled.\n     */\n    readonly isEnabled: boolean;\n\n    /**\n     * Whether the command item is toggled.\n     */\n    readonly isToggled: boolean;\n\n    /**\n     * Whether the command item is visible.\n     */\n    readonly isVisible: boolean;\n\n    /**\n     * The key binding for the command item.\n     */\n    readonly keyBinding: CommandRegistry.IKeyBinding | null;\n  }\n\n  /**\n   * The render data for a command palette header.\n   */\n  export\n  interface IHeaderRenderData {\n    /**\n     * The category of the header.\n     */\n    readonly category: string;\n\n    /**\n     * The indices of the matched characters in the category.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n  }\n\n  /**\n   * The render data for a command palette item.\n   */\n  export\n  interface IItemRenderData {\n    /**\n     * The command palette item to render.\n     */\n    readonly item: IItem;\n\n    /**\n     * The indices of the matched characters in the label.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n\n    /**\n     * Whether the item is the active item.\n     */\n    readonly active: boolean;\n  }\n\n  /**\n   * The render data for a command palette empty message.\n   */\n  export\n  interface IEmptyMessageRenderData {\n    /**\n     * The query which failed to match any commands.\n     */\n    query: string;\n  }\n\n  /**\n   * A renderer for use with a command palette.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Render the virtual element for a command palette header.\n     *\n     * @param data - The data to use for rendering the header.\n     *\n     * @returns A virtual element representing the header.\n     */\n    renderHeader(data: IHeaderRenderData): VirtualElement;\n\n    /**\n     * Render the virtual element for a command palette item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     *\n     * #### Notes\n     * The command palette will not render invisible items.\n     */\n    renderItem(data: IItemRenderData): VirtualElement;\n\n    /**\n     * Render the empty results message for a command palette.\n     *\n     * @param data - The data to use for rendering the message.\n     *\n     * @returns A virtual element representing the message.\n     */\n    renderEmptyMessage(data: IEmptyMessageRenderData): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Render the virtual element for a command palette header.\n     *\n     * @param data - The data to use for rendering the header.\n     *\n     * @returns A virtual element representing the header.\n     */\n    renderHeader(data: IHeaderRenderData): VirtualElement {\n      let content = this.formatHeader(data);\n      return h.li({ className:\n        'lm-CommandPalette-header'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-header'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the virtual element for a command palette item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IItemRenderData): VirtualElement {\n      let className = this.createItemClass(data);\n      let dataset = this.createItemDataset(data);\n      return (\n        h.li({ className, dataset },\n          this.renderItemIcon(data),\n          this.renderItemContent(data),\n          this.renderItemShortcut(data),\n        )\n      );\n    }\n\n    /**\n     * Render the empty results message for a command palette.\n     *\n     * @param data - The data to use for rendering the message.\n     *\n     * @returns A virtual element representing the message.\n     */\n    renderEmptyMessage(data: IEmptyMessageRenderData): VirtualElement {\n      let content = this.formatEmptyMessage(data);\n      return h.li({\n        className: 'lm-CommandPalette-emptyMessage'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-emptyMessage'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the icon for a command palette item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns A virtual element representing the icon.\n     */\n    renderItemIcon(data: IItemRenderData): VirtualElement {\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof data.item.icon === 'string') {\n        return h.div({className}, data.item.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if data.item.icon is undefined, it will be ignored\n      return h.div({className}, data.item.icon!, data.item.iconLabel);\n    }\n\n    /**\n     * Render the content for a command palette item.\n     *\n     * @param data - The data to use for rendering the content.\n     *\n     * @returns A virtual element representing the content.\n     */\n    renderItemContent(data: IItemRenderData): VirtualElement {\n      return (\n        h.div({\n          className: 'lm-CommandPalette-itemContent'\n            /* <DEPRECATED> */\n            + ' p-CommandPalette-itemContent'\n            /* </DEPRECATED> */\n        },\n          this.renderItemLabel(data),\n          this.renderItemCaption(data)\n        )\n      );\n    }\n\n    /**\n     * Render the label for a command palette item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the label.\n     */\n    renderItemLabel(data: IItemRenderData): VirtualElement {\n      let content = this.formatItemLabel(data);\n      return h.div({\n        className: 'lm-CommandPalette-itemLabel'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-itemLabel'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the caption for a command palette item.\n     *\n     * @param data - The data to use for rendering the caption.\n     *\n     * @returns A virtual element representing the caption.\n     */\n    renderItemCaption(data: IItemRenderData): VirtualElement {\n      let content = this.formatItemCaption(data);\n      return h.div({\n        className: 'lm-CommandPalette-itemCaption'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-itemCaption'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the shortcut for a command palette item.\n     *\n     * @param data - The data to use for rendering the shortcut.\n     *\n     * @returns A virtual element representing the shortcut.\n     */\n    renderItemShortcut(data: IItemRenderData): VirtualElement {\n      let content = this.formatItemShortcut(data);\n      return h.div({\n        className: 'lm-CommandPalette-itemShortcut'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-itemShortcut'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Create the class name for the command palette item.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the command palette item.\n     */\n    createItemClass(data: IItemRenderData): string {\n      // Set up the initial class name.\n      let name = 'lm-CommandPalette-item';\n      /* <DEPRECATED> */\n      name += ' p-CommandPalette-item';\n      /* </DEPRECATED> */\n\n      // Add the boolean state classes.\n      if (!data.item.isEnabled) {\n        name += ' lm-mod-disabled';\n        /* <DEPRECATED> */\n        name += ' p-mod-disabled';\n        /* </DEPRECATED> */\n      }\n      if (data.item.isToggled) {\n        name += ' lm-mod-toggled';\n        /* <DEPRECATED> */\n        name += ' p-mod-toggled';\n        /* </DEPRECATED> */\n      }\n      if (data.active) {\n        name += ' lm-mod-active';\n        /* <DEPRECATED> */\n        name += ' p-mod-active';\n        /* </DEPRECATED> */\n      }\n\n      // Add the extra class.\n      let extra = data.item.className;\n      if (extra) {\n        name += ` ${extra}`;\n      }\n\n      // Return the complete class name.\n      return name;\n    }\n\n    /**\n     * Create the dataset for the command palette item.\n     *\n     * @param data - The data to use for creating the dataset.\n     *\n     * @returns The dataset for the command palette item.\n     */\n    createItemDataset(data: IItemRenderData): ElementDataset {\n      return { ...data.item.dataset, command: data.item.command };\n    }\n\n    /**\n     * Create the class name for the command item icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IItemRenderData): string {\n      let name = 'lm-CommandPalette-itemIcon';\n      /* <DEPRECATED> */\n      name += ' p-CommandPalette-itemIcon';\n      /* </DEPRECATED> */\n      let extra = data.item.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    /**\n     * Create the render content for the header node.\n     *\n     * @param data - The data to use for the header content.\n     *\n     * @returns The content to add to the header node.\n     */\n    formatHeader(data: IHeaderRenderData): h.Child {\n      if (!data.indices || data.indices.length === 0) {\n        return data.category;\n      }\n      return StringExt.highlight(data.category, data.indices, h.mark);\n    }\n\n    /**\n     * Create the render content for the empty message node.\n     *\n     * @param data - The data to use for the empty message content.\n     *\n     * @returns The content to add to the empty message node.\n     */\n    formatEmptyMessage(data: IEmptyMessageRenderData): h.Child {\n      return `No commands found that match '${data.query}'`;\n    }\n\n    /**\n     * Create the render content for the item shortcut node.\n     *\n     * @param data - The data to use for the shortcut content.\n     *\n     * @returns The content to add to the shortcut node.\n     */\n    formatItemShortcut(data: IItemRenderData): h.Child {\n      let kb = data.item.keyBinding;\n      return kb ? kb.keys.map(CommandRegistry.formatKeystroke).join(', ') : null;\n    }\n\n    /**\n     * Create the render content for the item label node.\n     *\n     * @param data - The data to use for the label content.\n     *\n     * @returns The content to add to the label node.\n     */\n    formatItemLabel(data: IItemRenderData): h.Child {\n      if (!data.indices || data.indices.length === 0) {\n        return data.item.label;\n      }\n      return StringExt.highlight(data.item.label, data.indices, h.mark);\n    }\n\n    /**\n     * Create the render content for the item caption node.\n     *\n     * @param data - The data to use for the caption content.\n     *\n     * @returns The content to add to the caption node.\n     */\n    formatItemCaption(data: IItemRenderData): h.Child {\n      return data.item.caption;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create the DOM node for a command palette.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let search = document.createElement('div');\n    let wrapper = document.createElement('div');\n    let input = document.createElement('input');\n    let content = document.createElement('ul');\n    let clear = document.createElement('button');\n    search.className = 'lm-CommandPalette-search';\n    wrapper.className = 'lm-CommandPalette-wrapper';\n    input.className = 'lm-CommandPalette-input';\n    clear.className = 'lm-close-icon';\n\n    content.className = 'lm-CommandPalette-content';\n    /* <DEPRECATED> */\n    search.classList.add('p-CommandPalette-search');\n    wrapper.classList.add('p-CommandPalette-wrapper');\n    input.classList.add('p-CommandPalette-input');\n    content.classList.add('p-CommandPalette-content');\n    /* </DEPRECATED> */\n    input.spellcheck = false;\n    wrapper.appendChild(input);\n    wrapper.appendChild(clear);\n    search.appendChild(wrapper);\n    node.appendChild(search);\n    node.appendChild(content);\n    return node;\n  }\n\n  /**\n   * Create a new command item from a command registry and options.\n   */\n  export\n  function createItem(commands: CommandRegistry, options: CommandPalette.IItemOptions): CommandPalette.IItem {\n    return new CommandItem(commands, options);\n  }\n\n  /**\n   * A search result object for a header label.\n   */\n  export\n  interface IHeaderResult {\n    /**\n     * The discriminated type of the object.\n     */\n    readonly type: 'header';\n\n    /**\n     * The category for the header.\n     */\n    readonly category: string;\n\n    /**\n     * The indices of the matched category characters.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n  }\n\n  /**\n   * A search result object for a command item.\n   */\n  export\n  interface IItemResult {\n    /**\n     * The discriminated type of the object.\n     */\n    readonly type: 'item';\n\n    /**\n     * The command item which was matched.\n     */\n    readonly item: CommandPalette.IItem;\n\n    /**\n     * The indices of the matched label characters.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n  }\n\n  /**\n   * A type alias for a search result item.\n   */\n  export\n  type SearchResult = IHeaderResult | IItemResult;\n\n  /**\n   * Search an array of command items for fuzzy matches.\n   */\n  export\n  function search(items: CommandPalette.IItem[], query: string): SearchResult[] {\n    // Fuzzy match the items for the query.\n    let scores = matchItems(items, query);\n\n    // Sort the items based on their score.\n    scores.sort(scoreCmp);\n\n    // Create the results for the search.\n    return createResults(scores);\n  }\n\n  /**\n   * Test whether a result item can be activated.\n   */\n  export\n  function canActivate(result: SearchResult): boolean {\n    return result.type === 'item' && result.item.isEnabled;\n  }\n\n  /**\n   * Normalize a category for a command item.\n   */\n  function normalizeCategory(category: string): string {\n    return category.trim().replace(/\\s+/g, ' ');\n  }\n\n  /**\n   * Normalize the query text for a fuzzy search.\n   */\n  function normalizeQuery(text: string): string {\n    return text.replace(/\\s+/g, '').toLowerCase();\n  }\n\n  /**\n   * An enum of the supported match types.\n   */\n  const enum MatchType { Label, Category, Split, Default }\n\n  /**\n   * A text match score with associated command item.\n   */\n  interface IScore {\n    /**\n     * The numerical type for the text match.\n     */\n    matchType: MatchType;\n\n    /**\n     * The numerical score for the text match.\n     */\n    score: number;\n\n    /**\n     * The indices of the matched category characters.\n     */\n    categoryIndices: number[] | null;\n\n    /**\n     * The indices of the matched label characters.\n     */\n    labelIndices: number[] | null;\n\n    /**\n     * The command item associated with the match.\n     */\n    item: CommandPalette.IItem;\n  }\n\n  /**\n   * Perform a fuzzy match on an array of command items.\n   */\n  function matchItems(items: CommandPalette.IItem[], query: string): IScore[] {\n    // Normalize the query text to lower case with no whitespace.\n    query = normalizeQuery(query);\n\n    // Create the array to hold the scores.\n    let scores: IScore[] = [];\n\n    // Iterate over the items and match against the query.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Ignore items which are not visible.\n      let item = items[i];\n      if (!item.isVisible) {\n        continue;\n      }\n\n      // If the query is empty, all items are matched by default.\n      if (!query) {\n        scores.push({\n          matchType: MatchType.Default,\n          categoryIndices: null,\n          labelIndices: null,\n          score: 0, item\n        });\n        continue;\n      }\n\n      // Run the fuzzy search for the item and query.\n      let score = fuzzySearch(item, query);\n\n      // Ignore the item if it is not a match.\n      if (!score) {\n        continue;\n      }\n\n      // Penalize disabled items.\n      // TODO - push disabled items all the way down in sort cmp?\n      if (!item.isEnabled) {\n        score.score += 1000;\n      }\n\n      // Add the score to the results.\n      scores.push(score);\n    }\n\n    // Return the final array of scores.\n    return scores;\n  }\n\n  /**\n   * Perform a fuzzy search on a single command item.\n   */\n  function fuzzySearch(item: CommandPalette.IItem, query: string): IScore | null {\n    // Create the source text to be searched.\n    let category = item.category.toLowerCase();\n    let label = item.label.toLowerCase();\n    let source = `${category} ${label}`;\n\n    // Set up the match score and indices array.\n    let score = Infinity;\n    let indices: number[] | null = null;\n\n    // The regex for search word boundaries\n    let rgx = /\\b\\w/g;\n\n    // Search the source by word boundary.\n    while (true) {\n      // Find the next word boundary in the source.\n      let rgxMatch = rgx.exec(source);\n\n      // Break if there is no more source context.\n      if (!rgxMatch) {\n        break;\n      }\n\n      // Run the string match on the relevant substring.\n      let match = StringExt.matchSumOfDeltas(source, query, rgxMatch.index);\n\n      // Break if there is no match.\n      if (!match) {\n        break;\n      }\n\n      // Update the match if the score is better.\n      if (match && match.score <= score) {\n        score = match.score;\n        indices = match.indices;\n      }\n    }\n\n    // Bail if there was no match.\n    if (!indices || score === Infinity) {\n      return null;\n    }\n\n    // Compute the pivot index between category and label text.\n    let pivot = category.length + 1;\n\n    // Find the slice index to separate matched indices.\n    let j = ArrayExt.lowerBound(indices, pivot, (a, b) => a - b);\n\n    // Extract the matched category and label indices.\n    let categoryIndices = indices.slice(0, j);\n    let labelIndices = indices.slice(j);\n\n    // Adjust the label indices for the pivot offset.\n    for (let i = 0, n = labelIndices.length; i < n; ++i) {\n      labelIndices[i] -= pivot;\n    }\n\n    // Handle a pure label match.\n    if (categoryIndices.length === 0) {\n      return {\n        matchType: MatchType.Label,\n        categoryIndices: null,\n        labelIndices,\n        score, item\n      };\n    }\n\n    // Handle a pure category match.\n    if (labelIndices.length === 0) {\n      return {\n        matchType: MatchType.Category,\n        categoryIndices,\n        labelIndices: null,\n        score, item\n      };\n    }\n\n    // Handle a split match.\n    return {\n      matchType: MatchType.Split,\n      categoryIndices,\n      labelIndices,\n      score, item\n    };\n  }\n\n  /**\n   * A sort comparison function for a match score.\n   */\n  function scoreCmp(a: IScore, b: IScore): number {\n    // First compare based on the match type\n    let m1 = a.matchType - b.matchType;\n    if (m1 !== 0) {\n      return m1;\n    }\n\n    // Otherwise, compare based on the match score.\n    let d1 = a.score - b.score;\n    if (d1 !== 0) {\n      return d1;\n    }\n\n    // Find the match index based on the match type.\n    let i1 = 0;\n    let i2 = 0;\n    switch (a.matchType) {\n    case MatchType.Label:\n      i1 = a.labelIndices![0];\n      i2 = b.labelIndices![0];\n      break;\n    case MatchType.Category:\n    case MatchType.Split:\n      i1 = a.categoryIndices![0];\n      i2 = b.categoryIndices![0];\n      break;\n    }\n\n    // Compare based on the match index.\n    if (i1 !== i2) {\n      return i1 - i2;\n    }\n\n    // Otherwise, compare by category.\n    let d2 = a.item.category.localeCompare(b.item.category);\n    if (d2 !== 0) {\n      return d2;\n    }\n\n    // Otherwise, compare by rank.\n    let r1 = a.item.rank;\n    let r2 = b.item.rank;\n    if (r1 !== r2) {\n      return r1 < r2 ? -1 : 1;  // Infinity safe\n    }\n\n    // Finally, compare by label.\n    return a.item.label.localeCompare(b.item.label);\n  }\n\n  /**\n   * Create the results from an array of sorted scores.\n   */\n  function createResults(scores: IScore[]): SearchResult[] {\n    // Set up an array to track which scores have been visited.\n    let visited = new Array(scores.length);\n    ArrayExt.fill(visited, false);\n\n    // Set up the search results array.\n    let results: SearchResult[] = [];\n\n    // Iterate over each score in the array.\n    for (let i = 0, n = scores.length; i < n; ++i) {\n      // Ignore a score which has already been processed.\n      if (visited[i]) {\n        continue;\n      }\n\n      // Extract the current item and indices.\n      let { item, categoryIndices } = scores[i];\n\n      // Extract the category for the current item.\n      let category = item.category;\n\n      // Add the header result for the category.\n      results.push({ type: 'header', category, indices: categoryIndices });\n\n      // Find the rest of the scores with the same category.\n      for (let j = i; j < n; ++j) {\n        // Ignore a score which has already been processed.\n        if (visited[j]) {\n          continue;\n        }\n\n        // Extract the data for the current score.\n        let { item, labelIndices } = scores[j];\n\n        // Ignore an item with a different category.\n        if (item.category !== category) {\n          continue;\n        }\n\n        // Create the item result for the score.\n        results.push({ type: 'item', item, indices: labelIndices });\n\n        // Mark the score as processed.\n        visited[j] = true;\n      }\n    }\n\n    // Return the final results.\n    return results;\n  }\n\n  /**\n   * A concrete implementation of `CommandPalette.IItem`.\n   */\n  class CommandItem implements CommandPalette.IItem {\n    /**\n     * Construct a new command item.\n     */\n    constructor(commands: CommandRegistry, options: CommandPalette.IItemOptions) {\n      this._commands = commands;\n      this.category = normalizeCategory(options.category);\n      this.command = options.command;\n      this.args = options.args || JSONExt.emptyObject;\n      this.rank = options.rank !== undefined ? options.rank : Infinity;\n    }\n\n    /**\n     * The category for the command item.\n     */\n    readonly category: string;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The rank for the command item.\n     */\n    readonly rank: number;\n\n    /**\n     * The display label for the command item.\n     */\n    get label(): string {\n      return this._commands.label(this.command, this.args);\n    }\n\n    /**\n     * The icon renderer for the command item.\n     */\n    get icon(): VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */\n    {\n      return this._commands.icon(this.command, this.args);\n    }\n\n    /**\n     * The icon class for the command item.\n     */\n    get iconClass(): string {\n      return this._commands.iconClass(this.command, this.args);\n    }\n\n    /**\n     * The icon label for the command item.\n     */\n    get iconLabel(): string {\n      return this._commands.iconLabel(this.command, this.args);\n    }\n\n    /**\n     * The display caption for the command item.\n     */\n    get caption(): string {\n      return this._commands.caption(this.command, this.args);\n    }\n\n    /**\n     * The extra class name for the command item.\n     */\n    get className(): string {\n      return this._commands.className(this.command, this.args);\n    }\n\n    /**\n     * The dataset for the command item.\n     */\n    get dataset(): CommandRegistry.Dataset {\n      return this._commands.dataset(this.command, this.args);\n    }\n\n    /**\n     * Whether the command item is enabled.\n     */\n    get isEnabled(): boolean {\n      return this._commands.isEnabled(this.command, this.args);\n    }\n\n    /**\n     * Whether the command item is toggled.\n     */\n    get isToggled(): boolean {\n      return this._commands.isToggled(this.command, this.args);\n    }\n\n    /**\n     * Whether the command item is visible.\n     */\n    get isVisible(): boolean {\n      return this._commands.isVisible(this.command, this.args);\n    }\n\n    /**\n     * The key binding for the command item.\n     */\n    get keyBinding(): CommandRegistry.IKeyBinding | null {\n      let { command, args } = this;\n      return ArrayExt.findLastValue(this._commands.keyBindings, kb => {\n        return kb.command === command && JSONExt.deepEqual(kb.args, args);\n      }) || null;\n    }\n\n    private _commands: CommandRegistry;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt\n} from '@lumino/algorithm';\n\nimport {\n  CommandRegistry\n} from '@lumino/commands';\n\nimport {\n  JSONExt, ReadonlyJSONObject\n} from '@lumino/coreutils';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  getKeyboardLayout\n} from '@lumino/keyboard';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  ElementDataset, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays items as a canonical menu.\n */\nexport\nclass Menu extends Widget {\n  /**\n   * Construct a new menu.\n   *\n   * @param options - The options for initializing the menu.\n   */\n  constructor(options: Menu.IOptions) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-Menu');\n    /* <DEPRECATED> */\n    this.addClass('p-Menu');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.commands = options.commands;\n    this.renderer = options.renderer || Menu.defaultRenderer;\n  }\n\n  /**\n   * Dispose of the resources held by the menu.\n   */\n  dispose(): void {\n    this.close();\n    this._items.length = 0;\n    super.dispose();\n  }\n\n  /**\n   * A signal emitted just before the menu is closed.\n   *\n   * #### Notes\n   * This signal is emitted when the menu receives a `'close-request'`\n   * message, just before it removes itself from the DOM.\n   *\n   * This signal is not emitted if the menu is already detached from\n   * the DOM when it receives the `'close-request'` message.\n   */\n  get aboutToClose(): ISignal<this, void> {\n    return this._aboutToClose;\n  }\n\n  /**\n   * A signal emitted when a new menu is requested by the user.\n   *\n   * #### Notes\n   * This signal is emitted whenever the user presses the right or left\n   * arrow keys, and a submenu cannot be opened or closed in response.\n   *\n   * This signal is useful when implementing menu bars in order to open\n   * the next or previous menu in response to a user key press.\n   *\n   * This signal is only emitted for the root menu in a hierarchy.\n   */\n  get menuRequested(): ISignal<this, 'next' | 'previous'> {\n    return this._menuRequested;\n  }\n\n  /**\n   * The command registry used by the menu.\n   */\n  readonly commands: CommandRegistry;\n\n  /**\n   * The renderer used by the menu.\n   */\n  readonly renderer: Menu.IRenderer;\n\n  /**\n   * The parent menu of the menu.\n   *\n   * #### Notes\n   * This is `null` unless the menu is an open submenu.\n   */\n  get parentMenu(): Menu | null {\n    return this._parentMenu;\n  }\n\n  /**\n   * The child menu of the menu.\n   *\n   * #### Notes\n   * This is `null` unless the menu has an open submenu.\n   */\n  get childMenu(): Menu | null {\n    return this._childMenu;\n  }\n\n  /**\n   * The root menu of the menu hierarchy.\n   */\n  get rootMenu(): Menu {\n    let menu: Menu = this;\n    while (menu._parentMenu) {\n      menu = menu._parentMenu;\n    }\n    return menu;\n  }\n\n  /**\n   * The leaf menu of the menu hierarchy.\n   */\n  get leafMenu(): Menu {\n    let menu: Menu = this;\n    while (menu._childMenu) {\n      menu = menu._childMenu;\n    }\n    return menu;\n  }\n\n  /**\n   * The menu content node.\n   *\n   * #### Notes\n   * This is the node which holds the menu item nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-Menu-content')[0] as HTMLUListElement;\n  }\n\n  /**\n   * Get the currently active menu item.\n   */\n  get activeItem(): Menu.IItem | null {\n    return this._items[this._activeIndex] || null;\n  }\n\n  /**\n   * Set the currently active menu item.\n   *\n   * #### Notes\n   * If the item cannot be activated, the item will be set to `null`.\n   */\n  set activeItem(value: Menu.IItem | null) {\n    this.activeIndex = value ? this._items.indexOf(value) : -1;\n  }\n\n  /**\n   * Get the index of the currently active menu item.\n   *\n   * #### Notes\n   * This will be `-1` if no menu item is active.\n   */\n  get activeIndex(): number {\n    return this._activeIndex;\n  }\n\n  /**\n   * Set the index of the currently active menu item.\n   *\n   * #### Notes\n   * If the item cannot be activated, the index will be set to `-1`.\n   */\n  set activeIndex(value: number) {\n    // Adjust the value for an out of range index.\n    if (value < 0 || value >= this._items.length) {\n      value = -1;\n    }\n\n    // Ensure the item can be activated.\n    if (value !== -1 && !Private.canActivate(this._items[value])) {\n      value = -1;\n    }\n\n    // Bail if the index will not change.\n    if (this._activeIndex === value) {\n      return;\n    }\n\n    // Update the active index.\n    this._activeIndex = value;\n\n    // schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * A read-only array of the menu items in the menu.\n   */\n  get items(): ReadonlyArray<Menu.IItem> {\n    return this._items;\n  }\n\n  /**\n   * Activate the next selectable item in the menu.\n   *\n   * #### Notes\n   * If no item is selectable, the index will be set to `-1`.\n   */\n  activateNextItem(): void {\n    let n = this._items.length;\n    let ai = this._activeIndex;\n    let start = ai < n - 1 ? ai + 1 : 0;\n    let stop = start === 0 ? n - 1 : start - 1;\n    this.activeIndex = ArrayExt.findFirstIndex(\n      this._items, Private.canActivate, start, stop\n    );\n  }\n\n  /**\n   * Activate the previous selectable item in the menu.\n   *\n   * #### Notes\n   * If no item is selectable, the index will be set to `-1`.\n   */\n  activatePreviousItem(): void {\n    let n = this._items.length;\n    let ai = this._activeIndex;\n    let start = ai <= 0 ? n - 1 : ai - 1;\n    let stop = start === n - 1 ? 0 : start + 1;\n    this.activeIndex = ArrayExt.findLastIndex(\n      this._items, Private.canActivate, start, stop\n    );\n  }\n\n  /**\n   * Trigger the active menu item.\n   *\n   * #### Notes\n   * If the active item is a submenu, it will be opened and the first\n   * item will be activated.\n   *\n   * If the active item is a command, the command will be executed.\n   *\n   * If the menu is not attached, this is a no-op.\n   *\n   * If there is no active item, this is a no-op.\n   */\n  triggerActiveItem(): void {\n    // Bail if the menu is not attached.\n    if (!this.isAttached) {\n      return;\n    }\n\n    // Bail if there is no active item.\n    let item = this.activeItem;\n    if (!item) {\n      return;\n    }\n\n    // Cancel the pending timers.\n    this._cancelOpenTimer();\n    this._cancelCloseTimer();\n\n    // If the item is a submenu, open it.\n    if (item.type === 'submenu') {\n      this._openChildMenu(true);\n      return;\n    }\n\n    // Close the root menu before executing the command.\n    this.rootMenu.close();\n\n    // Execute the command for the item.\n    let { command, args } = item;\n    if (this.commands.isEnabled(command, args)) {\n      this.commands.execute(command, args);\n    } else {\n      console.log(`Command '${command}' is disabled.`);\n    }\n  }\n\n  /**\n   * Add a menu item to the end of the menu.\n   *\n   * @param options - The options for creating the menu item.\n   *\n   * @returns The menu item added to the menu.\n   */\n  addItem(options: Menu.IItemOptions): Menu.IItem {\n    return this.insertItem(this._items.length, options);\n  }\n\n  /**\n   * Insert a menu item into the menu at the specified index.\n   *\n   * @param index - The index at which to insert the item.\n   *\n   * @param options - The options for creating the menu item.\n   *\n   * @returns The menu item added to the menu.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the items.\n   */\n  insertItem(index: number, options: Menu.IItemOptions): Menu.IItem {\n    // Close the menu if it's attached.\n    if (this.isAttached) {\n      this.close();\n    }\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Clamp the insert index to the array bounds.\n    let i = Math.max(0, Math.min(index, this._items.length));\n\n    // Create the item for the options.\n    let item = Private.createItem(this, options);\n\n    // Insert the item into the array.\n    ArrayExt.insert(this._items, i, item);\n\n    // Schedule an update of the items.\n    this.update();\n\n    // Return the item added to the menu.\n    return item;\n  }\n\n  /**\n   * Remove an item from the menu.\n   *\n   * @param item - The item to remove from the menu.\n   *\n   * #### Notes\n   * This is a no-op if the item is not in the menu.\n   */\n  removeItem(item: Menu.IItem): void {\n    this.removeItemAt(this._items.indexOf(item));\n  }\n\n  /**\n   * Remove the item at a given index from the menu.\n   *\n   * @param index - The index of the item to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeItemAt(index: number): void {\n    // Close the menu if it's attached.\n    if (this.isAttached) {\n      this.close();\n    }\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Remove the item from the array.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Bail if the index is out of range.\n    if (!item) {\n      return\n    }\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Remove all menu items from the menu.\n   */\n  clearItems(): void {\n    // Close the menu if it's attached.\n    if (this.isAttached) {\n      this.close();\n    }\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Bail if there is nothing to remove.\n    if (this._items.length === 0) {\n      return;\n    }\n\n    // Clear the items.\n    this._items.length = 0;\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Open the menu at the specified location.\n   *\n   * @param x - The client X coordinate of the menu location.\n   *\n   * @param y - The client Y coordinate of the menu location.\n   *\n   * @param options - The additional options for opening the menu.\n   *\n   * #### Notes\n   * The menu will be opened at the given location unless it will not\n   * fully fit on the screen. If it will not fit, it will be adjusted\n   * to fit naturally on the screen.\n   *\n   * This is a no-op if the menu is already attached to the DOM.\n   */\n  open(x: number, y: number, options: Menu.IOpenOptions = {}): void {\n    // Bail early if the menu is already attached.\n    if (this.isAttached) {\n      return;\n    }\n\n    // Extract the position options.\n    let forceX = options.forceX || false;\n    let forceY = options.forceY || false;\n\n    // Open the menu as a root menu.\n    Private.openRootMenu(this, x, y, forceX, forceY);\n\n    // Activate the menu to accept keyboard input.\n    this.activate();\n  }\n\n  /**\n   * Handle the DOM events for the menu.\n   *\n   * @param event - The DOM event sent to the menu.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the menu's DOM nodes. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseenter':\n      this._evtMouseEnter(event as MouseEvent);\n      break;\n    case 'mouseleave':\n      this._evtMouseLeave(event as MouseEvent);\n      break;\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('keydown', this);\n    this.node.addEventListener('mouseup', this);\n    this.node.addEventListener('mousemove', this);\n    this.node.addEventListener('mouseenter', this);\n    this.node.addEventListener('mouseleave', this);\n    this.node.addEventListener('contextmenu', this);\n    document.addEventListener('mousedown', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('keydown', this);\n    this.node.removeEventListener('mouseup', this);\n    this.node.removeEventListener('mousemove', this);\n    this.node.removeEventListener('mouseenter', this);\n    this.node.removeEventListener('mouseleave', this);\n    this.node.removeEventListener('contextmenu', this);\n    document.removeEventListener('mousedown', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (this.isAttached) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let items = this._items;\n    let renderer = this.renderer;\n    let activeIndex = this._activeIndex;\n    let collapsedFlags = Private.computeCollapsed(items);\n    let content = new Array<VirtualElement>(items.length);\n    for (let i = 0, n = items.length; i < n; ++i) {\n      let item = items[i];\n      let active = i === activeIndex;\n      let collapsed = collapsedFlags[i];\n      content[i] = renderer.renderItem({ item, active, collapsed });\n    }\n    VirtualDOM.render(content, this.contentNode);\n  }\n\n  /**\n   * A message handler invoked on a `'close-request'` message.\n   */\n  protected onCloseRequest(msg: Message): void {\n    // Cancel the pending timers.\n    this._cancelOpenTimer();\n    this._cancelCloseTimer();\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Close any open child menu.\n    let childMenu = this._childMenu;\n    if (childMenu) {\n      this._childIndex = -1;\n      this._childMenu = null;\n      childMenu._parentMenu = null;\n      childMenu.close();\n    }\n\n    // Remove this menu from its parent and activate the parent.\n    let parentMenu = this._parentMenu;\n    if (parentMenu) {\n      this._parentMenu = null;\n      parentMenu._childIndex = -1;\n      parentMenu._childMenu = null;\n      parentMenu.activate();\n    }\n\n    // Emit the `aboutToClose` signal if the menu is attached.\n    if (this.isAttached) {\n      this._aboutToClose.emit(undefined);\n    }\n\n    // Finish closing the menu.\n    super.onCloseRequest(msg);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // A menu handles all keydown events.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the key code for the event.\n    let kc = event.keyCode;\n\n    // Enter\n    if (kc === 13) {\n      this.triggerActiveItem();\n      return;\n    }\n\n    // Escape\n    if (kc === 27) {\n      this.close();\n      return;\n    }\n\n    // Left Arrow\n    if (kc === 37) {\n      if (this._parentMenu) {\n        this.close();\n      } else {\n        this._menuRequested.emit('previous');\n      }\n      return;\n    }\n\n    // Up Arrow\n    if (kc === 38) {\n      this.activatePreviousItem();\n      return;\n    }\n\n    // Right Arrow\n    if (kc === 39) {\n      let item = this.activeItem;\n      if (item && item.type === 'submenu') {\n        this.triggerActiveItem();\n      } else {\n        this.rootMenu._menuRequested.emit('next');\n      }\n      return;\n    }\n\n    // Down Arrow\n    if (kc === 40) {\n      this.activateNextItem();\n      return;\n    }\n\n    // Get the pressed key character.\n    let key = getKeyboardLayout().keyForKeydownEvent(event);\n\n    // Bail if the key is not valid.\n    if (!key) {\n      return;\n    }\n\n    // Search for the next best matching mnemonic item.\n    let start = this._activeIndex + 1;\n    let result = Private.findMnemonic(this._items, key, start);\n\n    // Handle the requested mnemonic based on the search results.\n    // If exactly one mnemonic is matched, that item is triggered.\n    // Otherwise, the next mnemonic is activated if available,\n    // followed by the auto mnemonic if available.\n    if (result.index !== -1 && !result.multiple) {\n      this.activeIndex = result.index;\n      this.triggerActiveItem();\n    } else if (result.index !== -1) {\n      this.activeIndex = result.index;\n    } else if (result.auto !== -1) {\n      this.activeIndex = result.auto;\n    }\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    if (event.button !== 0) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this.triggerActiveItem();\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Hit test the item nodes for the item under the mouse.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return ElementExt.hitTest(node, event.clientX, event.clientY);\n    });\n\n    // Bail early if the mouse is already over the active index.\n    if (index === this._activeIndex) {\n      return;\n    }\n\n    // Update and coerce the active index.\n    this.activeIndex = index;\n    index = this.activeIndex;\n\n    // If the index is the current child index, cancel the timers.\n    if (index === this._childIndex) {\n      this._cancelOpenTimer();\n      this._cancelCloseTimer();\n      return;\n    }\n\n    // If a child menu is currently open, start the close timer.\n    if (this._childIndex !== -1) {\n      this._startCloseTimer();\n    }\n\n    // Cancel the open timer to give a full delay for opening.\n    this._cancelOpenTimer();\n\n    // Bail if the active item is not a valid submenu item.\n    let item = this.activeItem;\n    if (!item || item.type !== 'submenu' || !item.submenu) {\n      return;\n    }\n\n    // Start the open timer to open the active item submenu.\n    this._startOpenTimer();\n  }\n\n  /**\n   * Handle the `'mouseenter'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseEnter(event: MouseEvent): void {\n    // Synchronize the active ancestor items.\n    for (let menu = this._parentMenu; menu; menu = menu._parentMenu) {\n      menu._cancelOpenTimer();\n      menu._cancelCloseTimer();\n      menu.activeIndex = menu._childIndex;\n    }\n  }\n\n  /**\n   * Handle the `'mouseleave'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseLeave(event: MouseEvent): void {\n    // Cancel any pending submenu opening.\n    this._cancelOpenTimer();\n\n    // If there is no open child menu, just reset the active index.\n    if (!this._childMenu) {\n      this.activeIndex = -1;\n      return;\n    }\n\n    // If the mouse is over the child menu, cancel the close timer.\n    let { clientX, clientY } = event;\n    if (ElementExt.hitTest(this._childMenu.node, clientX, clientY)) {\n      this._cancelCloseTimer();\n      return;\n    }\n\n    // Otherwise, reset the active index and start the close timer.\n    this.activeIndex = -1;\n    this._startCloseTimer();\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the document node.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Bail if the menu is not a root menu.\n    if (this._parentMenu) {\n      return;\n    }\n\n    // The mouse button which is pressed is irrelevant. If the press\n    // is not on a menu, the entire hierarchy is closed and the event\n    // is allowed to propagate. This allows other code to act on the\n    // event, such as focusing the clicked element.\n    if (Private.hitTestMenus(this, event.clientX, event.clientY)) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.close();\n    }\n  }\n\n  /**\n   * Open the child menu at the active index immediately.\n   *\n   * If a different child menu is already open, it will be closed,\n   * even if the active item is not a valid submenu.\n   */\n  private _openChildMenu(activateFirst = false): void {\n    // If the item is not a valid submenu, close the child menu.\n    let item = this.activeItem;\n    if (!item || item.type !== 'submenu' || !item.submenu) {\n      this._closeChildMenu();\n      return;\n    }\n\n    // Do nothing if the child menu will not change.\n    let submenu = item.submenu;\n    if (submenu === this._childMenu) {\n      return;\n    }\n\n    // Ensure the current child menu is closed.\n    this._closeChildMenu();\n\n    // Update the private child state.\n    this._childMenu = submenu;\n    this._childIndex = this._activeIndex;\n\n    // Set the parent menu reference for the child.\n    submenu._parentMenu = this;\n\n    // Ensure the menu is updated and lookup the item node.\n    MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n    let itemNode = this.contentNode.children[this._activeIndex];\n\n    // Open the submenu at the active node.\n    Private.openSubmenu(submenu, itemNode as HTMLElement);\n\n    // Activate the first item if desired.\n    if (activateFirst) {\n      submenu.activeIndex = -1;\n      submenu.activateNextItem();\n    }\n\n    // Activate the child menu.\n    submenu.activate();\n  }\n\n  /**\n   * Close the child menu immediately.\n   *\n   * This is a no-op if a child menu is not open.\n   */\n  private _closeChildMenu(): void {\n    if (this._childMenu) {\n      this._childMenu.close();\n    }\n  }\n\n  /**\n   * Start the open timer, unless it is already pending.\n   */\n  private _startOpenTimer(): void {\n    if (this._openTimerID === 0) {\n      this._openTimerID = window.setTimeout(() => {\n        this._openTimerID = 0;\n        this._openChildMenu();\n      }, Private.TIMER_DELAY);\n    }\n  }\n\n  /**\n   * Start the close timer, unless it is already pending.\n   */\n  private _startCloseTimer(): void {\n    if (this._closeTimerID === 0) {\n      this._closeTimerID = window.setTimeout(() => {\n        this._closeTimerID = 0;\n        this._closeChildMenu();\n      }, Private.TIMER_DELAY);\n    }\n  }\n\n  /**\n   * Cancel the open timer, if the timer is pending.\n   */\n  private _cancelOpenTimer(): void {\n    if (this._openTimerID !== 0) {\n      clearTimeout(this._openTimerID);\n      this._openTimerID = 0;\n    }\n  }\n\n  /**\n   * Cancel the close timer, if the timer is pending.\n   */\n  private _cancelCloseTimer(): void {\n    if (this._closeTimerID !== 0) {\n      clearTimeout(this._closeTimerID);\n      this._closeTimerID = 0;\n    }\n  }\n\n  private _childIndex = -1;\n  private _activeIndex = -1;\n  private _openTimerID = 0;\n  private _closeTimerID = 0;\n  private _items: Menu.IItem[] = [];\n  private _childMenu: Menu | null = null;\n  private _parentMenu: Menu | null = null;\n  private _aboutToClose = new Signal<this, void>(this);\n  private _menuRequested = new Signal<this, 'next' | 'previous'>(this);\n}\n\n\n/**\n * The namespace for the `Menu` class statics.\n */\nexport\nnamespace Menu {\n  /**\n   * An options object for creating a menu.\n   */\n  export\n  interface IOptions {\n    /**\n     * The command registry for use with the menu.\n     */\n    commands: CommandRegistry;\n\n    /**\n     * A custom renderer for use with the menu.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n  }\n\n  /**\n   * An options object for the `open` method on a menu.\n   */\n  export\n  interface IOpenOptions {\n    /**\n     * Whether to force the X position of the menu.\n     *\n     * Setting to `true` will disable the logic which repositions the\n     * X coordinate of the menu if it will not fit entirely on screen.\n     *\n     * The default is `false`.\n     */\n    forceX?: boolean;\n\n    /**\n     * Whether to force the Y position of the menu.\n     *\n     * Setting to `true` will disable the logic which repositions the\n     * Y coordinate of the menu if it will not fit entirely on screen.\n     *\n     * The default is `false`.\n     */\n    forceY?: boolean;\n  }\n\n  /**\n   * A type alias for a menu item type.\n   */\n  export\n  type ItemType = 'command' | 'submenu' | 'separator';\n\n  /**\n   * An options object for creating a menu item.\n   */\n  export\n  interface IItemOptions {\n    /**\n     * The type of the menu item.\n     *\n     * The default value is `'command'`.\n     */\n    type?: ItemType;\n\n    /**\n     * The command to execute when the item is triggered.\n     *\n     * The default value is an empty string.\n     */\n    command?: string;\n\n    /**\n     * The arguments for the command.\n     *\n     * The default value is an empty object.\n     */\n    args?: ReadonlyJSONObject;\n\n    /**\n     * The submenu for a `'submenu'` type item.\n     *\n     * The default value is `null`.\n     */\n    submenu?: Menu | null;\n  }\n\n  /**\n   * An object which represents a menu item.\n   *\n   * #### Notes\n   * Item objects are created automatically by a menu.\n   */\n  export\n  interface IItem {\n    /**\n     * The type of the menu item.\n     */\n    readonly type: ItemType;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The submenu for a `'submenu'` type item.\n     */\n    readonly submenu: Menu | null;\n\n    /**\n     * The display label for the menu item.\n     */\n    readonly label: string;\n\n    /**\n     * The mnemonic index for the menu item.\n     */\n    readonly mnemonic: number;\n\n    /**\n     * The icon renderer for the menu item.\n     */\n    readonly icon: VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */;\n\n    /**\n     * The icon class for the menu item.\n     */\n    readonly iconClass: string;\n\n    /**\n     * The icon label for the menu item.\n     */\n    readonly iconLabel: string;\n\n    /**\n     * The display caption for the menu item.\n     */\n    readonly caption: string;\n\n    /**\n     * The extra class name for the menu item.\n     */\n    readonly className: string;\n\n    /**\n     * The dataset for the menu item.\n     */\n    readonly dataset: CommandRegistry.Dataset;\n\n    /**\n     * Whether the menu item is enabled.\n     */\n    readonly isEnabled: boolean;\n\n    /**\n     * Whether the menu item is toggled.\n     */\n    readonly isToggled: boolean;\n\n    /**\n     * Whether the menu item is visible.\n     */\n    readonly isVisible: boolean;\n\n    /**\n     * The key binding for the menu item.\n     */\n    readonly keyBinding: CommandRegistry.IKeyBinding | null;\n  }\n\n  /**\n   * An object which holds the data to render a menu item.\n   */\n  export\n  interface IRenderData {\n    /**\n     * The item to be rendered.\n     */\n    readonly item: IItem;\n\n    /**\n     * Whether the item is the active item.\n     */\n    readonly active: boolean;\n\n    /**\n     * Whether the item should be collapsed.\n     */\n    readonly collapsed: boolean;\n  }\n\n  /**\n   * A renderer for use with a menu.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Render the virtual element for a menu item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   *\n   * #### Notes\n   * Subclasses are free to reimplement rendering methods as needed.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Construct a new renderer.\n     */\n    constructor() { }\n\n    /**\n     * Render the virtual element for a menu item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement {\n      let className = this.createItemClass(data);\n      let dataset = this.createItemDataset(data);\n      return (\n        h.li({ className, dataset },\n          this.renderIcon(data),\n          this.renderLabel(data),\n          this.renderShortcut(data),\n          this.renderSubmenu(data)\n        )\n      );\n    }\n\n    /**\n     * Render the icon element for a menu item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns A virtual element representing the item icon.\n     */\n    renderIcon(data: IRenderData): VirtualElement {\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof data.item.icon === 'string') {\n        return h.div({className}, data.item.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if data.item.icon is undefined, it will be ignored\n      return h.div({className}, data.item.icon!, data.item.iconLabel);\n    }\n\n    /**\n     * Render the label element for a menu item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    renderLabel(data: IRenderData): VirtualElement {\n      let content = this.formatLabel(data);\n      return h.div({\n        className: 'lm-Menu-itemLabel'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemLabel'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the shortcut element for a menu item.\n     *\n     * @param data - The data to use for rendering the shortcut.\n     *\n     * @returns A virtual element representing the item shortcut.\n     */\n    renderShortcut(data: IRenderData): VirtualElement {\n      let content = this.formatShortcut(data);\n      return h.div({\n        className: 'lm-Menu-itemShortcut'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemShortcut'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the submenu icon element for a menu item.\n     *\n     * @param data - The data to use for rendering the submenu icon.\n     *\n     * @returns A virtual element representing the submenu icon.\n     */\n    renderSubmenu(data: IRenderData): VirtualElement {\n      return h.div({\n        className: 'lm-Menu-itemSubmenuIcon'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemSubmenuIcon'\n          /* </DEPRECATED> */\n      });\n    }\n\n    /**\n     * Create the class name for the menu item.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the menu item.\n     */\n    createItemClass(data: IRenderData): string {\n      // Setup the initial class name.\n      let name = 'lm-Menu-item';\n      /* <DEPRECATED> */\n      name += ' p-Menu-item';\n      /* </DEPRECATED> */\n\n      // Add the boolean state classes.\n      if (!data.item.isEnabled) {\n        name += ' lm-mod-disabled';\n        /* <DEPRECATED> */\n        name += ' p-mod-disabled';\n        /* </DEPRECATED> */\n      }\n      if (data.item.isToggled) {\n        name += ' lm-mod-toggled';\n        /* <DEPRECATED> */\n        name += ' p-mod-toggled';\n        /* </DEPRECATED> */\n      }\n      if (!data.item.isVisible) {\n        name += ' lm-mod-hidden';\n        /* <DEPRECATED> */\n        name += ' p-mod-hidden';\n        /* </DEPRECATED> */\n      }\n      if (data.active) {\n        name += ' lm-mod-active';\n        /* <DEPRECATED> */\n        name += ' p-mod-active';\n        /* </DEPRECATED> */\n      }\n      if (data.collapsed) {\n        name += ' lm-mod-collapsed';\n        /* <DEPRECATED> */\n        name += ' p-mod-collapsed';\n        /* </DEPRECATED> */\n      }\n\n      // Add the extra class.\n      let extra = data.item.className;\n      if (extra) {\n        name += ` ${extra}`;\n      }\n\n      // Return the complete class name.\n      return name;\n    }\n\n    /**\n     * Create the dataset for the menu item.\n     *\n     * @param data - The data to use for creating the dataset.\n     *\n     * @returns The dataset for the menu item.\n     */\n    createItemDataset(data: IRenderData): ElementDataset {\n      let result: ElementDataset;\n      let { type, command, dataset } = data.item;\n      if (type === 'command') {\n        result = { ...dataset, type, command };\n      } else {\n        result = { ...dataset, type };\n      }\n      return result;\n    }\n\n    /**\n     * Create the class name for the menu item icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IRenderData): string {\n      let name = 'lm-Menu-itemIcon';\n      /* <DEPRECATED> */\n      name += ' p-Menu-itemIcon';\n      /* </DEPRECATED> */\n      let extra = data.item.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    /**\n     * Create the render content for the label node.\n     *\n     * @param data - The data to use for the label content.\n     *\n     * @returns The content to add to the label node.\n     */\n    formatLabel(data: IRenderData): h.Child {\n      // Fetch the label text and mnemonic index.\n      let { label, mnemonic } = data.item;\n\n      // If the index is out of range, do not modify the label.\n      if (mnemonic < 0 || mnemonic >= label.length) {\n        return label;\n      }\n\n      // Split the label into parts.\n      let prefix = label.slice(0, mnemonic);\n      let suffix = label.slice(mnemonic + 1);\n      let char = label[mnemonic];\n\n      // Wrap the mnemonic character in a span.\n      let span = h.span({\n        className: 'lm-Menu-itemMnemonic'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemMnemonic'\n          /* </DEPRECATED> */\n      }, char);\n\n      // Return the content parts.\n      return [prefix, span, suffix];\n    }\n\n    /**\n     * Create the render content for the shortcut node.\n     *\n     * @param data - The data to use for the shortcut content.\n     *\n     * @returns The content to add to the shortcut node.\n     */\n    formatShortcut(data: IRenderData): h.Child {\n      let kb = data.item.keyBinding;\n      return kb ? kb.keys.map(CommandRegistry.formatKeystroke).join(', ') : null;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The ms delay for opening and closing a submenu.\n   */\n  export\n  const TIMER_DELAY = 300;\n\n  /**\n   * The horizontal pixel overlap for an open submenu.\n   */\n  export\n  const SUBMENU_OVERLAP = 3;\n\n  /**\n   * Create the DOM node for a menu.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let content = document.createElement('ul');\n    content.className = 'lm-Menu-content';\n    /* <DEPRECATED> */\n    content.classList.add('p-Menu-content');\n    /* </DEPRECATED> */\n    node.appendChild(content);\n    node.tabIndex = -1;\n    return node;\n  }\n\n  /**\n   * Test whether a menu item can be activated.\n   */\n  export\n  function canActivate(item: Menu.IItem): boolean {\n    return item.type !== 'separator' && item.isEnabled && item.isVisible;\n  }\n\n  /**\n   * Create a new menu item for an owner menu.\n   */\n  export\n  function createItem(owner: Menu, options: Menu.IItemOptions): Menu.IItem {\n    return new MenuItem(owner.commands, options);\n  }\n\n  /**\n   * Hit test a menu hierarchy starting at the given root.\n   */\n  export\n  function hitTestMenus(menu: Menu, x: number, y: number): boolean {\n    for (let temp: Menu | null = menu; temp; temp = temp.childMenu) {\n      if (ElementExt.hitTest(temp.node, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Compute which extra separator items should be collapsed.\n   */\n  export\n  function computeCollapsed(items: ReadonlyArray<Menu.IItem>): boolean[] {\n    // Allocate the return array and fill it with `false`.\n    let result = new Array<boolean>(items.length);\n    ArrayExt.fill(result, false);\n\n    // Collapse the leading separators.\n    let k1 = 0;\n    let n = items.length;\n    for (; k1 < n; ++k1) {\n      let item = items[k1];\n      if (!item.isVisible) {\n        continue;\n      }\n      if (item.type !== 'separator') {\n        break;\n      }\n      result[k1] = true;\n    }\n\n    // Hide the trailing separators.\n    let k2 = n - 1;\n    for (; k2 >= 0; --k2) {\n      let item = items[k2];\n      if (!item.isVisible) {\n        continue;\n      }\n      if (item.type !== 'separator') {\n        break;\n      }\n      result[k2] = true;\n    }\n\n    // Hide the remaining consecutive separators.\n    let hide = false;\n    while (++k1 < k2) {\n      let item = items[k1];\n      if (!item.isVisible) {\n        continue;\n      }\n      if (item.type !== 'separator') {\n        hide = false;\n      } else if (hide) {\n        result[k1] = true;\n      } else {\n        hide = true;\n      }\n    }\n\n    // Return the resulting flags.\n    return result;\n  }\n\n  /**\n   * Open a menu as a root menu at the target location.\n   */\n  export\n  function openRootMenu(menu: Menu, x: number, y: number, forceX: boolean, forceY: boolean): void {\n    // Ensure the menu is updated before attaching and measuring.\n    MessageLoop.sendMessage(menu, Widget.Msg.UpdateRequest);\n\n    // Get the current position and size of the main viewport.\n    let px = window.pageXOffset;\n    let py = window.pageYOffset;\n    let cw = document.documentElement.clientWidth;\n    let ch = document.documentElement.clientHeight;\n\n    // Compute the maximum allowed height for the menu.\n    let maxHeight = ch - (forceY ? y : 0);\n\n    // Fetch common variables.\n    let node = menu.node;\n    let style = node.style;\n\n    // Clear the menu geometry and prepare it for measuring.\n    style.top = '';\n    style.left = '';\n    style.width = '';\n    style.height = '';\n    style.visibility = 'hidden';\n    style.maxHeight = `${maxHeight}px`;\n\n    // Attach the menu to the document.\n    Widget.attach(menu, document.body);\n\n    // Measure the size of the menu.\n    let { width, height } = node.getBoundingClientRect();\n\n    // Adjust the X position of the menu to fit on-screen.\n    if (!forceX && (x + width > px + cw)) {\n      x = px + cw - width;\n    }\n\n    // Adjust the Y position of the menu to fit on-screen.\n    if (!forceY && (y + height > py + ch)) {\n      if (y > py + ch) {\n        y = py + ch - height;\n      } else {\n        y = y - height;\n      }\n    }\n\n    // Update the position of the menu to the computed position.\n    style.top = `${Math.max(0, y)}px`;\n    style.left = `${Math.max(0, x)}px`;\n\n    // Finally, make the menu visible on the screen.\n    style.visibility = '';\n  }\n\n  /**\n   * Open a menu as a submenu using an item node for positioning.\n   */\n  export\n  function openSubmenu(submenu: Menu, itemNode: HTMLElement): void {\n    // Ensure the menu is updated before opening.\n    MessageLoop.sendMessage(submenu, Widget.Msg.UpdateRequest);\n\n    // Get the current position and size of the main viewport.\n    let px = window.pageXOffset;\n    let py = window.pageYOffset;\n    let cw = document.documentElement.clientWidth;\n    let ch = document.documentElement.clientHeight;\n\n    // Compute the maximum allowed height for the menu.\n    let maxHeight = ch;\n\n    // Fetch common variables.\n    let node = submenu.node;\n    let style = node.style;\n\n    // Clear the menu geometry and prepare it for measuring.\n    style.top = '';\n    style.left = '';\n    style.width = '';\n    style.height = '';\n    style.visibility = 'hidden';\n    style.maxHeight = `${maxHeight}px`;\n\n    // Attach the menu to the document.\n    Widget.attach(submenu, document.body);\n\n    // Measure the size of the menu.\n    let { width, height } = node.getBoundingClientRect();\n\n    // Compute the box sizing for the menu.\n    let box = ElementExt.boxSizing(submenu.node);\n\n    // Get the bounding rect for the target item node.\n    let itemRect = itemNode.getBoundingClientRect();\n\n    // Compute the target X position.\n    let x = itemRect.right - SUBMENU_OVERLAP;\n\n    // Adjust the X position to fit on the screen.\n    if (x + width > px + cw) {\n      x = itemRect.left + SUBMENU_OVERLAP - width;\n    }\n\n    // Compute the target Y position.\n    let y = itemRect.top - box.borderTop - box.paddingTop;\n\n    // Adjust the Y position to fit on the screen.\n    if (y + height > py + ch) {\n      y = itemRect.bottom + box.borderBottom + box.paddingBottom - height;\n    }\n\n    // Update the position of the menu to the computed position.\n    style.top = `${Math.max(0, y)}px`;\n    style.left = `${Math.max(0, x)}px`;\n\n    // Finally, make the menu visible on the screen.\n    style.visibility = '';\n  }\n\n  /**\n   * The results of a mnemonic search.\n   */\n  export\n  interface IMnemonicResult {\n    /**\n     * The index of the first matching mnemonic item, or `-1`.\n     */\n    index: number;\n\n    /**\n     * Whether multiple mnemonic items matched.\n     */\n    multiple: boolean;\n\n    /**\n     * The index of the first auto matched non-mnemonic item.\n     */\n    auto: number;\n  }\n\n  /**\n   * Find the best matching mnemonic item.\n   *\n   * The search starts at the given index and wraps around.\n   */\n  export\n  function findMnemonic(items: ReadonlyArray<Menu.IItem>, key: string, start: number): IMnemonicResult {\n    // Setup the result variables.\n    let index = -1;\n    let auto = -1;\n    let multiple = false;\n\n    // Normalize the key to upper case.\n    let upperKey = key.toUpperCase();\n\n    // Search the items from the given start index.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Compute the wrapped index.\n      let k = (i + start) % n;\n\n      // Lookup the item\n      let item = items[k];\n\n      // Ignore items which cannot be activated.\n      if (!canActivate(item)) {\n        continue;\n      }\n\n      // Ignore items with an empty label.\n      let label = item.label;\n      if (label.length === 0) {\n        continue;\n      }\n\n      // Lookup the mnemonic index for the label.\n      let mn = item.mnemonic;\n\n      // Handle a valid mnemonic index.\n      if (mn >= 0 && mn < label.length) {\n        if (label[mn].toUpperCase() === upperKey) {\n          if (index === -1) {\n            index = k;\n          } else {\n            multiple = true;\n          }\n        }\n        continue;\n      }\n\n      // Finally, handle the auto index if possible.\n      if (auto === -1 && label[0].toUpperCase() === upperKey) {\n        auto = k;\n      }\n    }\n\n    // Return the search results.\n    return { index, multiple, auto };\n  }\n\n  /**\n   * A concrete implementation of `Menu.IItem`.\n   */\n  class MenuItem implements Menu.IItem {\n    /**\n     * Construct a new menu item.\n     */\n    constructor(commands: CommandRegistry, options: Menu.IItemOptions) {\n      this._commands = commands;\n      this.type = options.type || 'command';\n      this.command = options.command || '';\n      this.args = options.args || JSONExt.emptyObject;\n      this.submenu = options.submenu || null;\n    }\n\n    /**\n     * The type of the menu item.\n     */\n    readonly type: Menu.ItemType;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The submenu for a `'submenu'` type item.\n     */\n    readonly submenu: Menu | null;\n\n    /**\n     * The display label for the menu item.\n     */\n    get label(): string {\n      if (this.type === 'command') {\n        return this._commands.label(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.label;\n      }\n      return '';\n    }\n\n    /**\n     * The mnemonic index for the menu item.\n     */\n    get mnemonic(): number {\n      if (this.type === 'command') {\n        return this._commands.mnemonic(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.mnemonic;\n      }\n      return -1;\n    }\n\n    /**\n     * The icon renderer for the menu item.\n     */\n    get icon(): VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */\n    {\n      if (this.type === 'command') {\n        return this._commands.icon(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.icon;\n      }\n\n      /* <DEPRECATED> */\n      // alias to icon class if not otherwise defined\n      return this.iconClass;\n      /* </DEPRECATED> */\n\n      /* <FUTURE>\n      return undefined;\n      </FUTURE> */\n    }\n\n    /**\n     * The icon class for the menu item.\n     */\n    get iconClass(): string {\n      if (this.type === 'command') {\n        return this._commands.iconClass(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.iconClass;\n      }\n      return '';\n    }\n\n    /**\n     * The icon label for the menu item.\n     */\n    get iconLabel(): string {\n      if (this.type === 'command') {\n        return this._commands.iconLabel(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.iconLabel;\n      }\n      return '';\n    }\n\n\n    /**\n     * The display caption for the menu item.\n     */\n    get caption(): string {\n      if (this.type === 'command') {\n        return this._commands.caption(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.caption;\n      }\n      return '';\n    }\n\n    /**\n     * The extra class name for the menu item.\n     */\n    get className(): string {\n      if (this.type === 'command') {\n        return this._commands.className(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.className;\n      }\n      return '';\n    }\n\n    /**\n     * The dataset for the menu item.\n     */\n    get dataset(): CommandRegistry.Dataset {\n      if (this.type === 'command') {\n        return this._commands.dataset(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.dataset;\n      }\n      return {};\n    }\n\n    /**\n     * Whether the menu item is enabled.\n     */\n    get isEnabled(): boolean {\n      if (this.type === 'command') {\n        return this._commands.isEnabled(this.command, this.args);\n      }\n      if (this.type === 'submenu') {\n        return this.submenu !== null;\n      }\n      return true;\n    }\n\n    /**\n     * Whether the menu item is toggled.\n     */\n    get isToggled(): boolean {\n      if (this.type === 'command') {\n        return this._commands.isToggled(this.command, this.args);\n      }\n      return false;\n    }\n\n    /**\n     * Whether the menu item is visible.\n     */\n    get isVisible(): boolean {\n      if (this.type === 'command') {\n        return this._commands.isVisible(this.command, this.args);\n      }\n      if (this.type === 'submenu') {\n        return this.submenu !== null;\n      }\n      return true;\n    }\n\n    /**\n     * The key binding for the menu item.\n     */\n    get keyBinding(): CommandRegistry.IKeyBinding | null {\n      if (this.type === 'command') {\n        let { command, args } = this;\n        return ArrayExt.findLastValue(this._commands.keyBindings, kb => {\n          return kb.command === command && JSONExt.deepEqual(kb.args, args);\n        }) || null;\n      }\n      return null;\n    }\n\n    private _commands: CommandRegistry;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  CommandRegistry\n} from '@lumino/commands';\n\nimport {\n  DisposableDelegate, IDisposable\n} from '@lumino/disposable';\n\nimport {\n  Selector\n} from '@lumino/domutils';\n\nimport {\n  Menu\n} from './menu';\n\n\n/**\n * An object which implements a universal context menu.\n *\n * #### Notes\n * The items shown in the context menu are determined by CSS selector\n * matching against the DOM hierarchy at the site of the mouse click.\n * This is similar in concept to how keyboard shortcuts are matched\n * in the command registry.\n */\nexport\nclass ContextMenu {\n  /**\n   * Construct a new context menu.\n   *\n   * @param options - The options for initializing the menu.\n   */\n  constructor(options: ContextMenu.IOptions) {\n    this.menu = new Menu(options);\n  }\n\n  /**\n   * The menu widget which displays the matched context items.\n   */\n  readonly menu: Menu;\n\n  /**\n   * Add an item to the context menu.\n   *\n   * @param options - The options for creating the item.\n   *\n   * @returns A disposable which will remove the item from the menu.\n   */\n  addItem(options: ContextMenu.IItemOptions): IDisposable {\n    // Create an item from the given options.\n    let item = Private.createItem(options, this._idTick++);\n\n    // Add the item to the internal array.\n    this._items.push(item);\n\n    // Return a disposable which will remove the item.\n    return new DisposableDelegate(() => {\n      ArrayExt.removeFirstOf(this._items, item);\n    });\n  }\n\n  /**\n   * Open the context menu in response to a `'contextmenu'` event.\n   *\n   * @param event - The `'contextmenu'` event of interest.\n   *\n   * @returns `true` if the menu was opened, or `false` if no items\n   *   matched the event and the menu was not opened.\n   *\n   * #### Notes\n   * This method will populate the context menu with items which match\n   * the propagation path of the event, then open the menu at the mouse\n   * position indicated by the event.\n   */\n  open(event: MouseEvent): boolean {\n    // Clear the current contents of the context menu.\n    this.menu.clearItems();\n\n    // Bail early if there are no items to match.\n    if (this._items.length === 0) {\n      return false;\n    }\n\n    // Find the matching items for the event.\n    let items = Private.matchItems(this._items, event);\n\n    // Bail if there are no matching items.\n    if (!items || items.length === 0) {\n      return false;\n    }\n\n    // Add the filtered items to the menu.\n    each(items, item => { this.menu.addItem(item); });\n\n    // Open the context menu at the current mouse position.\n    this.menu.open(event.clientX, event.clientY);\n\n    // Indicate success.\n    return true;\n  }\n\n  private _idTick = 0;\n  private _items: Private.IItem[] = [];\n}\n\n\n/**\n * The namespace for the `ContextMenu` class statics.\n */\nexport\nnamespace ContextMenu {\n  /**\n   * An options object for initializing a context menu.\n   */\n  export\n  interface IOptions {\n    /**\n     * The command registry to use with the context menu.\n     */\n    commands: CommandRegistry;\n\n    /**\n     * A custom renderer for use with the context menu.\n     */\n    renderer?: Menu.IRenderer;\n  }\n\n  /**\n   * An options object for creating a context menu item.\n   */\n  export\n  interface IItemOptions extends Menu.IItemOptions {\n    /**\n     * The CSS selector for the context menu item.\n     *\n     * The context menu item will only be displayed in the context menu\n     * when the selector matches a node on the propagation path of the\n     * contextmenu event. This allows the menu item to be restricted to\n     * user-defined contexts.\n     *\n     * The selector must not contain commas.\n     */\n    selector: string;\n\n    /**\n     * The rank for the item.\n     *\n     * The rank is used as a tie-breaker when ordering context menu\n     * items for display. Items are sorted in the following order:\n     *   1. Depth in the DOM tree (deeper is better)\n     *   2. Selector specificity (higher is better)\n     *   3. Rank (lower is better)\n     *   4. Insertion order\n     *\n     * The default rank is `Infinity`.\n     */\n    rank?: number;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A normalized item for a context menu.\n   */\n  export\n  interface IItem extends Menu.IItemOptions {\n    /**\n     * The selector for the item.\n     */\n    selector: string;\n\n    /**\n     * The rank for the item.\n     */\n    rank: number;\n\n    /**\n     * The tie-breaking id for the item.\n     */\n    id: number;\n  }\n\n  /**\n   * Create a normalized context menu item from an options object.\n   */\n  export\n  function createItem(options: ContextMenu.IItemOptions, id: number): IItem {\n    let selector = validateSelector(options.selector);\n    let rank = options.rank !== undefined ? options.rank : Infinity;\n    return { ...options, selector, rank, id };\n  }\n\n  /**\n   * Find the items which match a context menu event.\n   *\n   * The results are sorted by DOM level, specificity, and rank.\n   */\n  export\n  function matchItems(items: IItem[], event: MouseEvent): IItem[] | null {\n    // Look up the target of the event.\n    let target = event.target as (Element | null);\n\n    // Bail if there is no target.\n    if (!target) {\n      return null;\n    }\n\n    // Look up the current target of the event.\n    let currentTarget = event.currentTarget as (Element | null);\n\n    // Bail if there is no current target.\n    if (!currentTarget) {\n      return null;\n    }\n\n    // There are some third party libraries that cause the `target` to\n    // be detached from the DOM before lumino can process the event.\n    // If that happens, search for a new target node by point. If that\n    // node is still dangling, bail.\n    if (!currentTarget.contains(target)) {\n      target = document.elementFromPoint(event.clientX, event.clientY);\n      if (!target || !currentTarget.contains(target)) {\n        return null;\n      }\n    }\n\n    // Set up the result array.\n    let result: IItem[] = [];\n\n    // Copy the items array to allow in-place modification.\n    let availableItems: Array<IItem | null> = items.slice();\n\n    // Walk up the DOM hierarchy searching for matches.\n    while (target !== null) {\n      // Set up the match array for this DOM level.\n      let matches: IItem[] = [];\n\n      // Search the remaining items for matches.\n      for (let i = 0, n = availableItems.length; i < n; ++i) {\n        // Fetch the item.\n        let item = availableItems[i];\n\n        // Skip items which are already consumed.\n        if (!item) {\n          continue;\n        }\n\n        // Skip items which do not match the element.\n        if (!Selector.matches(target, item.selector)) {\n          continue;\n        }\n\n        // Add the matched item to the result for this DOM level.\n        matches.push(item);\n\n        // Mark the item as consumed.\n        availableItems[i] = null;\n      }\n\n      // Sort the matches for this level and add them to the results.\n      if (matches.length !== 0) {\n        matches.sort(itemCmp);\n        result.push(...matches);\n      }\n\n      // Stop searching at the limits of the DOM range.\n      if (target === currentTarget) {\n        break;\n      }\n\n      // Step to the parent DOM level.\n      target = target.parentElement;\n    }\n\n    // Return the matched and sorted results.\n    return result;\n  }\n\n  /**\n   * Validate the selector for a menu item.\n   *\n   * This returns the validated selector, or throws if the selector is\n   * invalid or contains commas.\n   */\n  function validateSelector(selector: string): string {\n    if (selector.indexOf(',') !== -1) {\n      throw new Error(`Selector cannot contain commas: ${selector}`);\n    }\n    if (!Selector.isValid(selector)) {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n    return selector;\n  }\n\n  /**\n   * A sort comparison function for a context menu item.\n   */\n  function itemCmp(a: IItem, b: IItem): number {\n    // Sort first based on selector specificity.\n    let s1 = Selector.calculateSpecificity(a.selector);\n    let s2 = Selector.calculateSpecificity(b.selector);\n    if (s1 !== s2) {\n      return s2 - s1;\n    }\n\n    // If specificities are equal, sort based on rank.\n    let r1 = a.rank;\n    let r2 = b.rank;\n    if (r1 !== r2) {\n      return r1 < r2 ? -1 : 1;  // Infinity-safe\n    }\n\n    // When all else fails, sort by item id.\n    return a.id - b.id;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, ChainIterator, IIterator, chain, each, empty, map, once, reduce\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  BoxEngine, BoxSizer\n} from './boxengine';\n\nimport {\n  Layout, LayoutItem\n} from './layout';\n\nimport {\n  TabBar\n} from './tabbar';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout which provides a flexible docking arrangement.\n *\n * #### Notes\n * The consumer of this layout is responsible for handling all signals\n * from the generated tab bars and managing the visibility of widgets\n * and tab bars as needed.\n */\nexport\nclass DockLayout extends Layout {\n  /**\n   * Construct a new dock layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: DockLayout.IOptions) {\n    super();\n    this.renderer = options.renderer;\n    if (options.spacing !== undefined) {\n      this._spacing = Private.clampSpacing(options.spacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   *\n   * #### Notes\n   * This will clear and dispose all widgets in the layout.\n   */\n  dispose(): void {\n    // Get an iterator over the widgets in the layout.\n    let widgets = this.iter();\n\n    // Dispose of the layout items.\n    this._items.forEach(item => { item.dispose(); });\n\n    // Clear the layout state before disposing the widgets.\n    this._box = null;\n    this._root = null;\n    this._items.clear();\n\n    // Dispose of the widgets contained in the old layout root.\n    each(widgets, widget => { widget.dispose(); });\n\n    // Dispose of the base class.\n    super.dispose();\n  }\n\n  /**\n   * The renderer used by the dock layout.\n   */\n  readonly renderer: DockLayout.IRenderer;\n\n  /**\n   * Get the inter-element spacing for the dock layout.\n   */\n  get spacing(): number {\n    return this._spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the dock layout.\n   */\n  set spacing(value: number) {\n    value = Private.clampSpacing(value);\n    if (this._spacing === value) {\n      return;\n    }\n    this._spacing = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.fit();\n  }\n\n  /**\n   * Whether the dock layout is empty.\n   */\n  get isEmpty(): boolean {\n    return this._root === null;\n  }\n\n  /**\n   * Create an iterator over all widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   *\n   * #### Notes\n   * This iterator includes the generated tab bars.\n   */\n  iter(): IIterator<Widget> {\n    return this._root ? this._root.iterAllWidgets() : empty<Widget>();\n  }\n\n  /**\n   * Create an iterator over the user widgets in the layout.\n   *\n   * @returns A new iterator over the user widgets in the layout.\n   *\n   * #### Notes\n   * This iterator does not include the generated tab bars.\n   */\n  widgets(): IIterator<Widget> {\n    return this._root ? this._root.iterUserWidgets() : empty<Widget>();\n  }\n\n  /**\n   * Create an iterator over the selected widgets in the layout.\n   *\n   * @returns A new iterator over the selected user widgets.\n   *\n   * #### Notes\n   * This iterator yields the widgets corresponding to the current tab\n   * of each tab bar in the layout.\n   */\n  selectedWidgets(): IIterator<Widget> {\n    return this._root ? this._root.iterSelectedWidgets() : empty<Widget>();\n  }\n\n  /**\n   * Create an iterator over the tab bars in the layout.\n   *\n   * @returns A new iterator over the tab bars in the layout.\n   *\n   * #### Notes\n   * This iterator does not include the user widgets.\n   */\n  tabBars(): IIterator<TabBar<Widget>> {\n    return this._root ? this._root.iterTabBars() : empty<TabBar<Widget>>();\n  }\n\n  /**\n   * Create an iterator over the handles in the layout.\n   *\n   * @returns A new iterator over the handles in the layout.\n   */\n  handles(): IIterator<HTMLDivElement> {\n    return this._root ? this._root.iterHandles() : empty<HTMLDivElement>();\n  }\n\n  /**\n   * Move a handle to the given offset position.\n   *\n   * @param handle - The handle to move.\n   *\n   * @param offsetX - The desired offset X position of the handle.\n   *\n   * @param offsetY - The desired offset Y position of the handle.\n   *\n   * #### Notes\n   * If the given handle is not contained in the layout, this is no-op.\n   *\n   * The handle will be moved as close as possible to the desired\n   * position without violating any of the layout constraints.\n   *\n   * Only one of the coordinates is used depending on the orientation\n   * of the handle. This method accepts both coordinates to make it\n   * easy to invoke from a mouse move event without needing to know\n   * the handle orientation.\n   */\n  moveHandle(handle: HTMLDivElement, offsetX: number, offsetY: number): void {\n    // Bail early if there is no root or if the handle is hidden.\n    let hidden = handle.classList.contains('lm-mod-hidden');\n    /* <DEPRECATED> */\n    hidden = hidden || handle.classList.contains('p-mod-hidden');\n    /* </DEPRECATED> */\n    if (!this._root || hidden) {\n      return;\n    }\n\n    // Lookup the split node for the handle.\n    let data = this._root.findSplitNode(handle);\n    if (!data) {\n      return;\n    }\n\n    // Compute the desired delta movement for the handle.\n    let delta: number;\n    if (data.node.orientation === 'horizontal') {\n      delta = offsetX - handle.offsetLeft;\n    } else {\n      delta = offsetY - handle.offsetTop;\n    }\n\n    // Bail if there is no handle movement.\n    if (delta === 0) {\n      return;\n    }\n\n    // Prevent sibling resizing unless needed.\n    data.node.holdSizes();\n\n    // Adjust the sizers to reflect the handle movement.\n    BoxEngine.adjust(data.node.sizers, data.index, delta);\n\n    // Update the layout of the widgets.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Save the current configuration of the dock layout.\n   *\n   * @returns A new config object for the current layout state.\n   *\n   * #### Notes\n   * The return value can be provided to the `restoreLayout` method\n   * in order to restore the layout to its current configuration.\n   */\n  saveLayout(): DockLayout.ILayoutConfig {\n    // Bail early if there is no root.\n    if (!this._root) {\n      return { main: null };\n    }\n\n    // Hold the current sizes in the layout tree.\n    this._root.holdAllSizes();\n\n    // Return the layout config.\n    return { main: this._root.createConfig() };\n  }\n\n  /**\n   * Restore the layout to a previously saved configuration.\n   *\n   * @param config - The layout configuration to restore.\n   *\n   * #### Notes\n   * Widgets which currently belong to the layout but which are not\n   * contained in the config will be unparented.\n   */\n  restoreLayout(config: DockLayout.ILayoutConfig): void {\n    // Create the widget set for validating the config.\n    let widgetSet = new Set<Widget>();\n\n    // Normalize the main area config and collect the widgets.\n    let mainConfig: DockLayout.AreaConfig | null;\n    if (config.main) {\n      mainConfig = Private.normalizeAreaConfig(config.main, widgetSet);\n    } else {\n      mainConfig = null;\n    }\n\n    // Create iterators over the old content.\n    let oldWidgets = this.widgets();\n    let oldTabBars = this.tabBars();\n    let oldHandles = this.handles();\n\n    // Clear the root before removing the old content.\n    this._root = null;\n\n    // Unparent the old widgets which are not in the new config.\n    each(oldWidgets, widget => {\n      if (!widgetSet.has(widget)) {\n        widget.parent = null;\n      }\n    });\n\n    // Dispose of the old tab bars.\n    each(oldTabBars, tabBar => {\n      tabBar.dispose();\n    });\n\n    // Remove the old handles.\n    each(oldHandles, handle => {\n      if (handle.parentNode) {\n        handle.parentNode.removeChild(handle);\n      }\n    });\n\n    // Reparent the new widgets to the current parent.\n    widgetSet.forEach(widget => {\n      widget.parent = this.parent;\n    });\n\n    // Create the root node for the new config.\n    if (mainConfig) {\n      this._root = Private.realizeAreaConfig(mainConfig, {\n        createTabBar: () => this._createTabBar(),\n        createHandle: () => this._createHandle()\n      });\n    } else {\n      this._root = null;\n    }\n\n    // If there is no parent, there is nothing more to do.\n    if (!this.parent) {\n      return;\n    }\n\n    // Attach the new widgets to the parent.\n    widgetSet.forEach(widget => {\n      this.attachWidget(widget);\n    });\n\n    // Post a fit request to the parent.\n    this.parent.fit();\n  }\n\n  /**\n   * Add a widget to the dock layout.\n   *\n   * @param widget - The widget to add to the dock layout.\n   *\n   * @param options - The additional options for adding the widget.\n   *\n   * #### Notes\n   * The widget will be moved if it is already contained in the layout.\n   *\n   * An error will be thrown if the reference widget is invalid.\n   */\n  addWidget(widget: Widget, options: DockLayout.IAddOptions = {}): void {\n    // Parse the options.\n    let ref = options.ref || null;\n    let mode = options.mode || 'tab-after';\n\n    // Find the tab node which holds the reference widget.\n    let refNode: Private.TabLayoutNode | null = null;\n    if (this._root && ref) {\n      refNode = this._root.findTabNode(ref);\n    }\n\n    // Throw an error if the reference widget is invalid.\n    if (ref && !refNode) {\n      throw new Error('Reference widget is not in the layout.');\n    }\n\n    // Reparent the widget to the current layout parent.\n    widget.parent = this.parent;\n\n    // Insert the widget according to the insert mode.\n    switch (mode) {\n    case 'tab-after':\n      this._insertTab(widget, ref, refNode, true);\n      break;\n    case 'tab-before':\n      this._insertTab(widget, ref, refNode, false);\n      break;\n    case 'split-top':\n      this._insertSplit(widget, ref, refNode, 'vertical', false);\n      break;\n    case 'split-left':\n      this._insertSplit(widget, ref, refNode, 'horizontal', false);\n      break;\n    case 'split-right':\n      this._insertSplit(widget, ref, refNode, 'horizontal', true);\n      break;\n    case 'split-bottom':\n      this._insertSplit(widget, ref, refNode, 'vertical', true);\n      break;\n    }\n\n    // Do nothing else if there is no parent widget.\n    if (!this.parent) {\n      return;\n    }\n\n    // Ensure the widget is attached to the parent widget.\n    this.attachWidget(widget);\n\n    // Post a fit request for the parent widget.\n    this.parent.fit();\n  }\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    // Remove the widget from its current layout location.\n    this._removeWidget(widget);\n\n    // Do nothing else if there is no parent widget.\n    if (!this.parent) {\n      return;\n    }\n\n    // Detach the widget from the parent widget.\n    this.detachWidget(widget);\n\n    // Post a fit request for the parent widget.\n    this.parent.fit();\n  }\n\n  /**\n   * Find the tab area which contains the given client position.\n   *\n   * @param clientX - The client X position of interest.\n   *\n   * @param clientY - The client Y position of interest.\n   *\n   * @returns The geometry of the tab area at the given position, or\n   *   `null` if there is no tab area at the given position.\n   */\n  hitTestTabAreas(clientX: number, clientY: number): DockLayout.ITabAreaGeometry | null {\n    // Bail early if hit testing cannot produce valid results.\n    if (!this._root || !this.parent || !this.parent.isVisible) {\n      return null;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent.node);\n    }\n\n    // Convert from client to local coordinates.\n    let rect = this.parent.node.getBoundingClientRect();\n    let x = clientX - rect.left - this._box.borderLeft;\n    let y = clientY - rect.top - this._box.borderTop;\n\n    // Find the tab layout node at the local position.\n    let tabNode = this._root.hitTestTabNodes(x, y);\n\n    // Bail if a tab layout node was not found.\n    if (!tabNode) {\n      return null;\n    }\n\n    // Extract the data from the tab node.\n    let { tabBar, top, left, width, height } = tabNode;\n\n    // Compute the right and bottom edges of the tab area.\n    let borderWidth = this._box.borderLeft + this._box.borderRight;\n    let borderHeight = this._box.borderTop + this._box.borderBottom;\n    let right = rect.width - borderWidth - (left + width);\n    let bottom = rect.height - borderHeight - (top + height);\n\n    // Return the hit test results.\n    return { tabBar, x, y, top, left, right, bottom, width, height };\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    // Perform superclass initialization.\n    super.init();\n\n    // Attach each widget to the parent.\n    each(this, widget => { this.attachWidget(widget); });\n\n    // Attach each handle to the parent.\n    each(this.handles(), handle => { this.parent!.node.appendChild(handle); });\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Attach the widget to the layout parent widget.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a no-op if the widget is already attached.\n   */\n  protected attachWidget(widget: Widget): void {\n    // Do nothing if the widget is already attached.\n    if (this.parent!.node === widget.node.parentNode) {\n      return;\n    }\n\n    // Create the layout item for the widget.\n    this._items.set(widget, new LayoutItem(widget));\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Detach the widget from the layout parent widget.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a no-op if the widget is not attached.\n   */\n  protected detachWidget(widget: Widget): void {\n    // Do nothing if the widget is not attached.\n    if (this.parent!.node !== widget.node.parentNode) {\n      return;\n    }\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Delete the layout item for the widget.\n    let item = this._items.get(widget);\n    if (item) {\n      this._items.delete(widget);\n      item.dispose();\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Remove the specified widget from the layout structure.\n   *\n   * #### Notes\n   * This is a no-op if the widget is not in the layout tree.\n   *\n   * This does not detach the widget from the parent node.\n   */\n  private _removeWidget(widget: Widget): void {\n    // Bail early if there is no layout root.\n    if (!this._root) {\n      return;\n    }\n\n    // Find the tab node which contains the given widget.\n    let tabNode = this._root.findTabNode(widget);\n\n    // Bail early if the tab node is not found.\n    if (!tabNode) {\n      return;\n    }\n\n    // If there are multiple tabs, just remove the widget's tab.\n    if (tabNode.tabBar.titles.length > 1) {\n      tabNode.tabBar.removeTab(widget.title);\n      return;\n    }\n\n    // Otherwise, the tab node needs to be removed...\n\n    // Dispose the tab bar.\n    tabNode.tabBar.dispose();\n\n    // Handle the case where the tab node is the root.\n    if (this._root === tabNode) {\n      this._root = null;\n      return;\n    }\n\n    // Otherwise, remove the tab node from its parent...\n\n    // Prevent widget resizing unless needed.\n    this._root.holdAllSizes();\n\n    // Clear the parent reference on the tab node.\n    let splitNode = tabNode.parent!;\n    tabNode.parent = null;\n\n    // Remove the tab node from its parent split node.\n    let i = ArrayExt.removeFirstOf(splitNode.children, tabNode);\n    let handle = ArrayExt.removeAt(splitNode.handles, i)!;\n    ArrayExt.removeAt(splitNode.sizers, i);\n\n    // Remove the handle from its parent DOM node.\n    if (handle.parentNode) {\n      handle.parentNode.removeChild(handle);\n    }\n\n    // If there are multiple children, just update the handles.\n    if (splitNode.children.length > 1) {\n      splitNode.syncHandles();\n      return;\n    }\n\n    // Otherwise, the split node also needs to be removed...\n\n    // Clear the parent reference on the split node.\n    let maybeParent = splitNode.parent;\n    splitNode.parent = null;\n\n    // Lookup the remaining child node and handle.\n    let childNode = splitNode.children[0];\n    let childHandle = splitNode.handles[0];\n\n    // Clear the split node data.\n    splitNode.children.length = 0;\n    splitNode.handles.length = 0;\n    splitNode.sizers.length = 0;\n\n    // Remove the child handle from its parent node.\n    if (childHandle.parentNode) {\n      childHandle.parentNode.removeChild(childHandle);\n    }\n\n    // Handle the case where the split node is the root.\n    if (this._root === splitNode) {\n      childNode.parent = null;\n      this._root = childNode;\n      return;\n    }\n\n    // Otherwise, move the child node to the parent node...\n    let parentNode = maybeParent!;\n\n    // Lookup the index of the split node.\n    let j = parentNode.children.indexOf(splitNode);\n\n    // Handle the case where the child node is a tab node.\n    if (childNode instanceof Private.TabLayoutNode) {\n      childNode.parent = parentNode;\n      parentNode.children[j] = childNode;\n      return;\n    }\n\n    // Remove the split data from the parent.\n    let splitHandle = ArrayExt.removeAt(parentNode.handles, j)!;\n    ArrayExt.removeAt(parentNode.children, j);\n    ArrayExt.removeAt(parentNode.sizers, j);\n\n    // Remove the handle from its parent node.\n    if (splitHandle.parentNode) {\n      splitHandle.parentNode.removeChild(splitHandle);\n    }\n\n    // The child node and the split parent node will have the same\n    // orientation. Merge the grand-children with the parent node.\n    for (let i = 0, n = childNode.children.length; i < n; ++i) {\n      let gChild = childNode.children[i];\n      let gHandle = childNode.handles[i];\n      let gSizer = childNode.sizers[i];\n      ArrayExt.insert(parentNode.children, j + i, gChild);\n      ArrayExt.insert(parentNode.handles, j + i, gHandle);\n      ArrayExt.insert(parentNode.sizers, j + i, gSizer);\n      gChild.parent = parentNode;\n    }\n\n    // Clear the child node.\n    childNode.children.length = 0;\n    childNode.handles.length = 0;\n    childNode.sizers.length = 0;\n    childNode.parent = null;\n\n    // Sync the handles on the parent node.\n    parentNode.syncHandles();\n  }\n\n  /**\n   * Insert a widget next to an existing tab.\n   *\n   * #### Notes\n   * This does not attach the widget to the parent widget.\n   */\n  private _insertTab(widget: Widget, ref: Widget | null, refNode: Private.TabLayoutNode | null, after: boolean): void {\n    // Do nothing if the tab is inserted next to itself.\n    if (widget === ref) {\n      return;\n    }\n\n    // Create the root if it does not exist.\n    if (!this._root) {\n      let tabNode = new Private.TabLayoutNode(this._createTabBar());\n      tabNode.tabBar.addTab(widget.title);\n      this._root = tabNode;\n      return;\n    }\n\n    // Use the first tab node as the ref node if needed.\n    if (!refNode) {\n      refNode = this._root.findFirstTabNode()!;\n    }\n\n    // If the widget is not contained in the ref node, ensure it is\n    // removed from the layout and hidden before being added again.\n    if (refNode.tabBar.titles.indexOf(widget.title) === -1) {\n      this._removeWidget(widget);\n      widget.hide();\n    }\n\n    // Lookup the target index for inserting the tab.\n    let index: number;\n    if (ref) {\n      index = refNode.tabBar.titles.indexOf(ref.title);\n    } else {\n      index = refNode.tabBar.currentIndex;\n    }\n\n    // Insert the widget's tab relative to the target index.\n    refNode.tabBar.insertTab(index + (after ? 1 : 0), widget.title);\n  }\n\n  /**\n   * Insert a widget as a new split area.\n   *\n   * #### Notes\n   * This does not attach the widget to the parent widget.\n   */\n  private _insertSplit(widget: Widget, ref: Widget | null, refNode: Private.TabLayoutNode | null, orientation: Private.Orientation, after: boolean): void {\n    // Do nothing if there is no effective split.\n    if (widget === ref && refNode && refNode.tabBar.titles.length === 1) {\n      return;\n    }\n\n    // Ensure the widget is removed from the current layout.\n    this._removeWidget(widget);\n\n    // Create the tab layout node to hold the widget.\n    let tabNode = new Private.TabLayoutNode(this._createTabBar());\n    tabNode.tabBar.addTab(widget.title);\n\n    // Set the root if it does not exist.\n    if (!this._root) {\n      this._root = tabNode;\n      return;\n    }\n\n    // If the ref node parent is null, split the root.\n    if (!refNode || !refNode.parent) {\n      // Ensure the root is split with the correct orientation.\n      let root = this._splitRoot(orientation);\n\n      // Determine the insert index for the new tab node.\n      let i = after ? root.children.length : 0;\n\n      // Normalize the split node.\n      root.normalizeSizes();\n\n      // Create the sizer for new tab node.\n      let sizer = Private.createSizer(refNode ? 1 : Private.GOLDEN_RATIO);\n\n      // Insert the tab node sized to the golden ratio.\n      ArrayExt.insert(root.children, i, tabNode);\n      ArrayExt.insert(root.sizers, i, sizer);\n      ArrayExt.insert(root.handles, i, this._createHandle());\n      tabNode.parent = root;\n\n      // Re-normalize the split node to maintain the ratios.\n      root.normalizeSizes();\n\n      // Finally, synchronize the visibility of the handles.\n      root.syncHandles();\n      return;\n    }\n\n    // Lookup the split node for the ref widget.\n    let splitNode = refNode.parent;\n\n    // If the split node already had the correct orientation,\n    // the widget can be inserted into the split node directly.\n    if (splitNode.orientation === orientation) {\n      // Find the index of the ref node.\n      let i = splitNode.children.indexOf(refNode);\n\n      // Normalize the split node.\n      splitNode.normalizeSizes();\n\n      // Consume half the space for the insert location.\n      let s = splitNode.sizers[i].sizeHint /= 2;\n\n      // Insert the tab node sized to the other half.\n      let j = i + (after ? 1 : 0);\n      ArrayExt.insert(splitNode.children, j, tabNode);\n      ArrayExt.insert(splitNode.sizers, j, Private.createSizer(s));\n      ArrayExt.insert(splitNode.handles, j, this._createHandle());\n      tabNode.parent = splitNode;\n\n      // Finally, synchronize the visibility of the handles.\n      splitNode.syncHandles();\n      return;\n    }\n\n    // Remove the ref node from the split node.\n    let i = ArrayExt.removeFirstOf(splitNode.children, refNode);\n\n    // Create a new normalized split node for the children.\n    let childNode = new Private.SplitLayoutNode(orientation);\n    childNode.normalized = true;\n\n    // Add the ref node sized to half the space.\n    childNode.children.push(refNode);\n    childNode.sizers.push(Private.createSizer(0.5));\n    childNode.handles.push(this._createHandle());\n    refNode.parent = childNode;\n\n    // Add the tab node sized to the other half.\n    let j = after ? 1 : 0;\n    ArrayExt.insert(childNode.children, j, tabNode);\n    ArrayExt.insert(childNode.sizers, j, Private.createSizer(0.5));\n    ArrayExt.insert(childNode.handles, j, this._createHandle());\n    tabNode.parent = childNode;\n\n    // Synchronize the visibility of the handles.\n    childNode.syncHandles();\n\n    // Finally, add the new child node to the original split node.\n    ArrayExt.insert(splitNode.children, i, childNode);\n    childNode.parent = splitNode;\n  }\n\n  /**\n   * Ensure the root is a split node with the given orientation.\n   */\n  private _splitRoot(orientation: Private.Orientation): Private.SplitLayoutNode {\n    // Bail early if the root already meets the requirements.\n    let oldRoot = this._root;\n    if (oldRoot instanceof Private.SplitLayoutNode) {\n      if (oldRoot.orientation === orientation) {\n        return oldRoot;\n      }\n    }\n\n    // Create a new root node with the specified orientation.\n    let newRoot = this._root = new Private.SplitLayoutNode(orientation);\n\n    // Add the old root to the new root.\n    if (oldRoot) {\n      newRoot.children.push(oldRoot);\n      newRoot.sizers.push(Private.createSizer(0));\n      newRoot.handles.push(this._createHandle());\n      oldRoot.parent = newRoot;\n    }\n\n    // Return the new root as a convenience.\n    return newRoot;\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Set up the computed minimum size.\n    let minW = 0;\n    let minH = 0;\n\n    // Update the size limits for the layout tree.\n    if (this._root) {\n      let limits = this._root.fit(this._spacing, this._items);\n      minW = limits.minWidth;\n      minH = limits.minHeight;\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Bail early if there is no root layout node.\n    if (!this._root) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the actual layout bounds adjusted for border and padding.\n    let x = this._box.paddingTop;\n    let y = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Update the geometry of the layout tree.\n    this._root.update(x, y, width, height, this._spacing, this._items);\n  }\n\n  /**\n   * Create a new tab bar for use by the dock layout.\n   *\n   * #### Notes\n   * The tab bar will be attached to the parent if it exists.\n   */\n  private _createTabBar(): TabBar<Widget> {\n    // Create the tab bar using the renderer.\n    let tabBar = this.renderer.createTabBar();\n\n    // Enforce necessary tab bar behavior.\n    tabBar.orientation = 'horizontal';\n\n    // Reparent and attach the tab bar to the parent if possible.\n    if (this.parent) {\n      tabBar.parent = this.parent;\n      this.attachWidget(tabBar);\n    }\n\n    // Return the initialized tab bar.\n    return tabBar;\n  }\n\n  /**\n   * Create a new handle for the dock layout.\n   *\n   * #### Notes\n   * The handle will be attached to the parent if it exists.\n   */\n  private _createHandle(): HTMLDivElement {\n    // Create the handle using the renderer.\n    let handle = this.renderer.createHandle();\n\n    // Initialize the handle layout behavior.\n    let style = handle.style;\n    style.position = 'absolute';\n    style.top = '0';\n    style.left = '0';\n    style.width = '0';\n    style.height = '0';\n\n    // Attach the handle to the parent if it exists.\n    if (this.parent) {\n      this.parent.node.appendChild(handle);\n    }\n\n    // Return the initialized handle.\n    return handle;\n  }\n\n  private _spacing = 4;\n  private _dirty = false;\n  private _root: Private.LayoutNode | null = null;\n  private _box: ElementExt.IBoxSizing | null = null;\n  private _items: Private.ItemMap = new Map<Widget, LayoutItem>();\n}\n\n\n/**\n * The namespace for the `DockLayout` class statics.\n */\nexport\nnamespace DockLayout {\n  /**\n   * An options object for creating a dock layout.\n   */\n  export\n  interface IOptions {\n    /**\n     * The renderer to use for the dock layout.\n     */\n    renderer: IRenderer;\n\n    /**\n     * The spacing between items in the layout.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n  }\n\n  /**\n   * A renderer for use with a dock layout.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Create a new tab bar for use with a dock layout.\n     *\n     * @returns A new tab bar for a dock layout.\n     */\n    createTabBar(): TabBar<Widget>;\n\n    /**\n     * Create a new handle node for use with a dock layout.\n     *\n     * @returns A new handle node for a dock layout.\n     */\n    createHandle(): HTMLDivElement;\n  }\n\n  /**\n   * A type alias for the supported insertion modes.\n   *\n   * An insert mode is used to specify how a widget should be added\n   * to the dock layout relative to a reference widget.\n   */\n  export\n  type InsertMode = (\n    /**\n     * The area to the top of the reference widget.\n     *\n     * The widget will be inserted just above the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted at the top edge of the dock layout.\n     */\n    'split-top' |\n\n    /**\n     * The area to the left of the reference widget.\n     *\n     * The widget will be inserted just left of the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted at the left edge of the dock layout.\n     */\n    'split-left' |\n\n    /**\n     * The area to the right of the reference widget.\n     *\n     * The widget will be inserted just right of the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted  at the right edge of the dock layout.\n     */\n    'split-right' |\n\n    /**\n     * The area to the bottom of the reference widget.\n     *\n     * The widget will be inserted just below the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted at the bottom edge of the dock layout.\n     */\n    'split-bottom' |\n\n    /**\n     * The tab position before the reference widget.\n     *\n     * The widget will be added as a tab before the reference widget.\n     *\n     * If the reference widget is null or invalid, a sensible default\n     * will be used.\n     */\n    'tab-before' |\n\n    /**\n     * The tab position after the reference widget.\n     *\n     * The widget will be added as a tab after the reference widget.\n     *\n     * If the reference widget is null or invalid, a sensible default\n     * will be used.\n     */\n    'tab-after'\n  );\n\n  /**\n   * An options object for adding a widget to the dock layout.\n   */\n  export\n  interface IAddOptions {\n    /**\n     * The insertion mode for adding the widget.\n     *\n     * The default is `'tab-after'`.\n     */\n    mode?: InsertMode;\n\n    /**\n     * The reference widget for the insert location.\n     *\n     * The default is `null`.\n     */\n    ref?: Widget | null;\n  }\n\n  /**\n   * A layout config object for a tab area.\n   */\n  export\n  interface ITabAreaConfig {\n    /**\n     * The discriminated type of the config object.\n     */\n    type: 'tab-area';\n\n    /**\n     * The widgets contained in the tab area.\n     */\n    widgets: Widget[];\n\n    /**\n     * The index of the selected tab.\n     */\n    currentIndex: number;\n  }\n\n  /**\n   * A layout config object for a split area.\n   */\n  export\n  interface ISplitAreaConfig {\n    /**\n     * The discriminated type of the config object.\n     */\n    type: 'split-area';\n\n    /**\n     * The orientation of the split area.\n     */\n    orientation: 'horizontal' | 'vertical';\n\n    /**\n     * The children in the split area.\n     */\n    children: AreaConfig[];\n\n    /**\n     * The relative sizes of the children.\n     */\n    sizes: number[];\n  }\n\n  /**\n   * A type alias for a general area config.\n   */\n  export\n  type AreaConfig = ITabAreaConfig | ISplitAreaConfig;\n\n  /**\n   * A dock layout configuration object.\n   */\n  export\n  interface ILayoutConfig {\n    /**\n     * The layout config for the main dock area.\n     */\n    main: AreaConfig | null;\n  }\n\n  /**\n   * An object which represents the geometry of a tab area.\n   */\n  export\n  interface ITabAreaGeometry {\n    /**\n     * The tab bar for the tab area.\n     */\n    tabBar: TabBar<Widget>;\n\n    /**\n     * The local X position of the hit test in the dock area.\n     *\n     * #### Notes\n     * This is the distance from the left edge of the layout parent\n     * widget, to the local X coordinate of the hit test query.\n     */\n    x: number;\n\n    /**\n     * The local Y position of the hit test in the dock area.\n     *\n     * #### Notes\n     * This is the distance from the top edge of the layout parent\n     * widget, to the local Y coordinate of the hit test query.\n     */\n    y: number;\n\n    /**\n     * The local coordinate of the top edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the top edge of the layout parent\n     * widget, to the top edge of the tab area.\n     */\n    top: number;\n\n    /**\n     * The local coordinate of the left edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the left edge of the layout parent\n     * widget, to the left edge of the tab area.\n     */\n    left: number;\n\n    /**\n     * The local coordinate of the right edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the right edge of the layout parent\n     * widget, to the right edge of the tab area.\n     */\n    right: number;\n\n    /**\n     * The local coordinate of the bottom edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the bottom edge of the layout parent\n     * widget, to the bottom edge of the tab area.\n     */\n    bottom: number;\n\n    /**\n     * The width of the tab area.\n     *\n     * #### Notes\n     * This is total width allocated for the tab area.\n     */\n    width: number;\n\n    /**\n     * The height of the tab area.\n     *\n     * #### Notes\n     * This is total height allocated for the tab area.\n     */\n    height: number;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A fraction used for sizing root panels; ~= `1 / golden_ratio`.\n   */\n  export\n  const GOLDEN_RATIO = 0.618;\n\n  /**\n   * A type alias for a dock layout node.\n   */\n  export\n  type LayoutNode = TabLayoutNode | SplitLayoutNode;\n\n  /**\n   * A type alias for the orientation of a split layout node.\n   */\n  export\n  type Orientation = 'horizontal' | 'vertical';\n\n  /**\n   * A type alias for a layout item map.\n   */\n  export\n  type ItemMap = Map<Widget, LayoutItem>;\n\n  /**\n   * Clamp a spacing value to an integer >= 0.\n   */\n  export\n  function clampSpacing(value: number): number {\n    return Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Create a box sizer with an initial size hint.\n   */\n  export\n  function createSizer(hint: number): BoxSizer {\n    let sizer = new BoxSizer();\n    sizer.sizeHint = hint;\n    sizer.size = hint;\n    return sizer;\n  }\n\n  /**\n   * Normalize an area config object and collect the visited widgets.\n   */\n  export\n  function normalizeAreaConfig(config: DockLayout.AreaConfig, widgetSet: Set<Widget>): DockLayout.AreaConfig | null {\n    let result: DockLayout.AreaConfig | null;\n    if (config.type === 'tab-area') {\n      result = normalizeTabAreaConfig(config, widgetSet);\n    } else {\n      result = normalizeSplitAreaConfig(config, widgetSet);\n    }\n    return result;\n  }\n\n  /**\n   * Convert a normalized area config into a layout tree.\n   */\n  export\n  function realizeAreaConfig(config: DockLayout.AreaConfig, renderer: DockLayout.IRenderer): LayoutNode {\n    let node: LayoutNode;\n    if (config.type === 'tab-area') {\n      node = realizeTabAreaConfig(config, renderer);\n    } else {\n      node = realizeSplitAreaConfig(config, renderer);\n    }\n    return node;\n  }\n\n  /**\n   * A layout node which holds the data for a tabbed area.\n   */\n  export\n  class TabLayoutNode {\n    /**\n     * Construct a new tab layout node.\n     *\n     * @param tabBar - The tab bar to use for the layout node.\n     */\n    constructor(tabBar: TabBar<Widget>) {\n      let tabSizer = new BoxSizer();\n      let widgetSizer = new BoxSizer();\n      tabSizer.stretch = 0;\n      widgetSizer.stretch = 1;\n      this.tabBar = tabBar;\n      this.sizers = [tabSizer, widgetSizer];\n    }\n\n    /**\n     * The parent of the layout node.\n     */\n    parent: SplitLayoutNode | null = null;\n\n    /**\n     * The tab bar for the layout node.\n     */\n    readonly tabBar: TabBar<Widget>;\n\n    /**\n     * The sizers for the layout node.\n     */\n    readonly sizers: [BoxSizer, BoxSizer];\n\n    /**\n     * The most recent value for the `top` edge of the layout box.\n     */\n    get top(): number {\n      return this._top;\n    }\n\n    /**\n     * The most recent value for the `left` edge of the layout box.\n     */\n    get left(): number {\n      return this._left;\n    }\n\n    /**\n     * The most recent value for the `width` of the layout box.\n     */\n    get width(): number {\n      return this._width;\n    }\n\n    /**\n     * The most recent value for the `height` of the layout box.\n     */\n    get height(): number {\n      return this._height;\n    }\n\n    /**\n     * Create an iterator for all widgets in the layout tree.\n     */\n    iterAllWidgets(): IIterator<Widget> {\n      return chain(once(this.tabBar), this.iterUserWidgets());\n    }\n\n    /**\n     * Create an iterator for the user widgets in the layout tree.\n     */\n    iterUserWidgets(): IIterator<Widget> {\n      return map(this.tabBar.titles, title => title.owner);\n    }\n\n    /**\n     * Create an iterator for the selected widgets in the layout tree.\n     */\n    iterSelectedWidgets(): IIterator<Widget> {\n      let title = this.tabBar.currentTitle;\n      return title ? once(title.owner) : empty<Widget>();\n    }\n\n    /**\n     * Create an iterator for the tab bars in the layout tree.\n     */\n    iterTabBars(): IIterator<TabBar<Widget>> {\n      return once(this.tabBar);\n    }\n\n    /**\n     * Create an iterator for the handles in the layout tree.\n     */\n    iterHandles(): IIterator<HTMLDivElement> {\n      return empty<HTMLDivElement>();\n    }\n\n    /**\n     * Find the tab layout node which contains the given widget.\n     */\n    findTabNode(widget: Widget): TabLayoutNode | null {\n      return this.tabBar.titles.indexOf(widget.title) !== -1 ? this : null;\n    }\n\n    /**\n     * Find the split layout node which contains the given handle.\n     */\n    findSplitNode(handle: HTMLDivElement): { index: number, node: SplitLayoutNode } | null {\n      return null;\n    }\n\n    /**\n     * Find the first tab layout node in a layout tree.\n     */\n    findFirstTabNode(): TabLayoutNode | null {\n      return this;\n    }\n\n    /**\n     * Find the tab layout node which contains the local point.\n     */\n    hitTestTabNodes(x: number, y: number): TabLayoutNode | null {\n      if (x < this._left || x >= this._left + this._width) {\n        return null;\n      }\n      if (y < this._top || y >= this._top + this._height) {\n        return null;\n      }\n      return this;\n    }\n\n    /**\n     * Create a configuration object for the layout tree.\n     */\n    createConfig(): DockLayout.ITabAreaConfig {\n      let widgets = this.tabBar.titles.map(title => title.owner);\n      let currentIndex = this.tabBar.currentIndex;\n      return { type: 'tab-area', widgets, currentIndex };\n    }\n\n    /**\n     * Recursively hold all of the sizes in the layout tree.\n     *\n     * This ignores the sizers of tab layout nodes.\n     */\n    holdAllSizes(): void {\n      return;\n    }\n\n    /**\n     * Fit the layout tree.\n     */\n    fit(spacing: number, items: ItemMap): ElementExt.ISizeLimits {\n      // Set up the limit variables.\n      let minWidth = 0;\n      let minHeight = 0;\n      let maxWidth = Infinity;\n      let maxHeight = Infinity;\n\n      // Lookup the tab bar layout item.\n      let tabBarItem = items.get(this.tabBar);\n\n      // Lookup the widget layout item.\n      let current = this.tabBar.currentTitle;\n      let widgetItem = current ? items.get(current.owner) : undefined;\n\n      // Lookup the tab bar and widget sizers.\n      let [tabBarSizer, widgetSizer] = this.sizers;\n\n      // Update the tab bar limits.\n      if (tabBarItem) {\n        tabBarItem.fit();\n      }\n\n      // Update the widget limits.\n      if (widgetItem) {\n        widgetItem.fit();\n      }\n\n      // Update the results and sizer for the tab bar.\n      if (tabBarItem && !tabBarItem.isHidden) {\n        minWidth = Math.max(minWidth, tabBarItem.minWidth);\n        minHeight += tabBarItem.minHeight;\n        tabBarSizer.minSize = tabBarItem.minHeight;\n        tabBarSizer.maxSize = tabBarItem.maxHeight;\n      } else {\n        tabBarSizer.minSize = 0;\n        tabBarSizer.maxSize = 0;\n      }\n\n      // Update the results and sizer for the current widget.\n      if (widgetItem && !widgetItem.isHidden) {\n        minWidth = Math.max(minWidth, widgetItem.minWidth);\n        minHeight += widgetItem.minHeight;\n        widgetSizer.minSize = widgetItem.minHeight;\n        widgetSizer.maxSize = Infinity;\n      } else {\n        widgetSizer.minSize = 0;\n        widgetSizer.maxSize = Infinity;\n      }\n\n      // Return the computed size limits for the layout node.\n      return { minWidth, minHeight, maxWidth, maxHeight };\n    }\n\n    /**\n     * Update the layout tree.\n     */\n    update(left: number, top: number, width: number, height: number, spacing: number, items: ItemMap): void {\n      // Update the layout box values.\n      this._top = top;\n      this._left = left;\n      this._width = width;\n      this._height = height;\n\n      // Lookup the tab bar layout item.\n      let tabBarItem = items.get(this.tabBar);\n\n      // Lookup the widget layout item.\n      let current = this.tabBar.currentTitle;\n      let widgetItem = current ? items.get(current.owner) : undefined;\n\n      // Distribute the layout space to the sizers.\n      BoxEngine.calc(this.sizers, height);\n\n      // Update the tab bar item using the computed size.\n      if (tabBarItem && !tabBarItem.isHidden) {\n        let size = this.sizers[0].size;\n        tabBarItem.update(left, top, width, size);\n        top += size;\n      }\n\n      // Layout the widget using the computed size.\n      if (widgetItem && !widgetItem.isHidden) {\n        let size = this.sizers[1].size;\n        widgetItem.update(left, top, width, size);\n      }\n    }\n\n    private _top = 0;\n    private _left = 0;\n    private _width = 0;\n    private _height = 0;\n  }\n\n  /**\n   * A layout node which holds the data for a split area.\n   */\n  export\n  class SplitLayoutNode {\n    /**\n     * Construct a new split layout node.\n     *\n     * @param orientation - The orientation of the node.\n     */\n    constructor(orientation: Orientation) {\n      this.orientation = orientation;\n    }\n\n    /**\n     * The parent of the layout node.\n     */\n    parent: SplitLayoutNode | null = null;\n\n    /**\n     * Whether the sizers have been normalized.\n     */\n    normalized = false;\n\n    /**\n     * The orientation of the node.\n     */\n    readonly orientation: Orientation;\n\n    /**\n     * The child nodes for the split node.\n     */\n    readonly children: LayoutNode[] = [];\n\n    /**\n     * The box sizers for the layout children.\n     */\n    readonly sizers: BoxSizer[] = [];\n\n    /**\n     * The handles for the layout children.\n     */\n    readonly handles: HTMLDivElement[] = [];\n\n    /**\n     * Create an iterator for all widgets in the layout tree.\n     */\n    iterAllWidgets(): IIterator<Widget> {\n      let children = map(this.children, child => child.iterAllWidgets());\n      return new ChainIterator<Widget>(children);\n    }\n\n    /**\n     * Create an iterator for the user widgets in the layout tree.\n     */\n    iterUserWidgets(): IIterator<Widget> {\n      let children = map(this.children, child => child.iterUserWidgets());\n      return new ChainIterator<Widget>(children);\n    }\n\n    /**\n     * Create an iterator for the selected widgets in the layout tree.\n     */\n    iterSelectedWidgets(): IIterator<Widget> {\n      let children = map(this.children, child => child.iterSelectedWidgets());\n      return new ChainIterator<Widget>(children);\n    }\n\n    /**\n     * Create an iterator for the tab bars in the layout tree.\n     */\n    iterTabBars(): IIterator<TabBar<Widget>> {\n      let children = map(this.children, child => child.iterTabBars());\n      return new ChainIterator<TabBar<Widget>>(children);\n    }\n\n    /**\n     * Create an iterator for the handles in the layout tree.\n     */\n    iterHandles(): IIterator<HTMLDivElement> {\n      let children = map(this.children, child => child.iterHandles());\n      return chain(this.handles, new ChainIterator<HTMLDivElement>(children));\n    }\n\n    /**\n     * Find the tab layout node which contains the given widget.\n     */\n    findTabNode(widget: Widget): TabLayoutNode | null {\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let result = this.children[i].findTabNode(widget);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Find the split layout node which contains the given handle.\n     */\n    findSplitNode(handle: HTMLDivElement): { index: number, node: SplitLayoutNode } | null {\n      let index = this.handles.indexOf(handle);\n      if (index !== -1) {\n        return { index, node: this };\n      }\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let result = this.children[i].findSplitNode(handle);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Find the first tab layout node in a layout tree.\n     */\n    findFirstTabNode(): TabLayoutNode | null {\n      if (this.children.length === 0) {\n        return null;\n      }\n      return this.children[0].findFirstTabNode();\n    }\n\n    /**\n     * Find the tab layout node which contains the local point.\n     */\n    hitTestTabNodes(x: number, y: number): TabLayoutNode | null {\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let result = this.children[i].hitTestTabNodes(x, y);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Create a configuration object for the layout tree.\n     */\n    createConfig(): DockLayout.ISplitAreaConfig {\n      let orientation = this.orientation;\n      let sizes = this.createNormalizedSizes();\n      let children = this.children.map(child => child.createConfig());\n      return { type: 'split-area', orientation, children, sizes };\n    }\n\n    /**\n     * Sync the visibility and orientation of the handles.\n     */\n    syncHandles(): void {\n      each(this.handles, (handle, i) => {\n        handle.setAttribute('data-orientation', this.orientation);\n        if (i === this.handles.length - 1) {\n          handle.classList.add('lm-mod-hidden');\n          /* <DEPRECATED> */\n          handle.classList.add('p-mod-hidden');\n          /* </DEPRECATED> */\n        } else {\n          handle.classList.remove('lm-mod-hidden');\n          /* <DEPRECATED> */\n          handle.classList.remove('p-mod-hidden');\n          /* </DEPRECATED> */\n        }\n      });\n    }\n\n    /**\n     * Hold the current sizes of the box sizers.\n     *\n     * This sets the size hint of each sizer to its current size.\n     */\n    holdSizes(): void {\n      each(this.sizers, sizer => { sizer.sizeHint = sizer.size; });\n    }\n\n    /**\n     * Recursively hold all of the sizes in the layout tree.\n     *\n     * This ignores the sizers of tab layout nodes.\n     */\n    holdAllSizes(): void {\n      each(this.children, child => child.holdAllSizes());\n      this.holdSizes();\n    }\n\n    /**\n     * Normalize the sizes of the split layout node.\n     */\n    normalizeSizes(): void {\n      // Bail early if the sizers are empty.\n      let n = this.sizers.length;\n      if (n === 0) {\n        return;\n      }\n\n      // Hold the current sizes of the sizers.\n      this.holdSizes();\n\n      // Compute the sum of the sizes.\n      let sum = reduce(this.sizers, (v, sizer) => v + sizer.sizeHint, 0);\n\n      // Normalize the sizes based on the sum.\n      if (sum === 0) {\n        each(this.sizers, sizer => {\n          sizer.size = sizer.sizeHint = 1 / n;\n        });\n      } else {\n        each(this.sizers, sizer => {\n          sizer.size = sizer.sizeHint /= sum;\n        });\n      }\n\n      // Mark the sizes as normalized.\n      this.normalized = true;\n    }\n\n    /**\n     * Snap the normalized sizes of the split layout node.\n     */\n    createNormalizedSizes(): number[] {\n      // Bail early if the sizers are empty.\n      let n = this.sizers.length;\n      if (n === 0) {\n        return [];\n      }\n\n      // Grab the current sizes of the sizers.\n      let sizes = this.sizers.map(sizer => sizer.size);\n\n      // Compute the sum of the sizes.\n      let sum = reduce(sizes, (v, size) => v + size, 0);\n\n      // Normalize the sizes based on the sum.\n      if (sum === 0) {\n        each(sizes, (size, i) => { sizes[i] = 1 / n; });\n      } else {\n        each(sizes, (size, i) => { sizes[i] = size / sum; });\n      }\n\n      // Return the normalized sizes.\n      return sizes;\n    }\n\n    /**\n     * Fit the layout tree.\n     */\n    fit(spacing: number, items: ItemMap): ElementExt.ISizeLimits {\n      // Compute the required fixed space.\n      let horizontal = this.orientation === 'horizontal';\n      let fixed = Math.max(0, this.children.length - 1) * spacing;\n\n      // Set up the limit variables.\n      let minWidth = horizontal ? fixed : 0;\n      let minHeight = horizontal ? 0 : fixed;\n      let maxWidth = Infinity;\n      let maxHeight = Infinity;\n\n      // Fit the children and update the limits.\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let limits = this.children[i].fit(spacing, items);\n        if (horizontal) {\n          minHeight = Math.max(minHeight, limits.minHeight);\n          minWidth += limits.minWidth;\n          this.sizers[i].minSize = limits.minWidth;\n        } else {\n          minWidth = Math.max(minWidth, limits.minWidth);\n          minHeight += limits.minHeight;\n          this.sizers[i].minSize = limits.minHeight;\n        }\n      }\n\n      // Return the computed limits for the layout node.\n      return { minWidth, minHeight, maxWidth, maxHeight };\n    }\n\n    /**\n     * Update the layout tree.\n     */\n    update(left: number, top: number, width: number, height: number, spacing: number, items: ItemMap): void {\n      // Compute the available layout space.\n      let horizontal = this.orientation === 'horizontal';\n      let fixed = Math.max(0, this.children.length - 1) * spacing;\n      let space = Math.max(0, (horizontal ? width : height) - fixed);\n\n      // De-normalize the sizes if needed.\n      if (this.normalized) {\n        each(this.sizers, sizer => { sizer.sizeHint *= space; });\n        this.normalized = false;\n      }\n\n      // Distribute the layout space to the sizers.\n      BoxEngine.calc(this.sizers, space);\n\n      // Update the geometry of the child nodes and handles.\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let child = this.children[i];\n        let size = this.sizers[i].size;\n        let handleStyle = this.handles[i].style;\n        if (horizontal) {\n          child.update(left, top, size, height, spacing, items);\n          left += size;\n          handleStyle.top = `${top}px`;\n          handleStyle.left = `${left}px`;\n          handleStyle.width = `${spacing}px`;\n          handleStyle.height = `${height}px`;\n          left += spacing;\n        } else {\n          child.update(left, top, width, size, spacing, items);\n          top += size;\n          handleStyle.top = `${top}px`;\n          handleStyle.left = `${left}px`;\n          handleStyle.width = `${width}px`;\n          handleStyle.height = `${spacing}px`;\n          top += spacing;\n        }\n      }\n    }\n  }\n\n  /**\n   * Normalize a tab area config and collect the visited widgets.\n   */\n  function normalizeTabAreaConfig(config: DockLayout.ITabAreaConfig, widgetSet: Set<Widget>): DockLayout.ITabAreaConfig | null {\n    // Bail early if there is no content.\n    if (config.widgets.length === 0) {\n      return null;\n    }\n\n    // Setup the filtered widgets array.\n    let widgets: Widget[] = [];\n\n    // Filter the config for unique widgets.\n    each(config.widgets, widget => {\n      if (!widgetSet.has(widget)) {\n        widgetSet.add(widget);\n        widgets.push(widget);\n      }\n    });\n\n    // Bail if there are no effective widgets.\n    if (widgets.length === 0) {\n      return null;\n    }\n\n    // Normalize the current index.\n    let index = config.currentIndex;\n    if (index !== -1 && (index < 0 || index >= widgets.length)) {\n      index = 0;\n    }\n\n    // Return a normalized config object.\n    return { type: 'tab-area', widgets, currentIndex: index };\n  }\n\n  /**\n   * Normalize a split area config and collect the visited widgets.\n   */\n  function normalizeSplitAreaConfig(config: DockLayout.ISplitAreaConfig, widgetSet: Set<Widget>): DockLayout.AreaConfig | null {\n    // Set up the result variables.\n    let orientation = config.orientation;\n    let children: DockLayout.AreaConfig[] = [];\n    let sizes: number[] = [];\n\n    // Normalize the config children.\n    for (let i = 0, n = config.children.length; i < n; ++i) {\n      // Normalize the child config.\n      let child = normalizeAreaConfig(config.children[i], widgetSet);\n\n      // Ignore an empty child.\n      if (!child) {\n        continue;\n      }\n\n      // Add the child or hoist its content as appropriate.\n      if (child.type === 'tab-area' || child.orientation !== orientation) {\n        children.push(child);\n        sizes.push(Math.abs(config.sizes[i] || 0));\n      } else {\n        children.push(...child.children);\n        sizes.push(...child.sizes);\n      }\n    }\n\n    // Bail if there are no effective children.\n    if (children.length === 0) {\n      return null;\n    }\n\n    // If there is only one effective child, return that child.\n    if (children.length === 1) {\n      return children[0];\n    }\n\n    // Return a normalized config object.\n    return { type: 'split-area', orientation, children, sizes };\n  }\n\n  /**\n   * Convert a normalized tab area config into a layout tree.\n   */\n  function realizeTabAreaConfig(config: DockLayout.ITabAreaConfig, renderer: DockLayout.IRenderer): TabLayoutNode {\n    // Create the tab bar for the layout node.\n    let tabBar = renderer.createTabBar();\n\n    // Hide each widget and add it to the tab bar.\n    each(config.widgets, widget => {\n      widget.hide();\n      tabBar.addTab(widget.title);\n    });\n\n    // Set the current index of the tab bar.\n    tabBar.currentIndex = config.currentIndex;\n\n    // Return the new tab layout node.\n    return new TabLayoutNode(tabBar);\n  }\n\n  /**\n   * Convert a normalized split area config into a layout tree.\n   */\n  function realizeSplitAreaConfig(config: DockLayout.ISplitAreaConfig, renderer: DockLayout.IRenderer): SplitLayoutNode {\n    // Create the split layout node.\n    let node = new SplitLayoutNode(config.orientation);\n\n    // Add each child to the layout node.\n    each(config.children, (child, i) => {\n      // Create the child data for the layout node.\n      let childNode = realizeAreaConfig(child, renderer);\n      let sizer = createSizer(config.sizes[i]);\n      let handle = renderer.createHandle();\n\n      // Add the child data to the layout node.\n      node.children.push(childNode);\n      node.handles.push(handle);\n      node.sizers.push(sizer);\n\n      // Update the parent for the child node.\n      childNode.parent = node;\n    });\n\n    // Synchronize the handle state for the layout node.\n    node.syncHandles();\n\n    // Normalize the sizes for the layout node.\n    node.normalizeSizes();\n\n    // Return the new layout node.\n    return node;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Drag\n} from '@lumino/dragdrop';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  ElementDataset, ElementInlineStyle, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Title\n} from './title';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays titles as a single row or column of tabs.\n *\n * #### Notes\n * If CSS transforms are used to rotate nodes for vertically oriented\n * text, then tab dragging will not work correctly. The `tabsMovable`\n * property should be set to `false` when rotating nodes from CSS.\n */\nexport\nclass TabBar<T> extends Widget {\n  /**\n   * Construct a new tab bar.\n   *\n   * @param options - The options for initializing the tab bar.\n   */\n  constructor(options: TabBar.IOptions<T> = {}) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-TabBar');\n    /* <DEPRECATED> */\n    this.addClass('p-TabBar');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.tabsMovable = options.tabsMovable || false;\n    this.allowDeselect = options.allowDeselect || false;\n    this.insertBehavior = options.insertBehavior || 'select-tab-if-needed';\n    this.removeBehavior = options.removeBehavior || 'select-tab-after';\n    this.renderer = options.renderer || TabBar.defaultRenderer;\n    this._orientation = options.orientation || 'horizontal';\n    this.dataset['orientation'] = this._orientation;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    this._releaseMouse();\n    this._titles.length = 0;\n    this._previousTitle = null;\n    super.dispose();\n  }\n\n  /**\n   * A signal emitted when the current tab is changed.\n   *\n   * #### Notes\n   * This signal is emitted when the currently selected tab is changed\n   * either through user or programmatic interaction.\n   *\n   * Notably, this signal is not emitted when the index of the current\n   * tab changes due to tabs being inserted, removed, or moved. It is\n   * only emitted when the actual current tab node is changed.\n   */\n  get currentChanged(): ISignal<this, TabBar.ICurrentChangedArgs<T>> {\n    return this._currentChanged;\n  }\n\n  /**\n   * A signal emitted when a tab is moved by the user.\n   *\n   * #### Notes\n   * This signal is emitted when a tab is moved by user interaction.\n   *\n   * This signal is not emitted when a tab is moved programmatically.\n   */\n  get tabMoved(): ISignal<this, TabBar.ITabMovedArgs<T>> {\n    return this._tabMoved;\n  }\n\n  /**\n   * A signal emitted when a tab is clicked by the user.\n   *\n   * #### Notes\n   * If the clicked tab is not the current tab, the clicked tab will be\n   * made current and the `currentChanged` signal will be emitted first.\n   *\n   * This signal is emitted even if the clicked tab is the current tab.\n   */\n  get tabActivateRequested(): ISignal<this, TabBar.ITabActivateRequestedArgs<T>> {\n    return this._tabActivateRequested;\n  }\n\n  /**\n   * A signal emitted when a tab close icon is clicked.\n   *\n   * #### Notes\n   * This signal is not emitted unless the tab title is `closable`.\n   */\n  get tabCloseRequested(): ISignal<this, TabBar.ITabCloseRequestedArgs<T>> {\n    return this._tabCloseRequested;\n  }\n\n  /**\n   * A signal emitted when a tab is dragged beyond the detach threshold.\n   *\n   * #### Notes\n   * This signal is emitted when the user drags a tab with the mouse,\n   * and mouse is dragged beyond the detach threshold.\n   *\n   * The consumer of the signal should call `releaseMouse` and remove\n   * the tab in order to complete the detach.\n   *\n   * This signal is only emitted once per drag cycle.\n   */\n  get tabDetachRequested(): ISignal<this, TabBar.ITabDetachRequestedArgs<T>> {\n    return this._tabDetachRequested;\n  }\n\n  /**\n   * The renderer used by the tab bar.\n   */\n  readonly renderer: TabBar.IRenderer<T>;\n\n  /**\n   * Whether the tabs are movable by the user.\n   *\n   * #### Notes\n   * Tabs can always be moved programmatically.\n   */\n  tabsMovable: boolean;\n\n  /**\n   * Whether a tab can be deselected by the user.\n   *\n   * #### Notes\n   * Tabs can be always be deselected programmatically.\n   */\n  allowDeselect: boolean;\n\n  /**\n   * The selection behavior when inserting a tab.\n   */\n  insertBehavior: TabBar.InsertBehavior;\n\n  /**\n   * The selection behavior when removing a tab.\n   */\n  removeBehavior: TabBar.RemoveBehavior;\n\n  /**\n   * Get the currently selected title.\n   *\n   * #### Notes\n   * This will be `null` if no tab is selected.\n   */\n  get currentTitle(): Title<T> | null {\n    return this._titles[this._currentIndex] || null;\n  }\n\n  /**\n   * Set the currently selected title.\n   *\n   * #### Notes\n   * If the title does not exist, the title will be set to `null`.\n   */\n  set currentTitle(value: Title<T> | null) {\n    this.currentIndex = value ? this._titles.indexOf(value) : -1;\n  }\n\n  /**\n   * Get the index of the currently selected tab.\n   *\n   * #### Notes\n   * This will be `-1` if no tab is selected.\n   */\n  get currentIndex(): number {\n    return this._currentIndex;\n  }\n\n  /**\n   * Set the index of the currently selected tab.\n   *\n   * #### Notes\n   * If the value is out of range, the index will be set to `-1`.\n   */\n  set currentIndex(value: number) {\n    // Adjust for an out of range index.\n    if (value < 0 || value >= this._titles.length) {\n      value = -1;\n    }\n\n    // Bail early if the index will not change.\n    if (this._currentIndex === value) {\n      return;\n    }\n\n    // Look up the previous index and title.\n    let pi = this._currentIndex;\n    let pt = this._titles[pi] || null;\n\n    // Look up the current index and title.\n    let ci = value;\n    let ct = this._titles[ci] || null;\n\n    // Update the current index and previous title.\n    this._currentIndex = ci;\n    this._previousTitle = pt;\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // Emit the current changed signal.\n    this._currentChanged.emit({\n      previousIndex: pi, previousTitle: pt,\n      currentIndex: ci, currentTitle: ct\n    });\n  }\n\n  /**\n   * Get the orientation of the tab bar.\n   *\n   * #### Notes\n   * This controls whether the tabs are arranged in a row or column.\n   */\n  get orientation(): TabBar.Orientation {\n    return this._orientation;\n  }\n\n  /**\n   * Set the orientation of the tab bar.\n   *\n   * #### Notes\n   * This controls whether the tabs are arranged in a row or column.\n   */\n  set orientation(value: TabBar.Orientation) {\n    // Do nothing if the orientation does not change.\n    if (this._orientation === value) {\n      return;\n    }\n\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Toggle the orientation values.\n    this._orientation = value;\n    this.dataset['orientation'] = value;\n  }\n\n  /**\n   * A read-only array of the titles in the tab bar.\n   */\n  get titles(): ReadonlyArray<Title<T>> {\n    return this._titles;\n  }\n\n  /**\n   * The tab bar content node.\n   *\n   * #### Notes\n   * This is the node which holds the tab nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-TabBar-content')[0] as HTMLUListElement;\n  }\n\n  /**\n   * Add a tab to the end of the tab bar.\n   *\n   * @param value - The title which holds the data for the tab,\n   *   or an options object to convert to a title.\n   *\n   * @returns The title object added to the tab bar.\n   *\n   * #### Notes\n   * If the title is already added to the tab bar, it will be moved.\n   */\n  addTab(value: Title<T> | Title.IOptions<T>): Title<T> {\n    return this.insertTab(this._titles.length, value);\n  }\n\n  /**\n   * Insert a tab into the tab bar at the specified index.\n   *\n   * @param index - The index at which to insert the tab.\n   *\n   * @param value - The title which holds the data for the tab,\n   *   or an options object to convert to a title.\n   *\n   * @returns The title object added to the tab bar.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the tabs.\n   *\n   * If the title is already added to the tab bar, it will be moved.\n   */\n  insertTab(index: number, value: Title<T> | Title.IOptions<T>): Title<T> {\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Coerce the value to a title.\n    let title = Private.asTitle(value);\n\n    // Look up the index of the title.\n    let i = this._titles.indexOf(title);\n\n    // Clamp the insert index to the array bounds.\n    let j = Math.max(0, Math.min(index, this._titles.length));\n\n    // If the title is not in the array, insert it.\n    if (i === -1) {\n      // Insert the title into the array.\n      ArrayExt.insert(this._titles, j, title);\n\n      // Connect to the title changed signal.\n      title.changed.connect(this._onTitleChanged, this);\n\n      // Schedule an update of the tabs.\n      this.update();\n\n      // Adjust the current index for the insert.\n      this._adjustCurrentForInsert(j, title);\n\n      // Return the title added to the tab bar.\n      return title;\n    }\n\n    // Otherwise, the title exists in the array and should be moved.\n\n    // Adjust the index if the location is at the end of the array.\n    if (j === this._titles.length) {\n      j--;\n    }\n\n    // Bail if there is no effective move.\n    if (i === j) {\n      return title;\n    }\n\n    // Move the title to the new location.\n    ArrayExt.move(this._titles, i, j);\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // Adjust the current index for the move.\n    this._adjustCurrentForMove(i, j);\n\n    // Return the title added to the tab bar.\n    return title;\n  }\n\n  /**\n   * Remove a tab from the tab bar.\n   *\n   * @param title - The title for the tab to remove.\n   *\n   * #### Notes\n   * This is a no-op if the title is not in the tab bar.\n   */\n  removeTab(title: Title<T>): void {\n    this.removeTabAt(this._titles.indexOf(title));\n  }\n\n  /**\n   * Remove the tab at a given index from the tab bar.\n   *\n   * @param index - The index of the tab to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeTabAt(index: number): void {\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Remove the title from the array.\n    let title = ArrayExt.removeAt(this._titles, index);\n\n    // Bail if the index is out of range.\n    if (!title) {\n      return;\n    }\n\n    // Disconnect from the title changed signal.\n    title.changed.disconnect(this._onTitleChanged, this);\n\n    // Clear the previous title if it's being removed.\n    if (title === this._previousTitle) {\n      this._previousTitle = null;\n    }\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // Adjust the current index for the remove.\n    this._adjustCurrentForRemove(index, title);\n  }\n\n  /**\n   * Remove all tabs from the tab bar.\n   */\n  clearTabs(): void {\n    // Bail if there is nothing to remove.\n    if (this._titles.length === 0) {\n      return;\n    }\n\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Disconnect from the title changed signals.\n    for (let title of this._titles) {\n      title.changed.disconnect(this._onTitleChanged, this);\n    }\n\n    // Get the current index and title.\n    let pi = this.currentIndex;\n    let pt = this.currentTitle;\n\n    // Reset the current index and previous title.\n    this._currentIndex = -1;\n    this._previousTitle = null;\n\n    // Clear the title array.\n    this._titles.length = 0;\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // If no tab was selected, there's nothing else to do.\n    if (pi === -1) {\n      return;\n    }\n\n    // Emit the current changed signal.\n    this._currentChanged.emit({\n      previousIndex: pi, previousTitle: pt,\n      currentIndex: -1, currentTitle: null\n    });\n  }\n\n  /**\n   * Release the mouse and restore the non-dragged tab positions.\n   *\n   * #### Notes\n   * This will cause the tab bar to stop handling mouse events and to\n   * restore the tabs to their non-dragged positions.\n   */\n  releaseMouse(): void {\n    this._releaseMouse();\n  }\n\n  /**\n   * Handle the DOM events for the tab bar.\n   *\n   * @param event - The DOM event sent to the tab bar.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the tab bar's DOM node.\n   *\n   * This should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('mousedown', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('mousedown', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let titles = this._titles;\n    let renderer = this.renderer;\n    let currentTitle = this.currentTitle;\n    let content = new Array<VirtualElement>(titles.length);\n    for (let i = 0, n = titles.length; i < n; ++i) {\n      let title = titles[i];\n      let current = title === currentTitle;\n      let zIndex = current ? n : n - i - 1;\n      content[i] = renderer.renderTab({ title, current, zIndex });\n    }\n    VirtualDOM.render(content, this.contentNode);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the tab bar.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop all input events during drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Release the mouse if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      this._releaseMouse();\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the tab bar.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if it's not a left or middle mouse press.\n    if (event.button !== 0 && event.button !== 1) {\n      return;\n    }\n\n    // Do nothing if a drag is in progress.\n    if (this._dragData) {\n      return;\n    }\n\n    // Lookup the tab nodes.\n    let tabs = this.contentNode.children;\n\n    // Find the index of the pressed tab.\n    let index = ArrayExt.findFirstIndex(tabs, tab => {\n      return ElementExt.hitTest(tab, event.clientX, event.clientY);\n    });\n\n    // Do nothing if the press is not on a tab.\n    if (index === -1) {\n      return;\n    }\n\n    // Pressing on a tab stops the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Initialize the non-measured parts of the drag data.\n    this._dragData = {\n      tab: tabs[index] as HTMLElement,\n      index: index,\n      pressX: event.clientX,\n      pressY: event.clientY,\n      tabPos: -1,\n      tabSize: -1,\n      tabPressPos: -1,\n      targetIndex: -1,\n      tabLayout: null,\n      contentRect: null,\n      override: null,\n      dragActive: false,\n      dragAborted: false,\n      detachRequested: false\n    };\n\n    // Add the document mouse up listener.\n    document.addEventListener('mouseup', this, true);\n\n    // Do nothing else if the middle button is clicked.\n    if (event.button === 1) {\n      return;\n    }\n\n    // Do nothing else if the close icon is clicked.\n    let icon = tabs[index].querySelector(this.renderer.closeIconSelector);\n    if (icon && icon.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    // Add the extra listeners if the tabs are movable.\n    if (this.tabsMovable) {\n      document.addEventListener('mousemove', this, true);\n      document.addEventListener('keydown', this, true);\n      document.addEventListener('contextmenu', this, true);\n    }\n\n    // Update the current index as appropriate.\n    if (this.allowDeselect && this.currentIndex === index) {\n      this.currentIndex = -1;\n    } else {\n      this.currentIndex = index;\n    }\n\n    // Do nothing else if there is no current tab.\n    if (this.currentIndex === -1) {\n      return;\n    }\n\n    // Emit the tab activate request signal.\n    this._tabActivateRequested.emit({\n      index: this.currentIndex, title: this.currentTitle!\n    });\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the tab bar.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Do nothing if no drag is in progress.\n    let data = this._dragData;\n    if (!data) {\n      return;\n    }\n\n    // Suppress the event during a drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Lookup the tab nodes.\n    let tabs = this.contentNode.children;\n\n    // Bail early if the drag threshold has not been met.\n    if (!data.dragActive && !Private.dragExceeded(data, event)) {\n      return;\n    }\n\n    // Activate the drag if necessary.\n    if (!data.dragActive) {\n      // Fill in the rest of the drag data measurements.\n      let tabRect = data.tab.getBoundingClientRect();\n      if (this._orientation === 'horizontal') {\n        data.tabPos = data.tab.offsetLeft;\n        data.tabSize = tabRect.width;\n        data.tabPressPos = data.pressX - tabRect.left;\n      } else {\n        data.tabPos = data.tab.offsetTop;\n        data.tabSize = tabRect.height;\n        data.tabPressPos = data.pressY - tabRect.top;\n      }\n      data.tabLayout = Private.snapTabLayout(tabs, this._orientation);\n      data.contentRect = this.contentNode.getBoundingClientRect();\n      data.override = Drag.overrideCursor('default');\n\n      // Add the dragging style classes.\n      data.tab.classList.add('lm-mod-dragging');\n      this.addClass('lm-mod-dragging');\n      /* <DEPRECATED> */\n      data.tab.classList.add('p-mod-dragging');\n      this.addClass('p-mod-dragging');\n      /* </DEPRECATED> */\n\n      // Mark the drag as active.\n      data.dragActive = true;\n    }\n\n    // Emit the detach requested signal if the threshold is exceeded.\n    if (!data.detachRequested && Private.detachExceeded(data, event)) {\n      // Only emit the signal once per drag cycle.\n      data.detachRequested = true;\n\n      // Setup the arguments for the signal.\n      let index = data.index;\n      let clientX = event.clientX;\n      let clientY = event.clientY;\n      let tab = tabs[index] as HTMLElement;\n      let title = this._titles[index];\n\n      // Emit the tab detach requested signal.\n      this._tabDetachRequested.emit({ index, title, tab, clientX, clientY });\n\n      // Bail if the signal handler aborted the drag.\n      if (data.dragAborted) {\n        return;\n      }\n    }\n\n    // Update the positions of the tabs.\n    Private.layoutTabs(tabs, data, event, this._orientation);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the document.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if it's not a left or middle mouse release.\n    if (event.button !== 0 && event.button !== 1) {\n      return;\n    }\n\n    // Do nothing if no drag is in progress.\n    const data = this._dragData;\n    if (!data) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Remove the extra mouse event listeners.\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n\n    // Handle a release when the drag is not active.\n    if (!data.dragActive) {\n      // Clear the drag data.\n      this._dragData = null;\n\n      // Lookup the tab nodes.\n      let tabs = this.contentNode.children;\n\n      // Find the index of the released tab.\n      let index = ArrayExt.findFirstIndex(tabs, tab => {\n        return ElementExt.hitTest(tab, event.clientX, event.clientY);\n      });\n\n      // Do nothing if the release is not on the original pressed tab.\n      if (index !== data.index) {\n        return;\n      }\n\n      // Ignore the release if the title is not closable.\n      let title = this._titles[index];\n      if (!title.closable) {\n        return;\n      }\n\n      // Emit the close requested signal if the middle button is released.\n      if (event.button === 1) {\n        this._tabCloseRequested.emit({ index, title });\n        return;\n      }\n\n      // Emit the close requested signal if the close icon was released.\n      let icon = tabs[index].querySelector(this.renderer.closeIconSelector);\n      if (icon && icon.contains(event.target as HTMLElement)) {\n        this._tabCloseRequested.emit({ index, title });\n        return;\n      }\n\n      // Otherwise, there is nothing left to do.\n      return;\n    }\n\n    // Do nothing if the left button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Position the tab at its final resting position.\n    Private.finalizeTabPosition(data, this._orientation);\n\n    // Remove the dragging class from the tab so it can be transitioned.\n    data.tab.classList.remove('lm-mod-dragging');\n    /* <DEPRECATED> */\n    data.tab.classList.remove('p-mod-dragging');\n    /* </DEPRECATED> */\n\n    // Parse the transition duration for releasing the tab.\n    let duration = Private.parseTransitionDuration(data.tab);\n\n    // Complete the release on a timer to allow the tab to transition.\n    setTimeout(() => {\n      // Do nothing if the drag has been aborted.\n      if (data.dragAborted) {\n        return;\n      }\n\n      // Clear the drag data reference.\n      this._dragData = null;\n\n      // Reset the positions of the tabs.\n      Private.resetTabPositions(this.contentNode.children, this._orientation);\n\n      // Clear the cursor grab.\n      data.override!.dispose();\n\n      // Remove the remaining dragging style.\n      this.removeClass('lm-mod-dragging');\n      /* <DEPRECATED> */\n      this.removeClass('p-mod-dragging');\n      /* </DEPRECATED> */\n\n      // If the tab was not moved, there is nothing else to do.\n      let i = data.index;\n      let j = data.targetIndex;\n      if (j === -1 || i === j) {\n        return;\n      }\n\n      // Move the title to the new locations.\n      ArrayExt.move(this._titles, i, j);\n\n      // Adjust the current index for the move.\n      this._adjustCurrentForMove(i, j);\n\n      // Emit the tab moved signal.\n      this._tabMoved.emit({\n        fromIndex: i, toIndex: j, title: this._titles[j]\n      });\n\n      // Update the tabs immediately to prevent flicker.\n      MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n    }, duration);\n  }\n\n  /**\n   * Release the mouse and restore the non-dragged tab positions.\n   */\n  private _releaseMouse(): void {\n    // Do nothing if no drag is in progress.\n    let data = this._dragData;\n    if (!data) {\n      return;\n    }\n\n    // Clear the drag data reference.\n    this._dragData = null;\n\n    // Remove the extra mouse listeners.\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n\n    // Indicate the drag has been aborted. This allows the mouse\n    // event handlers to return early when the drag is canceled.\n    data.dragAborted = true;\n\n    // If the drag is not active, there's nothing more to do.\n    if (!data.dragActive) {\n      return;\n    }\n\n    // Reset the tabs to their non-dragged positions.\n    Private.resetTabPositions(this.contentNode.children, this._orientation);\n\n    // Clear the cursor override.\n    data.override!.dispose();\n\n    // Clear the dragging style classes.\n    data.tab.classList.remove('lm-mod-dragging');\n    this.removeClass('lm-mod-dragging');\n    /* <DEPRECATED> */\n    data.tab.classList.remove('p-mod-dragging');\n    this.removeClass('p-mod-dragging');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Adjust the current index for a tab insert operation.\n   *\n   * This method accounts for the tab bar's insertion behavior when\n   * adjusting the current index and emitting the changed signal.\n   */\n  private _adjustCurrentForInsert(i: number, title: Title<T>): void {\n    // Lookup commonly used variables.\n    let ct = this.currentTitle;\n    let ci = this._currentIndex;\n    let bh = this.insertBehavior;\n\n    // Handle the behavior where the new tab is always selected,\n    // or the behavior where the new tab is selected if needed.\n    if (bh === 'select-tab' || (bh === 'select-tab-if-needed' && ci === -1)) {\n      this._currentIndex = i;\n      this._previousTitle = ct;\n      this._currentChanged.emit({\n        previousIndex: ci, previousTitle: ct,\n        currentIndex: i, currentTitle: title\n      });\n      return;\n    }\n\n    // Otherwise, silently adjust the current index if needed.\n    if (ci >= i) {\n      this._currentIndex++;\n    }\n  }\n\n  /**\n   * Adjust the current index for a tab move operation.\n   *\n   * This method will not cause the actual current tab to change.\n   * It silently adjusts the index to account for the given move.\n   */\n  private _adjustCurrentForMove(i: number, j: number): void {\n    if (this._currentIndex === i) {\n      this._currentIndex = j;\n    } else if (this._currentIndex < i && this._currentIndex >= j) {\n      this._currentIndex++;\n    } else if (this._currentIndex > i && this._currentIndex <= j) {\n      this._currentIndex--;\n    }\n  }\n\n  /**\n   * Adjust the current index for a tab remove operation.\n   *\n   * This method accounts for the tab bar's remove behavior when\n   * adjusting the current index and emitting the changed signal.\n   */\n  private _adjustCurrentForRemove(i: number, title: Title<T>): void {\n    // Lookup commonly used variables.\n    let ci = this._currentIndex;\n    let bh = this.removeBehavior;\n\n    // Silently adjust the index if the current tab is not removed.\n    if (ci !== i) {\n      if (ci > i) {\n        this._currentIndex--;\n      }\n      return;\n    }\n\n    // No tab gets selected if the tab bar is empty.\n    if (this._titles.length === 0) {\n      this._currentIndex = -1;\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: -1, currentTitle: null\n      });\n      return;\n    }\n\n    // Handle behavior where the next sibling tab is selected.\n    if (bh === 'select-tab-after') {\n      this._currentIndex = Math.min(i, this._titles.length - 1);\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: this._currentIndex, currentTitle: this.currentTitle\n      });\n      return;\n    }\n\n    // Handle behavior where the previous sibling tab is selected.\n    if (bh === 'select-tab-before') {\n      this._currentIndex = Math.max(0, i - 1);\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: this._currentIndex, currentTitle: this.currentTitle\n      });\n      return;\n    }\n\n    // Handle behavior where the previous history tab is selected.\n    if (bh === 'select-previous-tab') {\n      if (this._previousTitle) {\n        this._currentIndex = this._titles.indexOf(this._previousTitle);\n        this._previousTitle = null;\n      } else {\n        this._currentIndex = Math.min(i, this._titles.length - 1);\n      }\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: this._currentIndex, currentTitle: this.currentTitle\n      });\n      return;\n    }\n\n    // Otherwise, no tab gets selected.\n    this._currentIndex = -1;\n    this._currentChanged.emit({\n      previousIndex: i, previousTitle: title,\n      currentIndex: -1, currentTitle: null\n    });\n  }\n\n  /**\n   * Handle the `changed` signal of a title object.\n   */\n  private _onTitleChanged(sender: Title<T>): void {\n    this.update();\n  }\n\n  private _currentIndex = -1;\n  private _titles: Title<T>[] = [];\n  private _orientation: TabBar.Orientation;\n  private _previousTitle: Title<T> | null = null;\n  private _dragData: Private.IDragData | null = null;\n  private _tabMoved = new Signal<this, TabBar.ITabMovedArgs<T>>(this);\n  private _currentChanged = new Signal<this, TabBar.ICurrentChangedArgs<T>>(this);\n  private _tabCloseRequested = new Signal<this, TabBar.ITabCloseRequestedArgs<T>>(this);\n  private _tabDetachRequested = new Signal<this, TabBar.ITabDetachRequestedArgs<T>>(this);\n  private _tabActivateRequested = new Signal<this, TabBar.ITabActivateRequestedArgs<T>>(this);\n}\n\n\n/**\n * The namespace for the `TabBar` class statics.\n */\nexport\nnamespace TabBar {\n  /**\n   * A type alias for a tab bar orientation.\n   */\n  export\n  type Orientation = (\n    /**\n     * The tabs are arranged in a single row, left-to-right.\n     *\n     * The tab text orientation is horizontal.\n     */\n    'horizontal' |\n\n    /**\n     * The tabs are arranged in a single column, top-to-bottom.\n     *\n     * The tab text orientation is horizontal.\n     */\n    'vertical'\n  );\n\n  /**\n   * A type alias for the selection behavior on tab insert.\n   */\n  export\n  type InsertBehavior = (\n    /**\n     * The selected tab will not be changed.\n     */\n    'none' |\n\n    /**\n     * The inserted tab will be selected.\n     */\n    'select-tab' |\n\n    /**\n     * The inserted tab will be selected if the current tab is null.\n     */\n    'select-tab-if-needed'\n  );\n\n  /**\n   * A type alias for the selection behavior on tab remove.\n   */\n  export\n  type RemoveBehavior = (\n    /**\n     * No tab will be selected.\n     */\n    'none' |\n\n    /**\n     * The tab after the removed tab will be selected if possible.\n     */\n    'select-tab-after' |\n\n    /**\n     * The tab before the removed tab will be selected if possible.\n     */\n    'select-tab-before' |\n\n    /**\n     * The previously selected tab will be selected if possible.\n     */\n    'select-previous-tab'\n  );\n\n  /**\n   * An options object for creating a tab bar.\n   */\n  export\n  interface IOptions<T> {\n    /**\n     * The layout orientation of the tab bar.\n     *\n     * The default is `horizontal`.\n     */\n    orientation?: TabBar.Orientation;\n\n    /**\n     * Whether the tabs are movable by the user.\n     *\n     * The default is `false`.\n     */\n    tabsMovable?: boolean;\n\n    /**\n     * Whether a tab can be deselected by the user.\n     *\n     * The default is `false`.\n     */\n    allowDeselect?: boolean;\n\n    /**\n     * The selection behavior when inserting a tab.\n     *\n     * The default is `'select-tab-if-needed'`.\n     */\n    insertBehavior?: TabBar.InsertBehavior;\n\n    /**\n     * The selection behavior when removing a tab.\n     *\n     * The default is `'select-tab-after'`.\n     */\n    removeBehavior?: TabBar.RemoveBehavior;\n\n    /**\n     * A renderer to use with the tab bar.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer<T>;\n  }\n\n  /**\n   * The arguments object for the `currentChanged` signal.\n   */\n  export\n  interface ICurrentChangedArgs<T> {\n    /**\n     * The previously selected index.\n     */\n    readonly previousIndex: number;\n\n    /**\n     * The previously selected title.\n     */\n    readonly previousTitle: Title<T> | null;\n\n    /**\n     * The currently selected index.\n     */\n    readonly currentIndex: number;\n\n    /**\n     * The currently selected title.\n     */\n    readonly currentTitle: Title<T> | null;\n  }\n\n  /**\n   * The arguments object for the `tabMoved` signal.\n   */\n  export\n  interface ITabMovedArgs<T> {\n    /**\n     * The previous index of the tab.\n     */\n    readonly fromIndex: number;\n\n    /**\n     * The current index of the tab.\n     */\n    readonly toIndex: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n  }\n\n  /**\n   * The arguments object for the `tabActivateRequested` signal.\n   */\n  export\n  interface ITabActivateRequestedArgs<T> {\n    /**\n     * The index of the tab to activate.\n     */\n    readonly index: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n  }\n\n  /**\n   * The arguments object for the `tabCloseRequested` signal.\n   */\n  export\n  interface ITabCloseRequestedArgs<T> {\n    /**\n     * The index of the tab to close.\n     */\n    readonly index: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n  }\n\n  /**\n   * The arguments object for the `tabDetachRequested` signal.\n   */\n  export\n  interface ITabDetachRequestedArgs<T> {\n    /**\n     * The index of the tab to detach.\n     */\n    readonly index: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n\n    /**\n     * The node representing the tab.\n     */\n    readonly tab: HTMLElement;\n\n    /**\n     * The current client X position of the mouse.\n     */\n    readonly clientX: number;\n\n    /**\n     * The current client Y position of the mouse.\n     */\n    readonly clientY: number;\n  }\n\n  /**\n   * An object which holds the data to render a tab.\n   */\n  export\n  interface IRenderData<T> {\n    /**\n     * The title associated with the tab.\n     */\n    readonly title: Title<T>;\n\n    /**\n     * Whether the tab is the current tab.\n     */\n    readonly current: boolean;\n\n    /**\n     * The z-index for the tab.\n     */\n    readonly zIndex: number;\n  }\n\n  /**\n   * A renderer for use with a tab bar.\n   */\n  export\n  interface IRenderer<T> {\n    /**\n     * A selector which matches the close icon node in a tab.\n     */\n    readonly closeIconSelector: string;\n\n    /**\n     * Render the virtual element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab.\n     */\n    renderTab(data: IRenderData<T>): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   *\n   * #### Notes\n   * Subclasses are free to reimplement rendering methods as needed.\n   */\n  export\n  class Renderer implements IRenderer<any> {\n    /**\n     * Construct a new renderer.\n     */\n    constructor() { }\n\n    /**\n     * A selector which matches the close icon node in a tab.\n     */\n    readonly closeIconSelector = '.lm-TabBar-tabCloseIcon';\n\n    /**\n     * Render the virtual element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab.\n     */\n    renderTab(data: IRenderData<any>): VirtualElement {\n      let title = data.title.caption;\n      let key = this.createTabKey(data);\n      let style = this.createTabStyle(data);\n      let className = this.createTabClass(data);\n      let dataset = this.createTabDataset(data);\n      return (\n        h.li({ key, className, title, style, dataset },\n          this.renderIcon(data),\n          this.renderLabel(data),\n          this.renderCloseIcon(data)\n        )\n      );\n    }\n\n    /**\n     * Render the icon element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab icon.\n     */\n    renderIcon(data: IRenderData<any>): VirtualElement {\n      const { title } = data;\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof title.icon === 'string') {\n        return h.div({className}, title.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if title.icon is undefined, it will be ignored\n      return h.div({className}, title.icon!, title.iconLabel);\n    }\n\n    /**\n     * Render the label element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab label.\n     */\n    renderLabel(data: IRenderData<any>): VirtualElement {\n      return h.div({\n        className: 'lm-TabBar-tabLabel'\n          /* <DEPRECATED> */\n          + ' p-TabBar-tabLabel'\n          /* </DEPRECATED> */\n      }, data.title.label);\n    }\n\n    /**\n     * Render the close icon element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab close icon.\n     */\n    renderCloseIcon(data: IRenderData<any>): VirtualElement {\n      return h.div({\n        className: 'lm-TabBar-tabCloseIcon'\n          /* <DEPRECATED> */\n          + ' p-TabBar-tabCloseIcon'\n          /* </DEPRECATED> */\n      });\n    }\n\n    /**\n     * Create a unique render key for the tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The unique render key for the tab.\n     *\n     * #### Notes\n     * This method caches the key against the tab title the first time\n     * the key is generated. This enables efficient rendering of moved\n     * tabs and avoids subtle hover style artifacts.\n     */\n    createTabKey(data: IRenderData<any>): string {\n      let key = this._tabKeys.get(data.title);\n      if (key === undefined) {\n        key = `tab-key-${this._tabID++}`;\n        this._tabKeys.set(data.title, key);\n      }\n      return key;\n    }\n\n    /**\n     * Create the inline style object for a tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The inline style data for the tab.\n     */\n    createTabStyle(data: IRenderData<any>): ElementInlineStyle {\n      return { zIndex: `${data.zIndex}` };\n    }\n\n    /**\n     * Create the class name for the tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The full class name for the tab.\n     */\n    createTabClass(data: IRenderData<any>): string {\n      let name = 'lm-TabBar-tab';\n      /* <DEPRECATED> */\n      name += ' p-TabBar-tab';\n      /* </DEPRECATED> */\n      if (data.title.className) {\n        name += ` ${data.title.className}`;\n      }\n      if (data.title.closable) {\n        name += ' lm-mod-closable';\n        /* <DEPRECATED> */\n        name += ' p-mod-closable';\n        /* </DEPRECATED> */\n      }\n      if (data.current) {\n        name += ' lm-mod-current';\n        /* <DEPRECATED> */\n        name += ' p-mod-current';\n        /* </DEPRECATED> */\n      }\n      return name;\n    }\n\n    /**\n     * Create the dataset for a tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The dataset for the tab.\n     */\n    createTabDataset(data: IRenderData<any>): ElementDataset {\n      return data.title.dataset;\n    }\n\n    /**\n     * Create the class name for the tab icon.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The full class name for the tab icon.\n     */\n    createIconClass(data: IRenderData<any>): string {\n      let name = 'lm-TabBar-tabIcon';\n      /* <DEPRECATED> */\n      name += ' p-TabBar-tabIcon';\n      /* </DEPRECATED> */\n      let extra = data.title.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    private _tabID = 0;\n    private _tabKeys = new WeakMap<Title<any>, string>();\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The start drag distance threshold.\n   */\n  export\n  const DRAG_THRESHOLD = 5;\n\n  /**\n   * The detach distance threshold.\n   */\n  export\n  const DETACH_THRESHOLD = 20;\n\n  /**\n   * A struct which holds the drag data for a tab bar.\n   */\n  export\n  interface IDragData {\n    /**\n     * The tab node being dragged.\n     */\n    tab: HTMLElement;\n\n    /**\n     * The index of the tab being dragged.\n     */\n    index: number;\n\n    /**\n     * The mouse press client X position.\n     */\n    pressX: number;\n\n    /**\n     * The mouse press client Y position.\n     */\n    pressY: number;\n\n    /**\n     * The offset left/top of the tab being dragged.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    tabPos: number;\n\n    /**\n     * The offset width/height of the tab being dragged.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    tabSize: number;\n\n    /**\n     * The original mouse X/Y position in tab coordinates.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    tabPressPos: number;\n\n    /**\n     * The tab target index upon mouse release.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    targetIndex: number;\n\n    /**\n     * The array of tab layout objects snapped at drag start.\n     *\n     * This will be `null` if the drag is not active.\n     */\n    tabLayout: ITabLayout[] | null;\n\n    /**\n     * The bounding client rect of the tab bar content node.\n     *\n     * This will be `null` if the drag is not active.\n     */\n    contentRect: ClientRect | null;\n\n    /**\n     * The disposable to clean up the cursor override.\n     *\n     * This will be `null` if the drag is not active.\n     */\n    override: IDisposable | null;\n\n    /**\n     * Whether the drag is currently active.\n     */\n    dragActive: boolean;\n\n    /**\n     * Whether the drag has been aborted.\n     */\n    dragAborted: boolean;\n\n    /**\n     * Whether a detach request as been made.\n     */\n    detachRequested: boolean;\n  }\n\n  /**\n   * An object which holds layout data for a tab.\n   */\n  export\n  interface ITabLayout {\n    /**\n     * The left/top margin value for the tab.\n     */\n    margin: number;\n\n    /**\n     * The offset left/top position of the tab.\n     */\n    pos: number;\n\n    /**\n     * The offset width/height of the tab.\n     */\n    size: number;\n  }\n\n  /**\n   * Create the DOM node for a tab bar.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let content = document.createElement('ul');\n    content.className = 'lm-TabBar-content';\n    /* <DEPRECATED> */\n    content.classList.add('p-TabBar-content');\n    /* </DEPRECATED> */\n    node.appendChild(content);\n    return node;\n  }\n\n  /**\n   * Coerce a title or options into a real title.\n   */\n  export\n  function asTitle<T>(value: Title<T> | Title.IOptions<T>): Title<T> {\n    return value instanceof Title ? value : new Title<T>(value);\n  }\n\n  /**\n   * Parse the transition duration for a tab node.\n   */\n  export\n  function parseTransitionDuration(tab: HTMLElement): number {\n    let style = window.getComputedStyle(tab);\n    return 1000 * (parseFloat(style.transitionDuration!) || 0);\n  }\n\n  /**\n   * Get a snapshot of the current tab layout values.\n   */\n  export\n  function snapTabLayout(tabs: HTMLCollection, orientation: TabBar.Orientation): ITabLayout[] {\n    let layout = new Array<ITabLayout>(tabs.length);\n    for (let i = 0, n = tabs.length; i < n; ++i) {\n      let node = tabs[i] as HTMLElement;\n      let style = window.getComputedStyle(node);\n      if (orientation === 'horizontal') {\n        layout[i] = {\n          pos: node.offsetLeft,\n          size: node.offsetWidth,\n          margin: parseFloat(style.marginLeft!) || 0\n        };\n      } else {\n        layout[i] = {\n          pos: node.offsetTop,\n          size: node.offsetHeight,\n          margin: parseFloat(style.marginTop!) || 0\n        };\n      }\n    }\n    return layout;\n  }\n\n  /**\n   * Test if the event exceeds the drag threshold.\n   */\n  export\n  function dragExceeded(data: IDragData, event: MouseEvent): boolean {\n    let dx = Math.abs(event.clientX - data.pressX);\n    let dy = Math.abs(event.clientY - data.pressY);\n    return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n  }\n\n  /**\n   * Test if the event exceeds the drag detach threshold.\n   */\n  export\n  function detachExceeded(data: IDragData, event: MouseEvent): boolean {\n    let rect = data.contentRect!;\n    return (\n      (event.clientX < rect.left - DETACH_THRESHOLD) ||\n      (event.clientX >= rect.right + DETACH_THRESHOLD) ||\n      (event.clientY < rect.top - DETACH_THRESHOLD) ||\n      (event.clientY >= rect.bottom + DETACH_THRESHOLD)\n    );\n  }\n\n  /**\n   * Update the relative tab positions and computed target index.\n   */\n  export\n  function layoutTabs(tabs: HTMLCollection, data: IDragData, event: MouseEvent, orientation: TabBar.Orientation): void {\n    // Compute the orientation-sensitive values.\n    let pressPos: number;\n    let localPos: number;\n    let clientPos: number;\n    let clientSize: number;\n    if (orientation === 'horizontal') {\n      pressPos = data.pressX;\n      localPos = event.clientX - data.contentRect!.left;\n      clientPos = event.clientX;\n      clientSize = data.contentRect!.width;\n    } else {\n      pressPos = data.pressY;\n      localPos = event.clientY - data.contentRect!.top;\n      clientPos = event.clientY;\n      clientSize = data.contentRect!.height;\n    }\n\n    // Compute the target data.\n    let targetIndex = data.index;\n    let targetPos = localPos - data.tabPressPos;\n    let targetEnd = targetPos + data.tabSize;\n\n    // Update the relative tab positions.\n    for (let i = 0, n = tabs.length; i < n; ++i) {\n      let pxPos: string;\n      let layout = data.tabLayout![i];\n      let threshold = layout.pos + (layout.size >> 1);\n      if (i < data.index && targetPos < threshold) {\n        pxPos = `${data.tabSize + data.tabLayout![i + 1].margin}px`;\n        targetIndex = Math.min(targetIndex, i);\n      } else if (i > data.index && targetEnd > threshold) {\n        pxPos = `${-data.tabSize - layout.margin}px`;\n        targetIndex = Math.max(targetIndex, i);\n      } else if (i === data.index) {\n        let ideal = clientPos - pressPos;\n        let limit = clientSize - (data.tabPos + data.tabSize);\n        pxPos = `${Math.max(-data.tabPos, Math.min(ideal, limit))}px`;\n      } else {\n        pxPos = '';\n      }\n      if (orientation === 'horizontal') {\n        (tabs[i] as HTMLElement).style.left = pxPos;\n      } else {\n        (tabs[i] as HTMLElement).style.top = pxPos;\n      }\n    }\n\n    // Update the computed target index.\n    data.targetIndex = targetIndex;\n  }\n\n  /**\n   * Position the drag tab at its final resting relative position.\n   */\n  export\n  function finalizeTabPosition(data: IDragData, orientation: TabBar.Orientation): void {\n    // Compute the orientation-sensitive client size.\n    let clientSize: number;\n    if (orientation === 'horizontal') {\n      clientSize = data.contentRect!.width;\n    } else {\n      clientSize = data.contentRect!.height;\n    }\n\n    // Compute the ideal final tab position.\n    let ideal: number;\n    if (data.targetIndex === data.index) {\n      ideal = 0;\n    } else if (data.targetIndex > data.index) {\n      let tgt = data.tabLayout![data.targetIndex];\n      ideal = tgt.pos + tgt.size - data.tabSize - data.tabPos;\n    } else {\n      let tgt = data.tabLayout![data.targetIndex];\n      ideal = tgt.pos - data.tabPos;\n    }\n\n    // Compute the tab position limit.\n    let limit = clientSize - (data.tabPos + data.tabSize);\n    let final = Math.max(-data.tabPos, Math.min(ideal, limit));\n\n    // Set the final orientation-sensitive position.\n    if (orientation === 'horizontal') {\n      data.tab.style.left = `${final}px`;\n    } else {\n      data.tab.style.top = `${final}px`;\n    }\n  }\n\n  /**\n   * Reset the relative positions of the given tabs.\n   */\n  export\n  function resetTabPositions(tabs: HTMLCollection, orientation: TabBar.Orientation): void {\n    each(tabs, tab => {\n      if (orientation === 'horizontal') {\n        (tab as HTMLElement).style.left = '';\n      } else {\n        (tab as HTMLElement).style.top = '';\n      }\n    });\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterator, each, find, toArray\n} from '@lumino/algorithm';\n\nimport {\n  MimeData\n} from '@lumino/coreutils';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt, Platform\n} from '@lumino/domutils';\n\nimport {\n  Drag, IDragEvent\n} from '@lumino/dragdrop';\n\nimport {\n  ConflatableMessage, Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  DockLayout\n} from './docklayout';\n\nimport {\n  TabBar\n} from './tabbar';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which provides a flexible docking area for widgets.\n */\nexport\nclass DockPanel extends Widget {\n  /**\n   * Construct a new dock panel.\n   *\n   * @param options - The options for initializing the panel.\n   */\n  constructor(options: DockPanel.IOptions = {}) {\n    super();\n    this.addClass('lm-DockPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-DockPanel');\n    /* </DEPRECATED> */\n    this._mode = options.mode || 'multiple-document';\n    this._renderer = options.renderer || DockPanel.defaultRenderer;\n    this._edges = options.edges || Private.DEFAULT_EDGES;\n    if (options.tabsMovable !== undefined) {\n      this._tabsMovable = options.tabsMovable;\n    }\n\n    // Toggle the CSS mode attribute.\n    this.dataset['mode'] = this._mode;\n\n    // Create the delegate renderer for the layout.\n    let renderer: DockPanel.IRenderer = {\n      createTabBar: () => this._createTabBar(),\n      createHandle: () => this._createHandle()\n    };\n\n    // Set up the dock layout for the panel.\n    this.layout = new DockLayout({ renderer, spacing: options.spacing });\n\n    // Set up the overlay drop indicator.\n    this.overlay = options.overlay || new DockPanel.Overlay();\n    this.node.appendChild(this.overlay.node);\n  }\n\n  /**\n   * Dispose of the resources held by the panel.\n   */\n  dispose(): void {\n    // Ensure the mouse is released.\n    this._releaseMouse();\n\n    // Hide the overlay.\n    this.overlay.hide(0);\n\n    // Cancel a drag if one is in progress.\n    if (this._drag) {\n      this._drag.dispose();\n    }\n\n    // Dispose of the base class.\n    super.dispose();\n  }\n\n  /**\n   * A signal emitted when the layout configuration is modified.\n   *\n   * #### Notes\n   * This signal is emitted whenever the current layout configuration\n   * may have changed.\n   *\n   * This signal is emitted asynchronously in a collapsed fashion, so\n   * that multiple synchronous modifications results in only a single\n   * emit of the signal.\n   */\n  get layoutModified(): ISignal<this, void> {\n    return this._layoutModified;\n  }\n\n  /**\n   * The overlay used by the dock panel.\n   */\n  readonly overlay: DockPanel.IOverlay;\n\n  /**\n   * The renderer used by the dock panel.\n   */\n  get renderer(): DockPanel.IRenderer {\n    return (this.layout as DockLayout).renderer;\n  }\n\n  /**\n   * Get the spacing between the widgets.\n   */\n  get spacing(): number {\n    return (this.layout as DockLayout).spacing;\n  }\n\n  /**\n   * Set the spacing between the widgets.\n   */\n  set spacing(value: number) {\n    (this.layout as DockLayout).spacing = value;\n  }\n\n  /**\n   * Get the mode for the dock panel.\n   */\n  get mode(): DockPanel.Mode {\n    return this._mode;\n  }\n\n  /**\n   * Set the mode for the dock panel.\n   *\n   * #### Notes\n   * Changing the mode is a destructive operation with respect to the\n   * panel's layout configuration. If layout state must be preserved,\n   * save the current layout config before changing the mode.\n   */\n  set mode(value: DockPanel.Mode) {\n    // Bail early if the mode does not change.\n    if (this._mode === value) {\n      return;\n    }\n\n    // Update the internal mode.\n    this._mode = value;\n\n    // Toggle the CSS mode attribute.\n    this.dataset['mode'] = value;\n\n    // Get the layout for the panel.\n    let layout = this.layout as DockLayout;\n\n    // Configure the layout for the specified mode.\n    switch (value) {\n    case 'multiple-document':\n      each(layout.tabBars(), tabBar => { tabBar.show(); });\n      break;\n    case 'single-document':\n      layout.restoreLayout(Private.createSingleDocumentConfig(this));\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Whether the tabs can be dragged / moved at runtime.\n   */\n  get tabsMovable(): boolean {\n    return this._tabsMovable;\n  }\n\n  /**\n   * Enable / Disable draggable / movable tabs.\n   */\n  set tabsMovable(value: boolean) {\n    this._tabsMovable = value;\n    each(this.tabBars(), (tabbar) => tabbar.tabsMovable = value);\n  }\n\n  /**\n   * Whether the dock panel is empty.\n   */\n  get isEmpty(): boolean {\n    return (this.layout as DockLayout).isEmpty;\n  }\n\n  /**\n   * Create an iterator over the user widgets in the panel.\n   *\n   * @returns A new iterator over the user widgets in the panel.\n   *\n   * #### Notes\n   * This iterator does not include the generated tab bars.\n   */\n  widgets(): IIterator<Widget> {\n    return (this.layout as DockLayout).widgets();\n  }\n\n  /**\n   * Create an iterator over the selected widgets in the panel.\n   *\n   * @returns A new iterator over the selected user widgets.\n   *\n   * #### Notes\n   * This iterator yields the widgets corresponding to the current tab\n   * of each tab bar in the panel.\n   */\n  selectedWidgets(): IIterator<Widget> {\n    return (this.layout as DockLayout).selectedWidgets();\n  }\n\n  /**\n   * Create an iterator over the tab bars in the panel.\n   *\n   * @returns A new iterator over the tab bars in the panel.\n   *\n   * #### Notes\n   * This iterator does not include the user widgets.\n   */\n  tabBars(): IIterator<TabBar<Widget>> {\n    return (this.layout as DockLayout).tabBars();\n  }\n\n  /**\n   * Create an iterator over the handles in the panel.\n   *\n   * @returns A new iterator over the handles in the panel.\n   */\n  handles(): IIterator<HTMLDivElement> {\n    return (this.layout as DockLayout).handles();\n  }\n\n  /**\n   * Select a specific widget in the dock panel.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * This will make the widget the current widget in its tab area.\n   */\n  selectWidget(widget: Widget): void {\n    // Find the tab bar which contains the widget.\n    let tabBar = find(this.tabBars(), bar => {\n      return bar.titles.indexOf(widget.title) !== -1;\n    });\n\n    // Throw an error if no tab bar is found.\n    if (!tabBar) {\n      throw new Error('Widget is not contained in the dock panel.');\n    }\n\n    // Ensure the widget is the current widget.\n    tabBar.currentTitle = widget.title;\n  }\n\n  /**\n   * Activate a specified widget in the dock panel.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * This will select and activate the given widget.\n   */\n  activateWidget(widget: Widget): void {\n    this.selectWidget(widget);\n    widget.activate();\n  }\n\n  /**\n   * Save the current layout configuration of the dock panel.\n   *\n   * @returns A new config object for the current layout state.\n   *\n   * #### Notes\n   * The return value can be provided to the `restoreLayout` method\n   * in order to restore the layout to its current configuration.\n   */\n  saveLayout(): DockPanel.ILayoutConfig {\n    return (this.layout as DockLayout).saveLayout();\n  }\n\n  /**\n   * Restore the layout to a previously saved configuration.\n   *\n   * @param config - The layout configuration to restore.\n   *\n   * #### Notes\n   * Widgets which currently belong to the layout but which are not\n   * contained in the config will be unparented.\n   *\n   * The dock panel automatically reverts to `'multiple-document'`\n   * mode when a layout config is restored.\n   */\n  restoreLayout(config: DockPanel.ILayoutConfig): void {\n    // Reset the mode.\n    this._mode = 'multiple-document';\n\n    // Restore the layout.\n    (this.layout as DockLayout).restoreLayout(config);\n\n    // Flush the message loop on IE and Edge to prevent flicker.\n    if (Platform.IS_EDGE || Platform.IS_IE) {\n      MessageLoop.flush();\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Add a widget to the dock panel.\n   *\n   * @param widget - The widget to add to the dock panel.\n   *\n   * @param options - The additional options for adding the widget.\n   *\n   * #### Notes\n   * If the panel is in single document mode, the options are ignored\n   * and the widget is always added as tab in the hidden tab bar.\n   */\n  addWidget(widget: Widget, options: DockPanel.IAddOptions = {}): void {\n    // Add the widget to the layout.\n    if (this._mode === 'single-document') {\n      (this.layout as DockLayout).addWidget(widget);\n    } else {\n      (this.layout as DockLayout).addWidget(widget, options);\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Process a message sent to the widget.\n   *\n   * @param msg - The message sent to the widget.\n   */\n  processMessage(msg: Message): void {\n    if (msg.type === 'layout-modified') {\n      this._layoutModified.emit(undefined);\n    } else {\n      super.processMessage(msg);\n    }\n  }\n\n  /**\n   * Handle the DOM events for the dock panel.\n   *\n   * @param event - The DOM event sent to the panel.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'lm-dragenter':\n      this._evtDragEnter(event as IDragEvent);\n      break;\n    case 'lm-dragleave':\n      this._evtDragLeave(event as IDragEvent);\n      break;\n    case 'lm-dragover':\n      this._evtDragOver(event as IDragEvent);\n      break;\n    case 'lm-drop':\n      this._evtDrop(event as IDragEvent);\n      break;\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('lm-dragenter', this);\n    this.node.addEventListener('lm-dragleave', this);\n    this.node.addEventListener('lm-dragover', this);\n    this.node.addEventListener('lm-drop', this);\n    this.node.addEventListener('mousedown', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('lm-dragenter', this);\n    this.node.removeEventListener('lm-dragleave', this);\n    this.node.removeEventListener('lm-dragover', this);\n    this.node.removeEventListener('lm-drop', this);\n    this.node.removeEventListener('mousedown', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    // Ignore the generated tab bars.\n    if (Private.isGeneratedTabBarProperty.get(msg.child)) {\n      return;\n    }\n\n    // Add the widget class to the child.\n    msg.child.addClass('lm-DockPanel-widget');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-DockPanel-widget');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    // Ignore the generated tab bars.\n    if (Private.isGeneratedTabBarProperty.get(msg.child)) {\n      return;\n    }\n\n    // Remove the widget class from the child.\n    msg.child.removeClass('lm-DockPanel-widget');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-DockPanel-widget');\n    /* </DEPRECATED> */\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Handle the `'lm-dragenter'` event for the dock panel.\n   */\n  private _evtDragEnter(event: IDragEvent): void {\n    // If the factory mime type is present, mark the event as\n    // handled in order to get the rest of the drag events.\n    if (event.mimeData.hasData('application/vnd.lumino.widget-factory')) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Handle the `'lm-dragleave'` event for the dock panel.\n   */\n  private _evtDragLeave(event: IDragEvent): void {\n    // Mark the event as handled.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // The new target might be a descendant, so we might still handle the drop.\n    // Hide asynchronously so that if a lm-dragover event bubbles up to us, the\n    // hide is cancelled by the lm-dragover handler's show overlay logic.\n    this.overlay.hide(1)\n  }\n\n  /**\n   * Handle the `'lm-dragover'` event for the dock panel.\n   */\n  private _evtDragOver(event: IDragEvent): void {\n    // Mark the event as handled.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Show the drop indicator overlay and update the drop\n    // action based on the drop target zone under the mouse.\n    if (this._showOverlay(event.clientX, event.clientY) === 'invalid') {\n      event.dropAction = 'none';\n    } else {\n      event.dropAction = event.proposedAction;\n    }\n  }\n\n  /**\n   * Handle the `'lm-drop'` event for the dock panel.\n   */\n  private _evtDrop(event: IDragEvent): void {\n    // Mark the event as handled.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Hide the drop indicator overlay.\n    this.overlay.hide(0);\n\n    // Bail if the proposed action is to do nothing.\n    if (event.proposedAction === 'none') {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Find the drop target under the mouse.\n    let { clientX, clientY } = event;\n    let { zone, target } = Private.findDropTarget(\n      this,\n      clientX,\n      clientY,\n      this._edges\n    );\n\n    // Bail if the drop zone is invalid.\n    if (zone === 'invalid') {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Bail if the factory mime type has invalid data.\n    let mimeData = event.mimeData;\n    let factory = mimeData.getData('application/vnd.lumino.widget-factory');\n    if (typeof factory !== 'function') {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Bail if the factory does not produce a widget.\n    let widget = factory();\n    if (!(widget instanceof Widget)) {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Bail if the widget is an ancestor of the dock panel.\n    if (widget.contains(this)) {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Find the reference widget for the drop target.\n    let ref = target ? Private.getDropRef(target.tabBar) : null;\n\n    // Add the widget according to the indicated drop zone.\n    switch(zone) {\n    case 'root-all':\n      this.addWidget(widget);\n      break;\n    case 'root-top':\n      this.addWidget(widget, { mode: 'split-top' });\n      break;\n    case 'root-left':\n      this.addWidget(widget, { mode: 'split-left' });\n      break;\n    case 'root-right':\n      this.addWidget(widget, { mode: 'split-right' });\n      break;\n    case 'root-bottom':\n      this.addWidget(widget, { mode: 'split-bottom' });\n      break;\n    case 'widget-all':\n      this.addWidget(widget, { mode: 'tab-after', ref });\n      break;\n    case 'widget-top':\n      this.addWidget(widget, { mode: 'split-top', ref });\n      break;\n    case 'widget-left':\n      this.addWidget(widget, { mode: 'split-left', ref });\n      break;\n    case 'widget-right':\n      this.addWidget(widget, { mode: 'split-right', ref });\n      break;\n    case 'widget-bottom':\n      this.addWidget(widget, { mode: 'split-bottom', ref });\n      break;\n    case 'widget-tab':\n      this.addWidget(widget, { mode: 'tab-after', ref });\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Accept the proposed drop action.\n    event.dropAction = event.proposedAction;\n\n    // Activate the dropped widget.\n    this.activateWidget(widget);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the dock panel.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop input events during drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Release the mouse if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      // Finalize the mouse release.\n      this._releaseMouse();\n\n      // Schedule an emit of the layout modified signal.\n      MessageLoop.postMessage(this, Private.LayoutModified);\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the dock panel.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not pressed.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Find the handle which contains the mouse target, if any.\n    let layout = this.layout as DockLayout;\n    let target = event.target as HTMLElement;\n    let handle = find(layout.handles(), handle => handle.contains(target));\n    if (!handle) {\n      return;\n    }\n\n    // Stop the event when a handle is pressed.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Add the extra document listeners.\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('mouseup', this, true);\n    document.addEventListener('mousemove', this, true);\n    document.addEventListener('contextmenu', this, true);\n\n    // Compute the offset deltas for the handle press.\n    let rect = handle.getBoundingClientRect();\n    let deltaX = event.clientX - rect.left;\n    let deltaY = event.clientY - rect.top;\n\n    // Override the cursor and store the press data.\n    let style = window.getComputedStyle(handle);\n    let override = Drag.overrideCursor(style.cursor!);\n    this._pressData = { handle, deltaX, deltaY, override };\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the dock panel.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Bail early if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Stop the event when dragging a handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Compute the desired offset position for the handle.\n    let rect = this.node.getBoundingClientRect();\n    let xPos = event.clientX - rect.left - this._pressData.deltaX;\n    let yPos = event.clientY - rect.top - this._pressData.deltaY;\n\n    // Set the handle as close to the desired position as possible.\n    let layout = this.layout as DockLayout;\n    layout.moveHandle(this._pressData.handle, xPos, yPos);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the dock panel.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event when releasing a handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Finalize the mouse release.\n    this._releaseMouse();\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Release the mouse grab for the dock panel.\n   */\n  private _releaseMouse(): void {\n    // Bail early if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Clear the override cursor.\n    this._pressData.override.dispose();\n    this._pressData = null;\n\n    // Remove the extra document listeners.\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Show the overlay indicator at the given client position.\n   *\n   * Returns the drop zone at the specified client position.\n   *\n   * #### Notes\n   * If the position is not over a valid zone, the overlay is hidden.\n   */\n  private _showOverlay(clientX: number, clientY: number): Private.DropZone {\n    // Find the dock target for the given client position.\n    let { zone, target } = Private.findDropTarget(\n      this,\n      clientX,\n      clientY,\n      this._edges\n    );\n\n    // If the drop zone is invalid, hide the overlay and bail.\n    if (zone === 'invalid') {\n      this.overlay.hide(100);\n      return zone;\n    }\n\n    // Setup the variables needed to compute the overlay geometry.\n    let top: number;\n    let left: number;\n    let right: number;\n    let bottom: number;\n    let box = ElementExt.boxSizing(this.node); // TODO cache this?\n    let rect = this.node.getBoundingClientRect();\n\n    // Compute the overlay geometry based on the dock zone.\n    switch (zone) {\n    case 'root-all':\n      top = box.paddingTop;\n      left = box.paddingLeft;\n      right = box.paddingRight;\n      bottom = box.paddingBottom;\n      break;\n    case 'root-top':\n      top = box.paddingTop;\n      left = box.paddingLeft;\n      right = box.paddingRight;\n      bottom = rect.height * Private.GOLDEN_RATIO;\n      break;\n    case 'root-left':\n      top = box.paddingTop;\n      left = box.paddingLeft;\n      right = rect.width * Private.GOLDEN_RATIO;\n      bottom = box.paddingBottom;\n      break;\n    case 'root-right':\n      top = box.paddingTop;\n      left = rect.width * Private.GOLDEN_RATIO;\n      right = box.paddingRight;\n      bottom = box.paddingBottom;\n      break;\n    case 'root-bottom':\n      top = rect.height * Private.GOLDEN_RATIO;\n      left = box.paddingLeft;\n      right = box.paddingRight;\n      bottom = box.paddingBottom;\n      break;\n    case 'widget-all':\n      top = target!.top;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom;\n      break;\n    case 'widget-top':\n      top = target!.top;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom + target!.height / 2;\n      break;\n    case 'widget-left':\n      top = target!.top;\n      left = target!.left;\n      right = target!.right + target!.width / 2;\n      bottom = target!.bottom;\n      break;\n    case 'widget-right':\n      top = target!.top;\n      left = target!.left + target!.width / 2;\n      right = target!.right;\n      bottom = target!.bottom;\n      break;\n    case 'widget-bottom':\n      top = target!.top + target!.height / 2;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom;\n      break;\n    case 'widget-tab':\n      const tabHeight = target!.tabBar.node.getBoundingClientRect().height;\n      top = target!.top;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom + target!.height - tabHeight;\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Show the overlay with the computed geometry.\n    this.overlay.show({ top, left, right, bottom });\n\n    // Finally, return the computed drop zone.\n    return zone;\n  }\n\n  /**\n   * Create a new tab bar for use by the panel.\n   */\n  private _createTabBar(): TabBar<Widget> {\n    // Create the tab bar.\n    let tabBar = this._renderer.createTabBar();\n\n    // Set the generated tab bar property for the tab bar.\n    Private.isGeneratedTabBarProperty.set(tabBar, true);\n\n    // Hide the tab bar when in single document mode.\n    if (this._mode === 'single-document') {\n      tabBar.hide();\n    }\n\n    // Enforce necessary tab bar behavior.\n    // TODO do we really want to enforce *all* of these?\n    tabBar.tabsMovable = this._tabsMovable;\n    tabBar.allowDeselect = false;\n    tabBar.removeBehavior = 'select-previous-tab';\n    tabBar.insertBehavior = 'select-tab-if-needed';\n\n    // Connect the signal handlers for the tab bar.\n    tabBar.tabMoved.connect(this._onTabMoved, this);\n    tabBar.currentChanged.connect(this._onCurrentChanged, this);\n    tabBar.tabCloseRequested.connect(this._onTabCloseRequested, this);\n    tabBar.tabDetachRequested.connect(this._onTabDetachRequested, this);\n    tabBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n\n    // Return the initialized tab bar.\n    return tabBar;\n  }\n\n  /**\n   * Create a new handle for use by the panel.\n   */\n  private _createHandle(): HTMLDivElement {\n    return this._renderer.createHandle();\n  }\n\n  /**\n   * Handle the `tabMoved` signal from a tab bar.\n   */\n  private _onTabMoved(): void {\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Handle the `currentChanged` signal from a tab bar.\n   */\n  private _onCurrentChanged(sender: TabBar<Widget>, args: TabBar.ICurrentChangedArgs<Widget>): void {\n    // Extract the previous and current title from the args.\n    let { previousTitle, currentTitle } = args;\n\n    // Hide the previous widget.\n    if (previousTitle) {\n      previousTitle.owner.hide();\n    }\n\n    // Show the current widget.\n    if (currentTitle) {\n      currentTitle.owner.show();\n    }\n\n    // Flush the message loop on IE and Edge to prevent flicker.\n    if (Platform.IS_EDGE || Platform.IS_IE) {\n      MessageLoop.flush();\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Handle the `tabActivateRequested` signal from a tab bar.\n   */\n  private _onTabActivateRequested(sender: TabBar<Widget>, args: TabBar.ITabActivateRequestedArgs<Widget>): void {\n    args.title.owner.activate();\n  }\n\n  /**\n   * Handle the `tabCloseRequested` signal from a tab bar.\n   */\n  private _onTabCloseRequested(sender: TabBar<Widget>, args: TabBar.ITabCloseRequestedArgs<Widget>): void {\n    args.title.owner.close();\n  }\n\n  /**\n   * Handle the `tabDetachRequested` signal from a tab bar.\n   */\n  private _onTabDetachRequested(sender: TabBar<Widget>, args: TabBar.ITabDetachRequestedArgs<Widget>): void {\n    // Do nothing if a drag is already in progress.\n    if (this._drag) {\n      return;\n    }\n\n    // Release the tab bar's hold on the mouse.\n    sender.releaseMouse();\n\n    // Extract the data from the args.\n    let { title, tab, clientX, clientY } = args;\n\n    // Setup the mime data for the drag operation.\n    let mimeData = new MimeData();\n    let factory = () => title.owner;\n    mimeData.setData('application/vnd.lumino.widget-factory', factory);\n\n    // Create the drag image for the drag operation.\n    let dragImage = tab.cloneNode(true) as HTMLElement;\n\n    // Create the drag object to manage the drag-drop operation.\n    this._drag = new Drag({\n      mimeData, dragImage,\n      proposedAction: 'move',\n      supportedActions: 'move',\n    });\n\n    // Hide the tab node in the original tab.\n    tab.classList.add('lm-mod-hidden');\n    /* <DEPRECATED> */\n    tab.classList.add('p-mod-hidden');\n    /* </DEPRECATED> */;\n\n    // Create the cleanup callback.\n    let cleanup = (() => {\n      this._drag = null;\n      tab.classList.remove('lm-mod-hidden');\n      /* <DEPRECATED> */\n      tab.classList.remove('p-mod-hidden');\n      /* </DEPRECATED> */;\n    });\n\n    // Start the drag operation and cleanup when done.\n    this._drag.start(clientX, clientY).then(cleanup);\n  }\n\n  private _edges: DockPanel.IEdges;\n  private _mode: DockPanel.Mode;\n  private _drag: Drag | null = null;\n  private _renderer: DockPanel.IRenderer;\n  private _tabsMovable: boolean = true;\n  private _pressData: Private.IPressData | null = null;\n  private _layoutModified = new Signal<this, void>(this);\n}\n\n\n/**\n * The namespace for the `DockPanel` class statics.\n */\nexport\nnamespace DockPanel {\n  /**\n   * An options object for creating a dock panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The overlay to use with the dock panel.\n     *\n     * The default is a new `Overlay` instance.\n     */\n    overlay?: IOverlay;\n\n    /**\n     * The renderer to use for the dock panel.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n\n    /**\n     * The spacing between the items in the panel.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n\n    /**\n     * The mode for the dock panel.\n     *\n     * The deafult is `'multiple-document'`.\n     */\n    mode?: DockPanel.Mode;\n\n    /**\n     * The sizes of the edge drop zones, in pixels.\n     * If not given, default values will be used.\n     */\n    edges?: IEdges;\n\n    /**\n     * Allow tabs to be draggable / movable by user.\n     *\n     * The default is `'true'`.\n     */\n    tabsMovable?: boolean;\n  }\n\n  /**\n   * The sizes of the edge drop zones, in pixels.\n   */\n  export interface IEdges {\n    /**\n     * The size of the top edge drop zone.\n     */\n    top: number;\n\n    /**\n     * The size of the right edge drop zone.\n     */\n    right: number;\n\n    /**\n     * The size of the bottom edge drop zone.\n     */\n    bottom: number;\n\n    /**\n     * The size of the left edge drop zone.\n     */\n    left: number;\n  };\n\n  /**\n   * A type alias for the supported dock panel modes.\n   */\n  export\n  type Mode = (\n    /**\n     * The single document mode.\n     *\n     * In this mode, only a single widget is visible at a time, and that\n     * widget fills the available layout space. No tab bars are visible.\n     */\n    'single-document' |\n\n    /**\n     * The multiple document mode.\n     *\n     * In this mode, multiple documents are displayed in separate tab\n     * areas, and those areas can be individually resized by the user.\n     */\n    'multiple-document'\n  );\n\n  /**\n   * A type alias for a layout configuration object.\n   */\n  export\n  type ILayoutConfig = DockLayout.ILayoutConfig;\n\n  /**\n   * A type alias for the supported insertion modes.\n   */\n  export\n  type InsertMode = DockLayout.InsertMode;\n\n  /**\n   * A type alias for the add widget options.\n   */\n  export\n  type IAddOptions = DockLayout.IAddOptions;\n\n  /**\n   * An object which holds the geometry for overlay positioning.\n   */\n  export\n  interface IOverlayGeometry {\n    /**\n     * The distance between the overlay and parent top edges.\n     */\n    top: number;\n\n    /**\n     * The distance between the overlay and parent left edges.\n     */\n    left: number;\n\n    /**\n     * The distance between the overlay and parent right edges.\n     */\n    right: number;\n\n    /**\n     * The distance between the overlay and parent bottom edges.\n     */\n    bottom: number;\n  }\n\n  /**\n   * An object which manages the overlay node for a dock panel.\n   */\n  export\n  interface IOverlay {\n    /**\n     * The DOM node for the overlay.\n     */\n    readonly node: HTMLDivElement;\n\n    /**\n     * Show the overlay using the given overlay geometry.\n     *\n     * @param geo - The desired geometry for the overlay.\n     *\n     * #### Notes\n     * The given geometry values assume the node will use absolute\n     * positioning.\n     *\n     * This is called on every mouse move event during a drag in order\n     * to update the position of the overlay. It should be efficient.\n     */\n    show(geo: IOverlayGeometry): void;\n\n    /**\n     * Hide the overlay node.\n     *\n     * @param delay - The delay (in ms) before hiding the overlay.\n     *   A delay value <= 0 should hide the overlay immediately.\n     *\n     * #### Notes\n     * This is called whenever the overlay node should been hidden.\n     */\n    hide(delay: number): void;\n  }\n\n  /**\n   * A concrete implementation of `IOverlay`.\n   *\n   * This is the default overlay implementation for a dock panel.\n   */\n  export\n  class Overlay implements IOverlay {\n    /**\n     * Construct a new overlay.\n     */\n    constructor() {\n      this.node = document.createElement('div');\n      this.node.classList.add('lm-DockPanel-overlay');\n      this.node.classList.add('lm-mod-hidden');\n      /* <DEPRECATED> */\n      this.node.classList.add('p-DockPanel-overlay');\n      this.node.classList.add('p-mod-hidden');\n      /* </DEPRECATED> */;\n      this.node.style.position = 'absolute';\n    }\n\n    /**\n     * The DOM node for the overlay.\n     */\n    readonly node: HTMLDivElement;\n\n    /**\n     * Show the overlay using the given overlay geometry.\n     *\n     * @param geo - The desired geometry for the overlay.\n     */\n    show(geo: IOverlayGeometry): void {\n      // Update the position of the overlay.\n      let style = this.node.style;\n      style.top = `${geo.top}px`;\n      style.left = `${geo.left}px`;\n      style.right = `${geo.right}px`;\n      style.bottom = `${geo.bottom}px`;\n\n      // Clear any pending hide timer.\n      clearTimeout(this._timer);\n      this._timer = -1;\n\n      // If the overlay is already visible, we're done.\n      if (!this._hidden) {\n        return;\n      }\n\n      // Clear the hidden flag.\n      this._hidden = false;\n\n      // Finally, show the overlay.\n      this.node.classList.remove('lm-mod-hidden');\n      /* <DEPRECATED> */\n      this.node.classList.remove('p-mod-hidden');\n      /* </DEPRECATED> */;\n    }\n\n    /**\n     * Hide the overlay node.\n     *\n     * @param delay - The delay (in ms) before hiding the overlay.\n     *   A delay value <= 0 will hide the overlay immediately.\n     */\n    hide(delay: number): void {\n      // Do nothing if the overlay is already hidden.\n      if (this._hidden) {\n        return;\n      }\n\n      // Hide immediately if the delay is <= 0.\n      if (delay <= 0) {\n        clearTimeout(this._timer);\n        this._timer = -1;\n        this._hidden = true;\n        this.node.classList.add('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this.node.classList.add('p-mod-hidden');\n        /* </DEPRECATED> */;\n        return;\n      }\n\n      // Do nothing if a hide is already pending.\n      if (this._timer !== -1) {\n        return;\n      }\n\n      // Otherwise setup the hide timer.\n      this._timer = window.setTimeout(() => {\n        this._timer = -1;\n        this._hidden = true;\n        this.node.classList.add('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this.node.classList.add('p-mod-hidden');\n        /* </DEPRECATED> */;\n      }, delay);\n    }\n\n    private _timer = -1;\n    private _hidden = true;\n  }\n\n  /**\n   * A type alias for a dock panel renderer;\n   */\n  export\n  type IRenderer = DockLayout.IRenderer;\n\n  /**\n   * The default implementation of `IRenderer`.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Create a new tab bar for use with a dock panel.\n     *\n     * @returns A new tab bar for a dock panel.\n     */\n    createTabBar(): TabBar<Widget> {\n      let bar = new TabBar<Widget>();\n      bar.addClass('lm-DockPanel-tabBar');\n      /* <DEPRECATED> */\n      bar.addClass('p-DockPanel-tabBar');\n      /* </DEPRECATED> */\n      return bar;\n    }\n\n    /**\n     * Create a new handle node for use with a dock panel.\n     *\n     * @returns A new handle node for a dock panel.\n     */\n    createHandle(): HTMLDivElement {\n      let handle = document.createElement('div');\n      handle.className = 'lm-DockPanel-handle';\n      /* <DEPRECATED> */\n      handle.classList.add('p-DockPanel-handle');\n      /* </DEPRECATED> */;\n      return handle;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A fraction used for sizing root panels; ~= `1 / golden_ratio`.\n   */\n  export\n  const GOLDEN_RATIO = 0.618;\n\n  /**\n   * The default sizes for the edge drop zones, in pixels.\n   */\n  export const DEFAULT_EDGES = {\n    /**\n     * The size of the top edge dock zone for the root panel, in pixels.\n     * This is different from the others to distinguish between the top\n     * tab bar and the top root zone.\n     */\n    top: 12,\n\n    /**\n     * The size of the edge dock zone for the root panel, in pixels.\n     */\n    right: 40,\n\n    /**\n     * The size of the edge dock zone for the root panel, in pixels.\n     */\n    bottom: 40,\n\n    /**\n     * The size of the edge dock zone for the root panel, in pixels.\n     */\n    left: 40\n  };\n\n  /**\n   * A singleton `'layout-modified'` conflatable message.\n   */\n  export\n  const LayoutModified = new ConflatableMessage('layout-modified');\n\n  /**\n   * An object which holds mouse press data.\n   */\n  export\n  interface IPressData {\n    /**\n     * The handle which was pressed.\n     */\n    handle: HTMLDivElement;\n\n    /**\n     * The X offset of the press in handle coordinates.\n     */\n    deltaX: number;\n\n    /**\n     * The Y offset of the press in handle coordinates.\n     */\n    deltaY: number;\n\n    /**\n     * The disposable which will clear the override cursor.\n     */\n    override: IDisposable;\n  }\n\n  /**\n   * A type alias for a drop zone.\n   */\n  export\n  type DropZone = (\n    /**\n     * An invalid drop zone.\n     */\n    'invalid' |\n\n    /**\n     * The entirety of the root dock area.\n     */\n    'root-all' |\n\n    /**\n     * The top portion of the root dock area.\n     */\n    'root-top' |\n\n    /**\n     * The left portion of the root dock area.\n     */\n    'root-left' |\n\n    /**\n     * The right portion of the root dock area.\n     */\n    'root-right' |\n\n    /**\n     * The bottom portion of the root dock area.\n     */\n    'root-bottom' |\n\n    /**\n     * The entirety of a tabbed widget area.\n     */\n    'widget-all' |\n\n    /**\n     * The top portion of tabbed widget area.\n     */\n    'widget-top' |\n\n    /**\n     * The left portion of tabbed widget area.\n     */\n    'widget-left' |\n\n    /**\n     * The right portion of tabbed widget area.\n     */\n    'widget-right' |\n\n    /**\n     * The bottom portion of tabbed widget area.\n     */\n    'widget-bottom' |\n\n    /**\n     * The the bar of a tabbed widget area.\n     */\n    'widget-tab'\n  );\n\n  /**\n   * An object which holds the drop target zone and widget.\n   */\n  export\n  interface IDropTarget {\n    /**\n     * The semantic zone for the mouse position.\n     */\n    zone: DropZone;\n\n    /**\n     * The tab area geometry for the drop zone, or `null`.\n     */\n    target: DockLayout.ITabAreaGeometry | null;\n  }\n\n  /**\n   * An attached property used to track generated tab bars.\n   */\n  export\n  const isGeneratedTabBarProperty = new AttachedProperty<Widget, boolean>({\n    name: 'isGeneratedTabBar',\n    create: () => false\n  });\n\n  /**\n   * Create a single document config for the widgets in a dock panel.\n   */\n  export\n  function createSingleDocumentConfig(panel: DockPanel): DockPanel.ILayoutConfig {\n    // Return an empty config if the panel is empty.\n    if (panel.isEmpty) {\n      return { main: null };\n    }\n\n    // Get a flat array of the widgets in the panel.\n    let widgets = toArray(panel.widgets());\n\n    // Get the first selected widget in the panel.\n    let selected = panel.selectedWidgets().next();\n\n    // Compute the current index for the new config.\n    let currentIndex = selected ? widgets.indexOf(selected) : -1;\n\n    // Return the single document config.\n    return { main: { type: 'tab-area', widgets, currentIndex } };\n  }\n\n  /**\n   * Find the drop target at the given client position.\n   */\n  export\n  function findDropTarget(\n    panel: DockPanel,\n    clientX: number,\n    clientY: number,\n    edges: DockPanel.IEdges\n  ): IDropTarget {\n    // Bail if the mouse is not over the dock panel.\n    if (!ElementExt.hitTest(panel.node, clientX, clientY)) {\n      return { zone: 'invalid', target: null };\n    }\n\n    // Look up the layout for the panel.\n    let layout = panel.layout as DockLayout;\n\n    // If the layout is empty, indicate the entire root drop zone.\n    if (layout.isEmpty) {\n      return { zone: 'root-all', target: null };\n    }\n\n    // Test the edge zones when in multiple document mode.\n    if (panel.mode === 'multiple-document') {\n      // Get the client rect for the dock panel.\n      let panelRect = panel.node.getBoundingClientRect();\n\n      // Compute the distance to each edge of the panel.\n      let pl = clientX - panelRect.left + 1;\n      let pt = clientY - panelRect.top + 1;\n      let pr = panelRect.right - clientX;\n      let pb = panelRect.bottom - clientY;\n\n      // Find the minimum distance to an edge.\n      let pd = Math.min(pt, pr, pb, pl);\n\n      // Return a root zone if the mouse is within an edge.\n      switch (pd) {\n        case pt:\n          if (pt < edges.top) {\n            return { zone: 'root-top', target: null };\n          }\n          break;\n        case pr:\n          if (pr < edges.right) {\n            return { zone: 'root-right', target: null };\n          }\n          break;\n        case pb:\n          if (pb < edges.bottom) {\n            return { zone: 'root-bottom', target: null };\n          }\n          break;\n        case pl:\n          if (pl < edges.left) {\n            return { zone: 'root-left', target: null };\n          }\n          break;\n        default:\n          throw 'unreachable';\n      }\n    }\n\n    // Hit test the dock layout at the given client position.\n    let target = layout.hitTestTabAreas(clientX, clientY);\n\n    // Bail if no target area was found.\n    if (!target) {\n      return { zone: 'invalid', target: null };\n    }\n\n    // Return the whole tab area when in single document mode.\n    if (panel.mode === 'single-document') {\n      return { zone: 'widget-all', target };\n    }\n\n    // Compute the distance to each edge of the tab area.\n    let al = target.x - target.left + 1;\n    let at = target.y - target.top + 1;\n    let ar = target.left + target.width - target.x;\n    let ab = target.top + target.height - target.y;\n\n    const tabHeight = target.tabBar.node.getBoundingClientRect().height;\n    if (at < tabHeight) {\n      return { zone: 'widget-tab', target };\n    }\n\n    // Get the X and Y edge sizes for the area.\n    let rx = Math.round(target.width / 3);\n    let ry = Math.round(target.height / 3);\n\n    // If the mouse is not within an edge, indicate the entire area.\n    if (al > rx && ar > rx && at > ry && ab > ry) {\n      return { zone: 'widget-all', target };\n    }\n\n    // Scale the distances by the slenderness ratio.\n    al /= rx;\n    at /= ry;\n    ar /= rx;\n    ab /= ry;\n\n    // Find the minimum distance to the area edge.\n    let ad = Math.min(al, at, ar, ab);\n\n    // Find the widget zone for the area edge.\n    let zone: DropZone;\n    switch (ad) {\n    case al:\n      zone = 'widget-left';\n      break;\n    case at:\n      zone = 'widget-top';\n      break;\n    case ar:\n      zone = 'widget-right';\n      break;\n    case ab:\n      zone = 'widget-bottom';\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Return the final drop target.\n    return { zone, target };\n  }\n\n  /**\n   * Get the drop reference widget for a tab bar.\n   */\n  export\n  function getDropRef(tabBar: TabBar<Widget>): Widget | null {\n    if (tabBar.titles.length === 0) {\n      return null;\n    }\n    if (tabBar.currentTitle) {\n      return tabBar.currentTitle.owner;\n    }\n    return tabBar.titles[tabBar.titles.length - 1].owner;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each, filter, find, max\n} from '@lumino/algorithm';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A class which tracks focus among a set of widgets.\n *\n * This class is useful when code needs to keep track of the most\n * recently focused widget(s) among a set of related widgets.\n */\nexport\nclass FocusTracker<T extends Widget> implements IDisposable {\n  /**\n   * Construct a new focus tracker.\n   */\n  constructor() { }\n\n  /**\n   * Dispose of the resources held by the tracker.\n   */\n  dispose(): void {\n    // Do nothing if the tracker is already disposed.\n    if (this._counter < 0) {\n      return;\n    }\n\n    // Mark the tracker as disposed.\n    this._counter = -1;\n\n    // Clear the connections for the tracker.\n    Signal.clearData(this);\n\n    // Remove all event listeners.\n    each(this._widgets, w => {\n      w.node.removeEventListener('focus', this, true);\n      w.node.removeEventListener('blur', this, true);\n    });\n\n    // Clear the internal data structures.\n    this._activeWidget = null;\n    this._currentWidget = null;\n    this._nodes.clear();\n    this._numbers.clear();\n    this._widgets.length = 0;\n  }\n\n  /**\n   * A signal emitted when the current widget has changed.\n   */\n  get currentChanged(): ISignal<this, FocusTracker.IChangedArgs<T>> {\n    return this._currentChanged;\n  }\n\n  /**\n   * A signal emitted when the active widget has changed.\n   */\n  get activeChanged(): ISignal<this, FocusTracker.IChangedArgs<T>> {\n    return this._activeChanged;\n  }\n\n  /**\n   * A flag indicating whether the tracker is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._counter < 0;\n  }\n\n  /**\n   * The current widget in the tracker.\n   *\n   * #### Notes\n   * The current widget is the widget among the tracked widgets which\n   * has the *descendant node* which has most recently been focused.\n   *\n   * The current widget will not be updated if the node loses focus. It\n   * will only be updated when a different tracked widget gains focus.\n   *\n   * If the current widget is removed from the tracker, the previous\n   * current widget will be restored.\n   *\n   * This behavior is intended to follow a user's conceptual model of\n   * a semantically \"current\" widget, where the \"last thing of type X\"\n   * to be interacted with is the \"current instance of X\", regardless\n   * of whether that instance still has focus.\n   */\n  get currentWidget(): T | null {\n    return this._currentWidget;\n  }\n\n  /**\n   * The active widget in the tracker.\n   *\n   * #### Notes\n   * The active widget is the widget among the tracked widgets which\n   * has the *descendant node* which is currently focused.\n   */\n  get activeWidget(): T | null {\n    return this._activeWidget;\n  }\n\n  /**\n   * A read only array of the widgets being tracked.\n   */\n  get widgets(): ReadonlyArray<T> {\n    return this._widgets;\n  }\n\n  /**\n   * Get the focus number for a particular widget in the tracker.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The focus number for the given widget, or `-1` if the\n   *   widget has not had focus since being added to the tracker, or\n   *   is not contained by the tracker.\n   *\n   * #### Notes\n   * The focus number indicates the relative order in which the widgets\n   * have gained focus. A widget with a larger number has gained focus\n   * more recently than a widget with a smaller number.\n   *\n   * The `currentWidget` will always have the largest focus number.\n   *\n   * All widgets start with a focus number of `-1`, which indicates that\n   * the widget has not been focused since being added to the tracker.\n   */\n  focusNumber(widget: T): number {\n    let n = this._numbers.get(widget);\n    return n === undefined ? -1 : n;\n  }\n\n  /**\n   * Test whether the focus tracker contains a given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns `true` if the widget is tracked, `false` otherwise.\n   */\n  has(widget: T): boolean {\n    return this._numbers.has(widget);\n  }\n\n  /**\n   * Add a widget to the focus tracker.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * A widget will be automatically removed from the tracker if it\n   * is disposed after being added.\n   *\n   * If the widget is already tracked, this is a no-op.\n   */\n  add(widget: T): void {\n    // Do nothing if the widget is already tracked.\n    if (this._numbers.has(widget)) {\n      return;\n    }\n\n    // Test whether the widget has focus.\n    let focused = widget.node.contains(document.activeElement);\n\n    // Set up the initial focus number.\n    let n = focused ? this._counter++ : -1;\n\n    // Add the widget to the internal data structures.\n    this._widgets.push(widget);\n    this._numbers.set(widget, n);\n    this._nodes.set(widget.node, widget);\n\n    // Set up the event listeners. The capturing phase must be used\n    // since the 'focus' and 'blur' events don't bubble and Firefox\n    // doesn't support the 'focusin' or 'focusout' events.\n    widget.node.addEventListener('focus', this, true);\n    widget.node.addEventListener('blur', this, true);\n\n    // Connect the disposed signal handler.\n    widget.disposed.connect(this._onWidgetDisposed, this);\n\n    // Set the current and active widgets if needed.\n    if (focused) {\n      this._setWidgets(widget, widget);\n    }\n  }\n\n  /**\n   * Remove a widget from the focus tracker.\n   *\n   * #### Notes\n   * If the widget is the `currentWidget`, the previous current widget\n   * will become the new `currentWidget`.\n   *\n   * A widget will be automatically removed from the tracker if it\n   * is disposed after being added.\n   *\n   * If the widget is not tracked, this is a no-op.\n   */\n  remove(widget: T): void {\n    // Bail early if the widget is not tracked.\n    if (!this._numbers.has(widget)) {\n      return;\n    }\n\n    // Disconnect the disposed signal handler.\n    widget.disposed.disconnect(this._onWidgetDisposed, this);\n\n    // Remove the event listeners.\n    widget.node.removeEventListener('focus', this, true);\n    widget.node.removeEventListener('blur', this, true);\n\n    // Remove the widget from the internal data structures.\n    ArrayExt.removeFirstOf(this._widgets, widget);\n    this._nodes.delete(widget.node);\n    this._numbers.delete(widget);\n\n    // Bail early if the widget is not the current widget.\n    if (this._currentWidget !== widget) {\n      return;\n    }\n\n    // Filter the widgets for those which have had focus.\n    let valid = filter(this._widgets, w => this._numbers.get(w) !== -1);\n\n    // Get the valid widget with the max focus number.\n    let previous = max(valid, (first, second) => {\n      let a = this._numbers.get(first)!;\n      let b = this._numbers.get(second)!;\n      return a - b;\n    }) || null;\n\n    // Set the current and active widgets.\n    this._setWidgets(previous, null);\n  }\n\n  /**\n   * Handle the DOM events for the focus tracker.\n   *\n   * @param event - The DOM event sent to the panel.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the tracked nodes. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'focus':\n      this._evtFocus(event as FocusEvent);\n      break;\n    case 'blur':\n      this._evtBlur(event as FocusEvent);\n      break;\n    }\n  }\n\n  /**\n   * Set the current and active widgets for the tracker.\n   */\n  private _setWidgets(current: T | null, active: T | null): void {\n    // Swap the current widget.\n    let oldCurrent = this._currentWidget;\n    this._currentWidget = current;\n\n    // Swap the active widget.\n    let oldActive = this._activeWidget;\n    this._activeWidget = active;\n\n    // Emit the `currentChanged` signal if needed.\n    if (oldCurrent !== current) {\n      this._currentChanged.emit({ oldValue: oldCurrent, newValue: current });\n    }\n\n    // Emit the `activeChanged` signal if needed.\n    if (oldActive !== active) {\n      this._activeChanged.emit({ oldValue: oldActive, newValue: active });\n    }\n  }\n\n  /**\n   * Handle the `'focus'` event for a tracked widget.\n   */\n  private _evtFocus(event: FocusEvent): void {\n    // Find the widget which gained focus, which is known to exist.\n    let widget = this._nodes.get(event.currentTarget as HTMLElement)!;\n\n    // Update the focus number if necessary.\n    if (widget !== this._currentWidget) {\n      this._numbers.set(widget, this._counter++);\n    }\n\n    // Set the current and active widgets.\n    this._setWidgets(widget, widget);\n  }\n\n  /**\n   * Handle the `'blur'` event for a tracked widget.\n   */\n  private _evtBlur(event: FocusEvent): void {\n    // Find the widget which lost focus, which is known to exist.\n    let widget = this._nodes.get(event.currentTarget as HTMLElement)!;\n\n    // Get the node which being focused after this blur.\n    let focusTarget = event.relatedTarget as HTMLElement;\n\n    // If no other node is being focused, clear the active widget.\n    if (!focusTarget) {\n      this._setWidgets(this._currentWidget, null);\n      return;\n    }\n\n    // Bail if the focus widget is not changing.\n    if (widget.node.contains(focusTarget)) {\n      return;\n    }\n\n    // If no tracked widget is being focused, clear the active widget.\n    if (!find(this._widgets, w => w.node.contains(focusTarget))) {\n      this._setWidgets(this._currentWidget, null);\n      return;\n    }\n  }\n\n  /**\n   * Handle the `disposed` signal for a tracked widget.\n   */\n  private _onWidgetDisposed(sender: T): void {\n    this.remove(sender);\n  }\n\n  private _counter = 0;\n  private _widgets: T[] = [];\n  private _activeWidget: T | null = null;\n  private _currentWidget: T | null = null;\n  private _numbers = new Map<T, number>();\n  private _nodes = new Map<HTMLElement, T>();\n  private _activeChanged = new Signal<this, FocusTracker.IChangedArgs<T>>(this);\n  private _currentChanged = new Signal<this, FocusTracker.IChangedArgs<T>>(this);\n}\n\n\n/**\n * The namespace for the `FocusTracker` class statics.\n */\nexport\nnamespace FocusTracker {\n  /**\n   * An arguments object for the changed signals.\n   */\n  export\n  interface IChangedArgs<T extends Widget> {\n    /**\n     * The old value for the widget.\n     */\n    oldValue: T | null;\n\n    /**\n     * The new value for the widget.\n     */\n    newValue: T | null;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, IIterator, each, map\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  BoxEngine, BoxSizer\n} from './boxengine';\n\nimport {\n Layout, LayoutItem\n} from './layout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout which arranges its widgets in a grid.\n */\nexport\nclass GridLayout extends Layout {\n  /**\n   * Construct a new grid layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: GridLayout.IOptions = {}) {\n    super(options);\n    if (options.rowCount !== undefined) {\n      Private.reallocSizers(this._rowSizers, options.rowCount);\n    }\n    if (options.columnCount !== undefined) {\n      Private.reallocSizers(this._columnSizers, options.columnCount);\n    }\n    if (options.rowSpacing !== undefined) {\n      this._rowSpacing = Private.clampValue(options.rowSpacing);\n    }\n    if (options.columnSpacing !== undefined) {\n      this._columnSpacing = Private.clampValue(options.columnSpacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the widgets and layout items.\n    each(this._items, item => {\n      let widget = item.widget;\n      item.dispose();\n      widget.dispose();\n    });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n    this._rowStarts.length = 0;\n    this._rowSizers.length = 0;\n    this._columnStarts.length = 0;\n    this._columnSizers.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * Get the number of rows in the layout.\n   */\n  get rowCount(): number {\n    return this._rowSizers.length;\n  }\n\n  /**\n   * Set the number of rows in the layout.\n   *\n   * #### Notes\n   * The minimum row count is `1`.\n   */\n  set rowCount(value: number) {\n    // Do nothing if the row count does not change.\n    if (value === this.rowCount) {\n      return;\n    }\n\n    // Reallocate the row sizers.\n    Private.reallocSizers(this._rowSizers, value);\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the number of columns in the layout.\n   */\n  get columnCount(): number {\n    return this._columnSizers.length;\n  }\n\n  /**\n   * Set the number of columns in the layout.\n   *\n   * #### Notes\n   * The minimum column count is `1`.\n   */\n  set columnCount(value: number) {\n    // Do nothing if the column count does not change.\n    if (value === this.columnCount) {\n      return;\n    }\n\n    // Reallocate the column sizers.\n    Private.reallocSizers(this._columnSizers, value);\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the row spacing for the layout.\n   */\n  get rowSpacing(): number {\n    return this._rowSpacing;\n  }\n\n  /**\n   * Set the row spacing for the layout.\n   */\n  set rowSpacing(value: number) {\n    // Clamp the spacing to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the spacing does not change\n    if (this._rowSpacing === value) {\n      return;\n    }\n\n    // Update the internal spacing.\n    this._rowSpacing = value;\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the column spacing for the layout.\n   */\n  get columnSpacing(): number {\n    return this._columnSpacing;\n  }\n\n  /**\n   * Set the col spacing for the layout.\n   */\n  set columnSpacing(value: number) {\n    // Clamp the spacing to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the spacing does not change\n    if (this._columnSpacing === value) {\n      return;\n    }\n\n    // Update the internal spacing.\n    this._columnSpacing = value;\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the stretch factor for a specific row.\n   *\n   * @param index - The row index of interest.\n   *\n   * @returns The stretch factor for the row.\n   *\n   * #### Notes\n   * This returns `-1` if the index is out of range.\n   */\n  rowStretch(index: number): number {\n    let sizer = this._rowSizers[index];\n    return sizer ? sizer.stretch : -1;\n  }\n\n  /**\n   * Set the stretch factor for a specific row.\n   *\n   * @param index - The row index of interest.\n   *\n   * @param value - The stretch factor for the row.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  setRowStretch(index: number, value: number): void {\n    // Look up the row sizer.\n    let sizer = this._rowSizers[index];\n\n    // Bail if the index is out of range.\n    if (!sizer) {\n      return;\n    }\n\n    // Clamp the value to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the stretch does not change.\n    if (sizer.stretch === value) {\n      return;\n    }\n\n    // Update the sizer stretch.\n    sizer.stretch = value;\n\n    // Schedule an update of the parent.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Get the stretch factor for a specific column.\n   *\n   * @param index - The column index of interest.\n   *\n   * @returns The stretch factor for the column.\n   *\n   * #### Notes\n   * This returns `-1` if the index is out of range.\n   */\n  columnStretch(index: number): number {\n    let sizer = this._columnSizers[index];\n    return sizer ? sizer.stretch : -1;\n  }\n\n  /**\n   * Set the stretch factor for a specific column.\n   *\n   * @param index - The column index of interest.\n   *\n   * @param value - The stretch factor for the column.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  setColumnStretch(index: number, value: number): void {\n    // Look up the column sizer.\n    let sizer = this._columnSizers[index];\n\n    // Bail if the index is out of range.\n    if (!sizer) {\n      return;\n    }\n\n    // Clamp the value to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the stretch does not change.\n    if (sizer.stretch === value) {\n      return;\n    }\n\n    // Update the sizer stretch.\n    sizer.stretch = value;\n\n    // Schedule an update of the parent.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   */\n  iter(): IIterator<Widget> {\n    return map(this._items, item => item.widget);\n  }\n\n  /**\n   * Add a widget to the grid layout.\n   *\n   * @param widget - The widget to add to the layout.\n   *\n   * #### Notes\n   * If the widget is already contained in the layout, this is no-op.\n   */\n  addWidget(widget: Widget): void {\n    // Look up the index for the widget.\n    let i = ArrayExt.findFirstIndex(this._items, it => it.widget === widget);\n\n    // Bail if the widget is already in the layout.\n    if (i !== -1) {\n      return;\n    }\n\n    // Add the widget to the layout.\n    this._items.push(new LayoutItem(widget));\n\n    // Attach the widget to the parent.\n    if (this.parent) {\n      this.attachWidget(widget);\n    }\n  }\n\n  /**\n   * Remove a widget from the grid layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    // Look up the index for the widget.\n    let i = ArrayExt.findFirstIndex(this._items, it => it.widget === widget);\n\n    // Bail if the widget is not in the layout.\n    if (i === -1) {\n      return;\n    }\n\n    // Remove the widget from the layout.\n    let item = ArrayExt.removeAt(this._items, i)!;\n\n    // Detach the widget from the parent.\n    if (this.parent) {\n      this.detachWidget(widget);\n    }\n\n    // Dispose the layout item.\n    item.dispose();\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    super.init();\n    each(this, widget => { this.attachWidget(widget); });\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param widget - The widget to attach to the parent.\n   */\n  protected attachWidget(widget: Widget): void {\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param widget - The widget to detach from the parent.\n   */\n  protected detachWidget(widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Reset the min sizes of the sizers.\n    for (let i = 0, n = this.rowCount; i < n; ++i) {\n      this._rowSizers[i].minSize = 0;\n    }\n    for (let i = 0, n = this.columnCount; i < n; ++i) {\n      this._columnSizers[i].minSize = 0;\n    }\n\n    // Filter for the visible layout items.\n    let items = this._items.filter(it => !it.isHidden);\n\n    // Fit the layout items.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      items[i].fit();\n    }\n\n    // Get the max row and column index.\n    let maxRow = this.rowCount - 1;\n    let maxCol = this.columnCount - 1;\n\n    // Sort the items by row span.\n    items.sort(Private.rowSpanCmp);\n\n    // Update the min sizes of the row sizers.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = items[i];\n\n      // Get the row bounds for the item.\n      let config = GridLayout.getCellConfig(item.widget);\n      let r1 = Math.min(config.row, maxRow);\n      let r2 = Math.min(config.row + config.rowSpan - 1, maxRow);\n\n      // Distribute the minimum height to the sizers as needed.\n      Private.distributeMin(this._rowSizers, r1, r2, item.minHeight);\n    }\n\n    // Sort the items by column span.\n    items.sort(Private.columnSpanCmp);\n\n    // Update the min sizes of the column sizers.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = items[i];\n\n      // Get the column bounds for the item.\n      let config = GridLayout.getCellConfig(item.widget);\n      let c1 = Math.min(config.column, maxCol);\n      let c2 = Math.min(config.column + config.columnSpan - 1, maxCol);\n\n      // Distribute the minimum width to the sizers as needed.\n      Private.distributeMin(this._columnSizers, c1, c2, item.minWidth);\n    }\n\n    // If no size constraint is needed, just update the parent.\n    if (this.fitPolicy === 'set-no-constraint') {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n      return;\n    }\n\n    // Set up the computed min size.\n    let minH = maxRow * this._rowSpacing;\n    let minW = maxCol * this._columnSpacing;\n\n    // Add the sizer minimums to the computed min size.\n    for (let i = 0, n = this.rowCount; i < n; ++i) {\n      minH += this._rowSizers[i].minSize;\n    }\n    for (let i = 0, n = this.columnCount; i < n; ++i) {\n      minW += this._columnSizers[i].minSize;\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the layout area adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Get the max row and column index.\n    let maxRow = this.rowCount - 1;\n    let maxCol = this.columnCount - 1;\n\n    // Compute the total fixed row and column space.\n    let fixedRowSpace = maxRow * this._rowSpacing;\n    let fixedColSpace = maxCol * this._columnSpacing;\n\n    // Distribute the available space to the box sizers.\n    BoxEngine.calc(this._rowSizers, Math.max(0, height - fixedRowSpace));\n    BoxEngine.calc(this._columnSizers, Math.max(0, width - fixedColSpace));\n\n    // Update the row start positions.\n    for (let i = 0, pos = top, n = this.rowCount; i < n; ++i) {\n      this._rowStarts[i] = pos;\n      pos += this._rowSizers[i].size + this._rowSpacing;\n    }\n\n    // Update the column start positions.\n    for (let i = 0, pos = left, n = this.columnCount; i < n; ++i) {\n      this._columnStarts[i] = pos;\n      pos += this._columnSizers[i].size + this._columnSpacing;\n    }\n\n    // Update the geometry of the layout items.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Fetch the cell bounds for the widget.\n      let config = GridLayout.getCellConfig(item.widget);\n      let r1 = Math.min(config.row, maxRow);\n      let c1 = Math.min(config.column, maxCol);\n      let r2 = Math.min(config.row + config.rowSpan - 1, maxRow);\n      let c2 = Math.min(config.column + config.columnSpan - 1, maxCol);\n\n      // Compute the cell geometry.\n      let x = this._columnStarts[c1];\n      let y = this._rowStarts[r1];\n      let w = this._columnStarts[c2] + this._columnSizers[c2].size - x;\n      let h = this._rowStarts[r2] + this._rowSizers[r2].size - y;\n\n      // Update the geometry of the layout item.\n      item.update(x, y, w, h);\n    }\n  }\n\n  private _dirty = false;\n  private _rowSpacing = 4;\n  private _columnSpacing = 4;\n  private _items: LayoutItem[] = [];\n  private _rowStarts: number[] = [];\n  private _columnStarts: number[] = [];\n  private _rowSizers: BoxSizer[] = [new BoxSizer()];\n  private _columnSizers: BoxSizer[] = [new BoxSizer()];\n  private _box: ElementExt.IBoxSizing | null = null;\n}\n\n\n/**\n * The namespace for the `GridLayout` class statics.\n */\nexport\nnamespace GridLayout {\n  /**\n   * An options object for initializing a grid layout.\n   */\n  export\n  interface IOptions extends Layout.IOptions {\n    /**\n     * The initial row count for the layout.\n     *\n     * The default is `1`.\n     */\n    rowCount?: number;\n\n    /**\n     * The initial column count for the layout.\n     *\n     * The default is `1`.\n     */\n    columnCount?: number;\n\n    /**\n     * The spacing between rows in the layout.\n     *\n     * The default is `4`.\n     */\n    rowSpacing?: number;\n\n    /**\n     * The spacing between columns in the layout.\n     *\n     * The default is `4`.\n     */\n    columnSpacing?: number;\n  }\n\n  /**\n   * An object which holds the cell configuration for a widget.\n   */\n  export\n  interface ICellConfig {\n    /**\n     * The row index for the widget.\n     */\n    readonly row: number;\n\n    /**\n     * The column index for the widget.\n     */\n    readonly column: number;\n\n    /**\n     * The row span for the widget.\n     */\n    readonly rowSpan: number;\n\n    /**\n     * The column span for the widget.\n     */\n    readonly columnSpan: number;\n  }\n\n  /**\n   * Get the cell config for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The cell config for the widget.\n   */\n  export\n  function getCellConfig(widget: Widget): ICellConfig {\n    return Private.cellConfigProperty.get(widget);\n  }\n\n  /**\n   * Set the cell config for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the cell config.\n   */\n  export\n  function setCellConfig(widget: Widget, value: Partial<ICellConfig>): void {\n    Private.cellConfigProperty.set(widget, Private.normalizeConfig(value));\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The property descriptor for the widget cell config.\n   */\n  export\n  const cellConfigProperty = new AttachedProperty<Widget, GridLayout.ICellConfig>({\n    name: 'cellConfig',\n    create: () => ({ row: 0, column: 0, rowSpan: 1, columnSpan: 1 }),\n    changed: onChildCellConfigChanged\n  });\n\n  /**\n   * Normalize a partial cell config object.\n   */\n  export\n  function normalizeConfig(config: Partial<GridLayout.ICellConfig>): GridLayout.ICellConfig {\n    let row = Math.max(0, Math.floor(config.row || 0));\n    let column = Math.max(0, Math.floor(config.column || 0));\n    let rowSpan = Math.max(1, Math.floor(config.rowSpan || 0));\n    let columnSpan = Math.max(1, Math.floor(config.columnSpan || 0));\n    return { row, column, rowSpan, columnSpan };\n  }\n\n  /**\n   * Clamp a value to an integer >= 0.\n   */\n  export\n  function clampValue(value: number): number {\n    return Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * A sort comparison function for row spans.\n   */\n  export\n  function rowSpanCmp(a: LayoutItem, b: LayoutItem): number {\n    let c1 = cellConfigProperty.get(a.widget);\n    let c2 = cellConfigProperty.get(b.widget);\n    return c1.rowSpan - c2.rowSpan;\n  }\n\n  /**\n   * A sort comparison function for column spans.\n   */\n  export\n  function columnSpanCmp(a: LayoutItem, b: LayoutItem): number {\n    let c1 = cellConfigProperty.get(a.widget);\n    let c2 = cellConfigProperty.get(b.widget);\n    return c1.columnSpan - c2.columnSpan;\n  }\n\n  /**\n   * Reallocate the box sizers for the given grid dimensions.\n   */\n  export\n  function reallocSizers(sizers: BoxSizer[], count: number): void {\n    // Coerce the count to the valid range.\n    count = Math.max(1, Math.floor(count));\n\n    // Add the missing sizers.\n    while (sizers.length < count) {\n      sizers.push(new BoxSizer());\n    }\n\n    // Remove the extra sizers.\n    if (sizers.length > count) {\n      sizers.length = count;\n    }\n  }\n\n  /**\n   * Distribute a min size constraint across a range of sizers.\n   */\n  export\n  function distributeMin(sizers: BoxSizer[], i1: number, i2: number, minSize: number): void {\n    // Sanity check the indices.\n    if (i2 < i1) {\n      return;\n    }\n\n    // Handle the simple case of no cell span.\n    if (i1 === i2) {\n      let sizer = sizers[i1];\n      sizer.minSize = Math.max(sizer.minSize, minSize);\n      return;\n    }\n\n    // Compute the total current min size of the span.\n    let totalMin = 0;\n    for (let i = i1; i <= i2; ++i) {\n      totalMin += sizers[i].minSize;\n    }\n\n    // Do nothing if the total is greater than the required.\n    if (totalMin >= minSize) {\n      return;\n    }\n\n    // Compute the portion of the space to allocate to each sizer.\n    let portion = (minSize - totalMin) / (i2 - i1 + 1);\n\n    // Add the portion to each sizer.\n    for (let i = i1; i <= i2; ++i) {\n      sizers[i].minSize += portion;\n    }\n  }\n\n  /**\n   * The change handler for the child cell config property.\n   */\n  function onChildCellConfigChanged(child: Widget): void {\n    if (child.parent && child.parent.layout instanceof GridLayout) {\n      child.parent.fit();\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  getKeyboardLayout\n} from '@lumino/keyboard';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ElementDataset, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Menu\n} from './menu';\n\nimport {\n  Title\n} from './title';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays menus as a canonical menu bar.\n */\nexport\nclass MenuBar extends Widget {\n  /**\n   * Construct a new menu bar.\n   *\n   * @param options - The options for initializing the menu bar.\n   */\n  constructor(options: MenuBar.IOptions = {}) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-MenuBar');\n    /* <DEPRECATED> */\n    this.addClass('p-MenuBar');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.renderer = options.renderer || MenuBar.defaultRenderer;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    this._closeChildMenu();\n    this._menus.length = 0;\n    super.dispose();\n  }\n\n  /**\n   * The renderer used by the menu bar.\n   */\n  readonly renderer: MenuBar.IRenderer;\n\n  /**\n   * The child menu of the menu bar.\n   *\n   * #### Notes\n   * This will be `null` if the menu bar does not have an open menu.\n   */\n  get childMenu(): Menu | null {\n    return this._childMenu;\n  }\n\n  /**\n   * Get the menu bar content node.\n   *\n   * #### Notes\n   * This is the node which holds the menu title nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-MenuBar-content')[0] as HTMLUListElement;\n  }\n\n  /**\n   * Get the currently active menu.\n   */\n  get activeMenu(): Menu | null {\n    return this._menus[this._activeIndex] || null;\n  }\n\n  /**\n   * Set the currently active menu.\n   *\n   * #### Notes\n   * If the menu does not exist, the menu will be set to `null`.\n   */\n  set activeMenu(value: Menu | null) {\n    this.activeIndex = value ? this._menus.indexOf(value) : -1;\n  }\n\n  /**\n   * Get the index of the currently active menu.\n   *\n   * #### Notes\n   * This will be `-1` if no menu is active.\n   */\n  get activeIndex(): number {\n    return this._activeIndex;\n  }\n\n  /**\n   * Set the index of the currently active menu.\n   *\n   * #### Notes\n   * If the menu cannot be activated, the index will be set to `-1`.\n   */\n  set activeIndex(value: number) {\n    // Adjust the value for an out of range index.\n    if (value < 0 || value >= this._menus.length) {\n      value = -1;\n    }\n\n    // Bail early if the index will not change.\n    if (this._activeIndex === value) {\n      return;\n    }\n\n    // Update the active index.\n    this._activeIndex = value;\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * A read-only array of the menus in the menu bar.\n   */\n  get menus(): ReadonlyArray<Menu> {\n    return this._menus;\n  }\n\n  /**\n   * Open the active menu and activate its first menu item.\n   *\n   * #### Notes\n   * If there is no active menu, this is a no-op.\n   */\n  openActiveMenu(): void {\n    // Bail early if there is no active item.\n    if (this._activeIndex === -1) {\n      return;\n    }\n\n    // Open the child menu.\n    this._openChildMenu();\n\n    // Activate the first item in the child menu.\n    if (this._childMenu) {\n      this._childMenu.activeIndex = -1;\n      this._childMenu.activateNextItem();\n    }\n  }\n\n  /**\n   * Add a menu to the end of the menu bar.\n   *\n   * @param menu - The menu to add to the menu bar.\n   *\n   * #### Notes\n   * If the menu is already added to the menu bar, it will be moved.\n   */\n  addMenu(menu: Menu): void {\n    this.insertMenu(this._menus.length, menu);\n  }\n\n  /**\n   * Insert a menu into the menu bar at the specified index.\n   *\n   * @param index - The index at which to insert the menu.\n   *\n   * @param menu - The menu to insert into the menu bar.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the menus.\n   *\n   * If the menu is already added to the menu bar, it will be moved.\n   */\n  insertMenu(index: number, menu: Menu): void {\n    // Close the child menu before making changes.\n    this._closeChildMenu();\n\n    // Look up the index of the menu.\n    let i = this._menus.indexOf(menu);\n\n    // Clamp the insert index to the array bounds.\n    let j = Math.max(0, Math.min(index, this._menus.length));\n\n    // If the menu is not in the array, insert it.\n    if (i === -1) {\n      // Insert the menu into the array.\n      ArrayExt.insert(this._menus, j, menu);\n\n      // Add the styling class to the menu.\n      menu.addClass('lm-MenuBar-menu');\n      /* <DEPRECATED> */\n      menu.addClass('p-MenuBar-menu');\n      /* </DEPRECATED> */\n\n      // Connect to the menu signals.\n      menu.aboutToClose.connect(this._onMenuAboutToClose, this);\n      menu.menuRequested.connect(this._onMenuMenuRequested, this);\n      menu.title.changed.connect(this._onTitleChanged, this);\n\n      // Schedule an update of the items.\n      this.update();\n\n      // There is nothing more to do.\n      return;\n    }\n\n    // Otherwise, the menu exists in the array and should be moved.\n\n    // Adjust the index if the location is at the end of the array.\n    if (j === this._menus.length) {\n      j--;\n    }\n\n    // Bail if there is no effective move.\n    if (i === j) {\n      return;\n    }\n\n    // Move the menu to the new locations.\n    ArrayExt.move(this._menus, i, j);\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Remove a menu from the menu bar.\n   *\n   * @param menu - The menu to remove from the menu bar.\n   *\n   * #### Notes\n   * This is a no-op if the menu is not in the menu bar.\n   */\n  removeMenu(menu: Menu): void {\n    this.removeMenuAt(this._menus.indexOf(menu));\n  }\n\n  /**\n   * Remove the menu at a given index from the menu bar.\n   *\n   * @param index - The index of the menu to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeMenuAt(index: number): void {\n    // Close the child menu before making changes.\n    this._closeChildMenu();\n\n    // Remove the menu from the array.\n    let menu = ArrayExt.removeAt(this._menus, index);\n\n    // Bail if the index is out of range.\n    if (!menu) {\n      return;\n    }\n\n    // Disconnect from the menu signals.\n    menu.aboutToClose.disconnect(this._onMenuAboutToClose, this);\n    menu.menuRequested.disconnect(this._onMenuMenuRequested, this);\n    menu.title.changed.disconnect(this._onTitleChanged, this);\n\n    // Remove the styling class from the menu.\n    menu.removeClass('lm-MenuBar-menu');\n    /* <DEPRECATED> */\n    menu.removeClass('p-MenuBar-menu');\n    /* </DEPRECATED> */\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Remove all menus from the menu bar.\n   */\n  clearMenus(): void {\n    // Bail if there is nothing to remove.\n    if (this._menus.length === 0) {\n      return;\n    }\n\n    // Close the child menu before making changes.\n    this._closeChildMenu();\n\n    // Disconnect from the menu signals and remove the styling class.\n    for (let menu of this._menus) {\n      menu.aboutToClose.disconnect(this._onMenuAboutToClose, this);\n      menu.menuRequested.disconnect(this._onMenuMenuRequested, this);\n      menu.title.changed.disconnect(this._onTitleChanged, this);\n      menu.removeClass('lm-MenuBar-menu');\n      /* <DEPRECATED> */\n      menu.removeClass('p-MenuBar-menu');\n      /* </DEPRECATED> */\n    }\n\n    // Clear the menus array.\n    this._menus.length = 0;\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Handle the DOM events for the menu bar.\n   *\n   * @param event - The DOM event sent to the menu bar.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the menu bar's DOM nodes. It\n   * should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseleave':\n      this._evtMouseLeave(event as MouseEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('keydown', this);\n    this.node.addEventListener('mousedown', this);\n    this.node.addEventListener('mousemove', this);\n    this.node.addEventListener('mouseleave', this);\n    this.node.addEventListener('contextmenu', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('keydown', this);\n    this.node.removeEventListener('mousedown', this);\n    this.node.removeEventListener('mousemove', this);\n    this.node.removeEventListener('mouseleave', this);\n    this.node.removeEventListener('contextmenu', this);\n    this._closeChildMenu();\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (this.isAttached) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let menus = this._menus;\n    let renderer = this.renderer;\n    let activeIndex = this._activeIndex;\n    let content = new Array<VirtualElement>(menus.length);\n    for (let i = 0, n = menus.length; i < n; ++i) {\n      let title = menus[i].title;\n      let active = i === activeIndex;\n      content[i] = renderer.renderItem({ title, active });\n    }\n    VirtualDOM.render(content, this.contentNode);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the menu bar.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // A menu bar handles all keydown events.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the key code for the event.\n    let kc = event.keyCode;\n\n    // Enter, Up Arrow, Down Arrow\n    if (kc === 13 || kc === 38 || kc === 40) {\n      this.openActiveMenu();\n      return;\n    }\n\n    // Escape\n    if (kc === 27) {\n      this._closeChildMenu();\n      this.activeIndex = -1;\n      this.node.blur();\n      return;\n    }\n\n    // Left Arrow\n    if (kc === 37) {\n      let i = this._activeIndex;\n      let n = this._menus.length;\n      this.activeIndex = i === 0 ? n - 1 : i - 1;\n      return;\n    }\n\n    // Right Arrow\n    if (kc === 39) {\n      let i = this._activeIndex;\n      let n = this._menus.length;\n      this.activeIndex = i === n - 1 ? 0 : i + 1;\n      return;\n    }\n\n    // Get the pressed key character.\n    let key = getKeyboardLayout().keyForKeydownEvent(event);\n\n    // Bail if the key is not valid.\n    if (!key) {\n      return;\n    }\n\n    // Search for the next best matching mnemonic item.\n    let start = this._activeIndex + 1;\n    let result = Private.findMnemonic(this._menus, key, start);\n\n    // Handle the requested mnemonic based on the search results.\n    // If exactly one mnemonic is matched, that menu is opened.\n    // Otherwise, the next mnemonic is activated if available,\n    // followed by the auto mnemonic if available.\n    if (result.index !== -1 && !result.multiple) {\n      this.activeIndex = result.index;\n      this.openActiveMenu();\n    } else if (result.index !== -1) {\n      this.activeIndex = result.index;\n    } else if (result.auto !== -1) {\n      this.activeIndex = result.auto;\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the menu bar.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Bail if the mouse press was not on the menu bar. This can occur\n    // when the document listener is installed for an active menu bar.\n    if (!ElementExt.hitTest(this.node, event.clientX, event.clientY)) {\n      return;\n    }\n\n    // Stop the propagation of the event. Immediate propagation is\n    // also stopped so that an open menu does not handle the event.\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n\n    // Check if the mouse is over one of the menu items.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return ElementExt.hitTest(node, event.clientX, event.clientY);\n    });\n\n    // If the press was not on an item, close the child menu.\n    if (index === -1) {\n      this._closeChildMenu();\n      return;\n    }\n\n    // If the press was not the left mouse button, do nothing further.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Otherwise, toggle the open state of the child menu.\n    if (this._childMenu) {\n      this._closeChildMenu();\n      this.activeIndex = index;\n    } else {\n      this.activeIndex = index;\n      this._openChildMenu();\n    }\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the menu bar.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Check if the mouse is over one of the menu items.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return ElementExt.hitTest(node, event.clientX, event.clientY);\n    });\n\n    // Bail early if the active index will not change.\n    if (index === this._activeIndex) {\n      return;\n    }\n\n    // Bail early if a child menu is open and the mouse is not over\n    // an item. This allows the child menu to be kept open when the\n    // mouse is over the empty part of the menu bar.\n    if (index === -1 && this._childMenu) {\n      return;\n    }\n\n    // Update the active index to the hovered item.\n    this.activeIndex = index;\n\n    // Open the new menu if a menu is already open.\n    if (this._childMenu) {\n      this._openChildMenu();\n    }\n  }\n\n  /**\n   * Handle the `'mouseleave'` event for the menu bar.\n   */\n  private _evtMouseLeave(event: MouseEvent): void {\n    // Reset the active index if there is no open menu.\n    if (!this._childMenu) {\n      this.activeIndex = -1;\n    }\n  }\n\n  /**\n   * Open the child menu at the active index immediately.\n   *\n   * If a different child menu is already open, it will be closed,\n   * even if there is no active menu.\n   */\n  private _openChildMenu(): void {\n    // If there is no active menu, close the current menu.\n    let newMenu = this.activeMenu;\n    if (!newMenu) {\n      this._closeChildMenu();\n      return;\n    }\n\n    // Bail if there is no effective menu change.\n    let oldMenu = this._childMenu;\n    if (oldMenu === newMenu) {\n      return;\n    }\n\n    // Swap the internal menu reference.\n    this._childMenu = newMenu;\n\n    // Close the current menu, or setup for the new menu.\n    if (oldMenu) {\n      oldMenu.close();\n    } else {\n      this.addClass('lm-mod-active');\n      /* <DEPRECATED> */\n      this.addClass('p-mod-active');\n      /* </DEPRECATED> */\n      document.addEventListener('mousedown', this, true);\n    }\n\n    // Ensure the menu bar is updated and look up the item node.\n    MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n    let itemNode = this.contentNode.children[this._activeIndex];\n\n    // Get the positioning data for the new menu.\n    let { left, bottom } = (itemNode as HTMLElement).getBoundingClientRect();\n\n    // Open the new menu at the computed location.\n    newMenu.open(left, bottom, { forceX: true, forceY: true });\n  }\n\n  /**\n   * Close the child menu immediately.\n   *\n   * This is a no-op if a child menu is not open.\n   */\n  private _closeChildMenu(): void {\n    // Bail if no child menu is open.\n    if (!this._childMenu) {\n      return;\n    }\n\n    // Remove the active class from the menu bar.\n    this.removeClass('lm-mod-active');\n    /* <DEPRECATED> */\n    this.removeClass('p-mod-active');\n    /* </DEPRECATED> */\n\n    // Remove the document listeners.\n    document.removeEventListener('mousedown', this, true);\n\n    // Clear the internal menu reference.\n    let menu = this._childMenu;\n    this._childMenu = null;\n\n    // Close the menu.\n    menu.close();\n\n    // Reset the active index.\n    this.activeIndex = -1;\n  }\n\n  /**\n   * Handle the `aboutToClose` signal of a menu.\n   */\n  private _onMenuAboutToClose(sender: Menu): void {\n    // Bail if the sender is not the child menu.\n    if (sender !== this._childMenu) {\n      return;\n    }\n\n    // Remove the active class from the menu bar.\n    this.removeClass('lm-mod-active');\n    /* <DEPRECATED> */\n    this.removeClass('p-mod-active');\n    /* </DEPRECATED> */\n\n    // Remove the document listeners.\n    document.removeEventListener('mousedown', this, true);\n\n    // Clear the internal menu reference.\n    this._childMenu = null;\n\n    // Reset the active index.\n    this.activeIndex = -1;\n  }\n\n  /**\n   * Handle the `menuRequested` signal of a child menu.\n   */\n  private _onMenuMenuRequested(sender: Menu, args: 'next' | 'previous'): void {\n    // Bail if the sender is not the child menu.\n    if (sender !== this._childMenu) {\n      return;\n    }\n\n    // Look up the active index and menu count.\n    let i = this._activeIndex;\n    let n = this._menus.length;\n\n    // Active the next requested index.\n    switch (args) {\n    case 'next':\n      this.activeIndex = i === n - 1 ? 0 : i + 1;\n      break;\n    case 'previous':\n      this.activeIndex = i === 0 ? n - 1 : i - 1;\n      break;\n    }\n\n    // Open the active menu.\n    this.openActiveMenu();\n  }\n\n  /**\n   * Handle the `changed` signal of a title object.\n   */\n  private _onTitleChanged(): void {\n    this.update();\n  }\n\n  private _activeIndex = -1;\n  private _menus: Menu[] = [];\n  private _childMenu: Menu | null = null;\n}\n\n\n/**\n * The namespace for the `MenuBar` class statics.\n */\nexport\nnamespace MenuBar {\n  /**\n   * An options object for creating a menu bar.\n   */\n  export\n  interface IOptions {\n    /**\n     * A custom renderer for creating menu bar content.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n  }\n\n  /**\n   * An object which holds the data to render a menu bar item.\n   */\n  export\n  interface IRenderData {\n    /**\n     * The title to be rendered.\n     */\n    readonly title: Title<Widget>;\n\n    /**\n     * Whether the item is the active item.\n     */\n    readonly active: boolean;\n  }\n\n  /**\n   * A renderer for use with a menu bar.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Render the virtual element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   *\n   * #### Notes\n   * Subclasses are free to reimplement rendering methods as needed.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Construct a new renderer.\n     */\n    constructor() { }\n\n    /**\n     * Render the virtual element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement {\n      let className = this.createItemClass(data);\n      let dataset = this.createItemDataset(data);\n      return (\n        h.li({ className, dataset },\n          this.renderIcon(data),\n          this.renderLabel(data)\n        )\n      );\n    }\n\n    /**\n     * Render the icon element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns A virtual element representing the item icon.\n     */\n    renderIcon(data: IRenderData): VirtualElement {\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof data.title.icon === 'string') {\n        return h.div({className}, data.title.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if data.title.icon is undefined, it will be ignored\n      return h.div({className}, data.title.icon!, data.title.iconLabel);\n    }\n\n    /**\n     * Render the label element for a menu item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    renderLabel(data: IRenderData): VirtualElement {\n      let content = this.formatLabel(data);\n      return h.div({ className:\n        'lm-MenuBar-itemLabel'\n          /* <DEPRECATED> */\n            + ' p-MenuBar-itemLabel'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Create the class name for the menu bar item.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the menu item.\n     */\n    createItemClass(data: IRenderData): string {\n      let name = 'lm-MenuBar-item';\n      /* <DEPRECATED> */\n      name += ' p-MenuBar-item';\n      /* </DEPRECATED> */\n      if (data.title.className) {\n        name += ` ${data.title.className}`;\n      }\n      if (data.active) {\n        name += ' lm-mod-active';\n      /* <DEPRECATED> */\n      name += ' p-mod-active';\n      /* </DEPRECATED> */\n      }\n      return name;\n    }\n\n    /**\n     * Create the dataset for a menu bar item.\n     *\n     * @param data - The data to use for the item.\n     *\n     * @returns The dataset for the menu bar item.\n     */\n    createItemDataset(data: IRenderData): ElementDataset {\n      return data.title.dataset;\n    }\n\n    /**\n     * Create the class name for the menu bar item icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IRenderData): string {\n      let name = 'lm-MenuBar-itemIcon';\n      /* <DEPRECATED> */\n      name += ' p-MenuBar-itemIcon';\n      /* </DEPRECATED> */\n      let extra = data.title.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    /**\n     * Create the render content for the label node.\n     *\n     * @param data - The data to use for the label content.\n     *\n     * @returns The content to add to the label node.\n     */\n    formatLabel(data: IRenderData): h.Child {\n      // Fetch the label text and mnemonic index.\n      let { label, mnemonic } = data.title;\n\n      // If the index is out of range, do not modify the label.\n      if (mnemonic < 0 || mnemonic >= label.length) {\n        return label;\n      }\n\n      // Split the label into parts.\n      let prefix = label.slice(0, mnemonic);\n      let suffix = label.slice(mnemonic + 1);\n      let char = label[mnemonic];\n\n      // Wrap the mnemonic character in a span.\n      let span = h.span({\n        className: 'lm-MenuBar-itemMnemonic'\n          /* <DEPRECATED> */\n          + ' p-MenuBar-itemMnemonic'\n          /* </DEPRECATED> */\n      }, char);\n\n      // Return the content parts.\n      return [prefix, span, suffix];\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create the DOM node for a menu bar.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let content = document.createElement('ul');\n    content.className = 'lm-MenuBar-content';\n    /* <DEPRECATED> */\n    content.classList.add('p-MenuBar-content');\n    /* </DEPRECATED> */\n    node.appendChild(content);\n    node.tabIndex = -1;\n    return node;\n  }\n\n  /**\n   * The results of a mnemonic search.\n   */\n  export\n  interface IMnemonicResult {\n    /**\n     * The index of the first matching mnemonic item, or `-1`.\n     */\n    index: number;\n\n    /**\n     * Whether multiple mnemonic items matched.\n     */\n    multiple: boolean;\n\n    /**\n     * The index of the first auto matched non-mnemonic item.\n     */\n    auto: number;\n  }\n\n  /**\n   * Find the best matching mnemonic item.\n   *\n   * The search starts at the given index and wraps around.\n   */\n  export\n  function findMnemonic(menus: ReadonlyArray<Menu>, key: string, start: number): IMnemonicResult {\n    // Setup the result variables.\n    let index = -1;\n    let auto = -1;\n    let multiple = false;\n\n    // Normalize the key to upper case.\n    let upperKey = key.toUpperCase();\n\n    // Search the items from the given start index.\n    for (let i = 0, n = menus.length; i < n; ++i) {\n      // Compute the wrapped index.\n      let k = (i + start) % n;\n\n      // Look up the menu title.\n      let title = menus[k].title;\n\n      // Ignore titles with an empty label.\n      if (title.label.length === 0) {\n        continue;\n      }\n\n      // Look up the mnemonic index for the label.\n      let mn = title.mnemonic;\n\n      // Handle a valid mnemonic index.\n      if (mn >= 0 && mn < title.label.length) {\n        if (title.label[mn].toUpperCase() === upperKey) {\n          if (index === -1) {\n            index = k;\n          } else {\n            multiple = true;\n          }\n        }\n        continue;\n      }\n\n      // Finally, handle the auto index if possible.\n      if (auto === -1 && title.label[0].toUpperCase() === upperKey) {\n        auto = k;\n      }\n    }\n\n    // Return the search results.\n    return { index, multiple, auto };\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Drag\n} from '@lumino/dragdrop';\n\nimport {\n  Message\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which implements a canonical scroll bar.\n */\nexport\nclass ScrollBar extends Widget {\n  /**\n   * Construct a new scroll bar.\n   *\n   * @param options - The options for initializing the scroll bar.\n   */\n  constructor(options: ScrollBar.IOptions = {}) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-ScrollBar');\n    /* <DEPRECATED> */\n    this.addClass('p-ScrollBar');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n\n    // Set the orientation.\n    this._orientation = options.orientation || 'vertical';\n    this.dataset['orientation'] = this._orientation;\n\n    // Parse the rest of the options.\n    if (options.maximum !== undefined) {\n      this._maximum = Math.max(0, options.maximum);\n    }\n    if (options.page !== undefined) {\n      this._page = Math.max(0, options.page);\n    }\n    if (options.value !== undefined) {\n      this._value = Math.max(0, Math.min(options.value, this._maximum));\n    }\n  }\n\n  /**\n   * A signal emitted when the user moves the scroll thumb.\n   *\n   * #### Notes\n   * The payload is the current value of the scroll bar.\n   */\n  get thumbMoved(): ISignal<this, number> {\n    return this._thumbMoved;\n  }\n\n  /**\n   * A signal emitted when the user clicks a step button.\n   *\n   * #### Notes\n   * The payload is whether a decrease or increase is requested.\n   */\n  get stepRequested(): ISignal<this, 'decrement' | 'increment'> {\n    return this._stepRequested;\n  }\n\n  /**\n   * A signal emitted when the user clicks the scroll track.\n   *\n   * #### Notes\n   * The payload is whether a decrease or increase is requested.\n   */\n  get pageRequested(): ISignal<this, 'decrement' | 'increment'> {\n    return this._pageRequested;\n  }\n\n  /**\n   * Get the orientation of the scroll bar.\n   */\n  get orientation(): ScrollBar.Orientation {\n    return this._orientation;\n  }\n\n  /**\n   * Set the orientation of the scroll bar.\n   */\n  set orientation(value: ScrollBar.Orientation) {\n    // Do nothing if the orientation does not change.\n    if (this._orientation === value) {\n      return;\n    }\n\n    // Release the mouse before making changes.\n    this._releaseMouse();\n\n    // Update the internal orientation.\n    this._orientation = value;\n    this.dataset['orientation'] = value;\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * Get the current value of the scroll bar.\n   */\n  get value(): number {\n    return this._value;\n  }\n\n  /**\n   * Set the current value of the scroll bar.\n   *\n   * #### Notes\n   * The value will be clamped to the range `[0, maximum]`.\n   */\n  set value(value: number) {\n    // Clamp the value to the allowable range.\n    value = Math.max(0, Math.min(value, this._maximum));\n\n    // Do nothing if the value does not change.\n    if (this._value === value) {\n      return;\n    }\n\n    // Update the internal value.\n    this._value = value;\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * Get the page size of the scroll bar.\n   *\n   * #### Notes\n   * The page size is the amount of visible content in the scrolled\n   * region, expressed in data units. It determines the size of the\n   * scroll bar thumb.\n   */\n  get page(): number {\n    return this._page;\n  }\n\n  /**\n   * Set the page size of the scroll bar.\n   *\n   * #### Notes\n   * The page size will be clamped to the range `[0, Infinity]`.\n   */\n  set page(value: number) {\n    // Clamp the page size to the allowable range.\n    value = Math.max(0, value);\n\n    // Do nothing if the value does not change.\n    if (this._page === value) {\n      return;\n    }\n\n    // Update the internal page size.\n    this._page = value;\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * Get the maximum value of the scroll bar.\n   */\n  get maximum(): number {\n    return this._maximum;\n  }\n\n  /**\n   * Set the maximum value of the scroll bar.\n   *\n   * #### Notes\n   * The max size will be clamped to the range `[0, Infinity]`.\n   */\n  set maximum(value: number) {\n    // Clamp the value to the allowable range.\n    value = Math.max(0, value);\n\n    // Do nothing if the value does not change.\n    if (this._maximum === value) {\n      return;\n    }\n\n    // Update the internal values.\n    this._maximum = value;\n\n    // Clamp the current value to the new range.\n    this._value = Math.min(this._value, value);\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * The scroll bar decrement button node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get decrementNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-button')[0] as HTMLDivElement;\n  }\n\n  /**\n   * The scroll bar increment button node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get incrementNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-button')[1] as HTMLDivElement;\n  }\n\n  /**\n   * The scroll bar track node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get trackNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-track')[0] as HTMLDivElement;\n  }\n\n  /**\n   * The scroll bar thumb node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get thumbNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-thumb')[0] as HTMLDivElement;\n  }\n\n  /**\n   * Handle the DOM events for the scroll bar.\n   *\n   * @param event - The DOM event sent to the scroll bar.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the scroll bar's DOM node.\n   *\n   * This should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A method invoked on a 'before-attach' message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('mousedown', this);\n    this.update();\n  }\n\n  /**\n   * A method invoked on an 'after-detach' message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('mousedown', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A method invoked on an 'update-request' message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    // Convert the value and page into percentages.\n    let value = this._value * 100 / this._maximum;\n    let page = this._page * 100 / (this._page + this._maximum);\n\n    // Clamp the value and page to the relevant range.\n    value = Math.max(0, Math.min(value, 100));\n    page = Math.max(0, Math.min(page, 100));\n\n    // Fetch the thumb style.\n    let thumbStyle = this.thumbNode.style;\n\n    // Update the thumb style for the current orientation.\n    if (this._orientation === 'horizontal') {\n      thumbStyle.top = '';\n      thumbStyle.height = '';\n      thumbStyle.left = `${value}%`;\n      thumbStyle.width = `${page}%`;\n      thumbStyle.transform = `translate(${-value}%, 0%)`;\n    } else {\n      thumbStyle.left = '';\n      thumbStyle.width = '';\n      thumbStyle.top = `${value}%`;\n      thumbStyle.height = `${page}%`;\n      thumbStyle.transform = `translate(0%, ${-value}%)`;\n    }\n  }\n\n  /**\n   * Handle the `'keydown'` event for the scroll bar.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop all input events during drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Ignore anything except the `Escape` key.\n    if (event.keyCode !== 27) {\n      return;\n    }\n\n    // Fetch the previous scroll value.\n    let value = this._pressData ? this._pressData.value : -1;\n\n    // Release the mouse.\n    this._releaseMouse();\n\n    // Restore the old scroll value if possible.\n    if (value !== -1) {\n      this._moveThumb(value);\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the scroll bar.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if it's not a left mouse press.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Send an activate request to the scroll bar. This can be\n    // used by message hooks to activate something relevant.\n    this.activate();\n\n    // Do nothing if the mouse is already captured.\n    if (this._pressData) {\n      return;\n    }\n\n    // Find the pressed scroll bar part.\n    let part = Private.findPart(this, event.target as HTMLElement);\n\n    // Do nothing if the part is not of interest.\n    if (!part) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Override the mouse cursor.\n    let override = Drag.overrideCursor('default');\n\n    // Set up the press data.\n    this._pressData = {\n      part, override,\n      delta: -1, value: -1,\n      mouseX: event.clientX,\n      mouseY: event.clientY\n    };\n\n    // Add the extra event listeners.\n    document.addEventListener('mousemove', this, true);\n    document.addEventListener('mouseup', this, true);\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('contextmenu', this, true);\n\n    // Handle a thumb press.\n    if (part === 'thumb') {\n      // Fetch the thumb node.\n      let thumbNode = this.thumbNode;\n\n      // Fetch the client rect for the thumb.\n      let thumbRect = thumbNode.getBoundingClientRect();\n\n      // Update the press data delta for the current orientation.\n      if (this._orientation === 'horizontal') {\n        this._pressData.delta = event.clientX - thumbRect.left;\n      } else {\n        this._pressData.delta = event.clientY - thumbRect.top;\n      }\n\n      // Add the active class to the thumb node.\n      thumbNode.classList.add('lm-mod-active');\n      /* <DEPRECATED> */\n      thumbNode.classList.add('p-mod-active');\n      /* </DEPRECATED> */\n\n      // Store the current value in the press data.\n      this._pressData.value = this._value;\n\n      // Finished.\n      return;\n    }\n\n    // Handle a track press.\n    if (part === 'track') {\n      // Fetch the client rect for the thumb.\n      let thumbRect = this.thumbNode.getBoundingClientRect();\n\n      // Determine the direction for the page request.\n      let dir: 'decrement' | 'increment';\n      if (this._orientation === 'horizontal') {\n        dir = event.clientX < thumbRect.left ? 'decrement' : 'increment';\n      } else {\n        dir = event.clientY < thumbRect.top ? 'decrement' : 'increment';\n      }\n\n      // Start the repeat timer.\n      this._repeatTimer = window.setTimeout(this._onRepeat, 350);\n\n      // Emit the page requested signal.\n      this._pageRequested.emit(dir);\n\n      // Finished.\n      return;\n    }\n\n    // Handle a decrement button press.\n    if (part === 'decrement') {\n      // Add the active class to the decrement node.\n      this.decrementNode.classList.add('lm-mod-active');\n      /* <DEPRECATED> */\n      this.decrementNode.classList.add('p-mod-active');\n      /* </DEPRECATED> */\n\n      // Start the repeat timer.\n      this._repeatTimer = window.setTimeout(this._onRepeat, 350);\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('decrement');\n\n      // Finished.\n      return;\n    }\n\n    // Handle an increment button press.\n    if (part === 'increment') {\n\n      // Add the active class to the increment node.\n      this.incrementNode.classList.add('lm-mod-active');\n      /* <DEPRECATED> */\n      this.incrementNode.classList.add('p-mod-active');\n      /* </DEPRECATED> */\n\n      // Start the repeat timer.\n      this._repeatTimer = window.setTimeout(this._onRepeat, 350);\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('increment');\n\n      // Finished.\n      return;\n    }\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the scroll bar.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Do nothing if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Update the mouse position.\n    this._pressData.mouseX = event.clientX;\n    this._pressData.mouseY = event.clientY;\n\n    // Bail if the thumb is not being dragged.\n    if (this._pressData.part !== 'thumb') {\n      return;\n    }\n\n    // Get the client rect for the thumb and track.\n    let thumbRect = this.thumbNode.getBoundingClientRect();\n    let trackRect = this.trackNode.getBoundingClientRect();\n\n    // Fetch the scroll geometry based on the orientation.\n    let trackPos: number;\n    let trackSpan: number;\n    if (this._orientation === 'horizontal') {\n      trackPos = event.clientX - trackRect.left - this._pressData.delta;\n      trackSpan = trackRect.width - thumbRect.width;\n    } else {\n      trackPos = event.clientY - trackRect.top - this._pressData.delta;\n      trackSpan = trackRect.height - thumbRect.height;\n    }\n\n    // Compute the desired value from the scroll geometry.\n    let value = trackSpan === 0 ? 0 : trackPos * this._maximum / trackSpan;\n\n    // Move the thumb to the computed value.\n    this._moveThumb(value);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the scroll bar.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if it's not a left mouse release.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Release the mouse.\n    this._releaseMouse();\n  }\n\n  /**\n   * Release the mouse and restore the node states.\n   */\n  private _releaseMouse(): void {\n    // Bail if there is no press data.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Clear the repeat timer.\n    clearTimeout(this._repeatTimer);\n    this._repeatTimer = -1;\n\n    // Clear the press data.\n    this._pressData.override.dispose();\n    this._pressData = null;\n\n    // Remove the extra event listeners.\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n\n    // Remove the active classes from the nodes.\n    this.thumbNode.classList.remove('lm-mod-active');\n    this.decrementNode.classList.remove('lm-mod-active');\n    this.incrementNode.classList.remove('lm-mod-active');\n    /* <DEPRECATED> */\n    this.thumbNode.classList.remove('p-mod-active');\n    this.decrementNode.classList.remove('p-mod-active');\n    this.incrementNode.classList.remove('p-mod-active');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Move the thumb to the specified position.\n   */\n  private _moveThumb(value: number): void {\n    // Clamp the value to the allowed range.\n    value = Math.max(0, Math.min(value, this._maximum));\n\n    // Bail if the value does not change.\n    if (this._value === value) {\n      return;\n    }\n\n    // Update the internal value.\n    this._value = value;\n\n    // Schedule an update of the scroll bar.\n    this.update();\n\n    // Emit the thumb moved signal.\n    this._thumbMoved.emit(value);\n  }\n\n  /**\n   * A timeout callback for repeating the mouse press.\n   */\n  private _onRepeat = () => {\n    // Clear the repeat timer id.\n    this._repeatTimer = -1;\n\n    // Bail if the mouse has been released.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Look up the part that was pressed.\n    let part = this._pressData.part;\n\n    // Bail if the thumb was pressed.\n    if (part === 'thumb') {\n      return;\n    }\n\n    // Schedule the timer for another repeat.\n    this._repeatTimer = window.setTimeout(this._onRepeat, 20);\n\n    // Get the current mouse position.\n    let mouseX = this._pressData.mouseX;\n    let mouseY = this._pressData.mouseY;\n\n    // Handle a decrement button repeat.\n    if (part === 'decrement') {\n      // Bail if the mouse is not over the button.\n      if (!ElementExt.hitTest(this.decrementNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('decrement');\n\n      // Finished.\n      return;\n    }\n\n    // Handle an increment button repeat.\n    if (part === 'increment') {\n      // Bail if the mouse is not over the button.\n      if (!ElementExt.hitTest(this.incrementNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('increment');\n\n      // Finished.\n      return;\n    }\n\n    // Handle a track repeat.\n    if (part === 'track') {\n      // Bail if the mouse is not over the track.\n      if (!ElementExt.hitTest(this.trackNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Fetch the thumb node.\n      let thumbNode = this.thumbNode;\n\n      // Bail if the mouse is over the thumb.\n      if (ElementExt.hitTest(thumbNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Fetch the client rect for the thumb.\n      let thumbRect = thumbNode.getBoundingClientRect();\n\n      // Determine the direction for the page request.\n      let dir: 'decrement' | 'increment';\n      if (this._orientation === 'horizontal') {\n        dir = mouseX < thumbRect.left ? 'decrement' : 'increment';\n      } else {\n        dir = mouseY < thumbRect.top ? 'decrement' : 'increment';\n      }\n\n      // Emit the page requested signal.\n      this._pageRequested.emit(dir);\n\n      // Finished.\n      return;\n    }\n  };\n\n  private _value = 0;\n  private _page = 10;\n  private _maximum = 100;\n  private _repeatTimer = -1;\n  private _orientation: ScrollBar.Orientation;\n  private _pressData: Private.IPressData | null = null;\n  private _thumbMoved = new Signal<this, number>(this);\n  private _stepRequested = new Signal<this, 'decrement' | 'increment'>(this);\n  private _pageRequested = new Signal<this, 'decrement' | 'increment'>(this);\n}\n\n\n/**\n * The namespace for the `ScrollBar` class statics.\n */\nexport\nnamespace ScrollBar {\n  /**\n   * A type alias for a scroll bar orientation.\n   */\n  export\n  type Orientation = 'horizontal' | 'vertical';\n\n  /**\n   * An options object for creating a scroll bar.\n   */\n  export\n  interface IOptions {\n    /**\n     * The orientation of the scroll bar.\n     *\n     * The default is `'vertical'`.\n     */\n    orientation?: Orientation;\n\n    /**\n     * The value for the scroll bar.\n     *\n     * The default is `0`.\n     */\n    value?: number;\n\n    /**\n     * The page size for the scroll bar.\n     *\n     * The default is `10`.\n     */\n    page?: number;\n\n    /**\n     * The maximum value for the scroll bar.\n     *\n     * The default is `100`.\n     */\n    maximum?: number;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A type alias for the parts of a scroll bar.\n   */\n  export\n  type ScrollBarPart = 'thumb' | 'track' | 'decrement' | 'increment';\n\n  /**\n   * An object which holds mouse press data.\n   */\n  export\n  interface IPressData {\n    /**\n     * The scroll bar part which was pressed.\n     */\n    part: ScrollBarPart;\n\n    /**\n     * The offset of the press in thumb coordinates, or -1.\n     */\n    delta: number;\n\n    /**\n     * The scroll value at the time the thumb was pressed, or -1.\n     */\n    value: number;\n\n    /**\n     * The disposable which will clear the override cursor.\n     */\n    override: IDisposable;\n\n    /**\n     * The current X position of the mouse.\n     */\n    mouseX: number;\n\n    /**\n     * The current Y position of the mouse.\n     */\n    mouseY: number;\n  }\n\n  /**\n   * Create the DOM node for a scroll bar.\n   */\n  export\n  function createNode(): HTMLElement {\n    let node = document.createElement('div');\n    let decrement = document.createElement('div');\n    let increment = document.createElement('div');\n    let track = document.createElement('div');\n    let thumb = document.createElement('div');\n    decrement.className = 'lm-ScrollBar-button';\n    increment.className = 'lm-ScrollBar-button';\n    decrement.dataset['action'] = 'decrement';\n    increment.dataset['action'] = 'increment';\n    track.className = 'lm-ScrollBar-track';\n    thumb.className = 'lm-ScrollBar-thumb';\n    /* <DEPRECATED> */\n    decrement.classList.add('p-ScrollBar-button');\n    increment.classList.add('p-ScrollBar-button');\n    track.classList.add('p-ScrollBar-track');\n    thumb.classList.add('p-ScrollBar-thumb');\n    /* </DEPRECATED> */\n    track.appendChild(thumb);\n    node.appendChild(decrement);\n    node.appendChild(track);\n    node.appendChild(increment);\n    return node;\n  }\n\n  /**\n   * Find the scroll bar part which contains the given target.\n   */\n  export\n  function findPart(scrollBar: ScrollBar, target: HTMLElement): ScrollBarPart | null {\n    // Test the thumb.\n    if (scrollBar.thumbNode.contains(target)) {\n      return 'thumb';\n    }\n\n    // Test the track.\n    if (scrollBar.trackNode.contains(target)) {\n      return 'track';\n    }\n\n    // Test the decrement button.\n    if (scrollBar.decrementNode.contains(target)) {\n      return 'decrement';\n    }\n\n    // Test the increment button.\n    if (scrollBar.incrementNode.contains(target)) {\n      return 'increment';\n    }\n\n    // Indicate no match.\n    return null;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterator, each, empty, once\n} from '@lumino/algorithm';\n\nimport {\n  MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  Layout\n} from './layout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A concrete layout implementation which holds a single widget.\n *\n * #### Notes\n * This class is useful for creating simple container widgets which\n * hold a single child. The child should be positioned with CSS.\n */\nexport\nclass SingletonLayout extends Layout {\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    if (this._widget) {\n      let widget = this._widget;\n      this._widget = null;\n      widget.dispose();\n    }\n    super.dispose();\n  }\n\n  /**\n   * Get the child widget for the layout.\n   */\n  get widget(): Widget | null {\n    return this._widget;\n  }\n\n  /**\n   * Set the child widget for the layout.\n   *\n   * #### Notes\n   * Setting the child widget will cause the old child widget to be\n   * automatically disposed. If that is not desired, set the parent\n   * of the old child to `null` before assigning a new child.\n   */\n  set widget(widget: Widget | null) {\n    // Remove the widget from its current parent. This is a no-op\n    // if the widget's parent is already the layout parent widget.\n    if (widget) {\n      widget.parent = this.parent;\n    }\n\n    // Bail early if the widget does not change.\n    if (this._widget === widget) {\n      return;\n    }\n\n    // Dispose of the old child widget.\n    if (this._widget) {\n      this._widget.dispose();\n    }\n\n    // Update the internal widget.\n    this._widget = widget;\n\n    // Attach the new child widget if needed.\n    if (this.parent && widget) {\n      this.attachWidget(widget);\n    }\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   */\n  iter(): IIterator<Widget> {\n    return this._widget ? once(this._widget) : empty<Widget>();\n  }\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    // Bail early if the widget does not exist in the layout.\n    if (this._widget !== widget) {\n      return;\n    }\n\n    // Clear the internal widget.\n    this._widget = null;\n\n    // If the layout is parented, detach the widget from the DOM.\n    if (this.parent) {\n      this.detachWidget(widget);\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    super.init();\n    each(this, widget => { this.attachWidget(widget); });\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the single layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation adds the widgets's node to the parent's\n   * node at the proper location, and sends the appropriate attach\n   * messages to the widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is added to the parent's node.\n   */\n  protected attachWidget(widget: Widget): void {\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the single layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation removes the widget's node from the\n   * parent's node, and sends the appropriate detach messages to the\n   * widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is removed from the parent's node.\n   */\n  protected detachWidget(widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n  }\n\n  private _widget: Widget | null = null;\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  BoxEngine, BoxSizer\n} from './boxengine';\n\nimport {\n  LayoutItem\n} from './layout';\n\nimport {\n  PanelLayout\n} from './panellayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout which arranges its widgets into resizable sections.\n */\nexport\nclass SplitLayout extends PanelLayout {\n  /**\n   * Construct a new split layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: SplitLayout.IOptions) {\n    super();\n    this.renderer = options.renderer;\n    if (options.orientation !== undefined) {\n      this._orientation = options.orientation;\n    }\n    if (options.alignment !== undefined) {\n      this._alignment = options.alignment;\n    }\n    if (options.spacing !== undefined) {\n      this._spacing = Private.clampSpacing(options.spacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the layout items.\n    each(this._items, item => { item.dispose(); });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n    this._sizers.length = 0;\n    this._handles.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * The renderer used by the split layout.\n   */\n  readonly renderer: SplitLayout.IRenderer;\n\n  /**\n   * Get the layout orientation for the split layout.\n   */\n  get orientation(): SplitLayout.Orientation {\n    return this._orientation;\n  }\n\n  /**\n   * Set the layout orientation for the split layout.\n   */\n  set orientation(value: SplitLayout.Orientation) {\n    if (this._orientation === value) {\n      return;\n    }\n    this._orientation = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['orientation'] = value;\n    this.parent.fit();\n  }\n\n  /**\n   * Get the content alignment for the split layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand  to fill the\n   * entire split layout.\n   */\n  get alignment(): SplitLayout.Alignment {\n    return this._alignment;\n  }\n\n  /**\n   * Set the content alignment for the split layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand  to fill the\n   * entire split layout.\n   */\n  set alignment(value: SplitLayout.Alignment) {\n    if (this._alignment === value) {\n      return;\n    }\n    this._alignment = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['alignment'] = value;\n    this.parent.update();\n  }\n\n  /**\n   * Get the inter-element spacing for the split layout.\n   */\n  get spacing(): number {\n    return this._spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the split layout.\n   */\n  set spacing(value: number) {\n    value = Private.clampSpacing(value);\n    if (this._spacing === value) {\n      return;\n    }\n    this._spacing = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.fit();\n  }\n\n  /**\n   * A read-only array of the split handles in the layout.\n   */\n  get handles(): ReadonlyArray<HTMLDivElement> {\n    return this._handles;\n  }\n\n  /**\n   * Get the relative sizes of the widgets in the layout.\n   *\n   * @returns A new array of the relative sizes of the widgets.\n   *\n   * #### Notes\n   * The returned sizes reflect the sizes of the widgets normalized\n   * relative to their siblings.\n   *\n   * This method **does not** measure the DOM nodes.\n   */\n  relativeSizes(): number[] {\n    return Private.normalize(this._sizers.map(sizer => sizer.size));\n  }\n\n  /**\n   * Set the relative sizes for the widgets in the layout.\n   *\n   * @param sizes - The relative sizes for the widgets in the panel.\n   *\n   * #### Notes\n   * Extra values are ignored, too few will yield an undefined layout.\n   *\n   * The actual geometry of the DOM nodes is updated asynchronously.\n   */\n  setRelativeSizes(sizes: number[]): void {\n    // Copy the sizes and pad with zeros as needed.\n    let n = this._sizers.length;\n    let temp = sizes.slice(0, n);\n    while (temp.length < n) {\n      temp.push(0);\n    }\n\n    // Normalize the padded sizes.\n    let normed = Private.normalize(temp);\n\n    // Apply the normalized sizes to the sizers.\n    for (let i = 0; i < n; ++i) {\n      let sizer = this._sizers[i];\n      sizer.sizeHint = normed[i];\n      sizer.size = normed[i];\n    }\n\n    // Set the flag indicating the sizes are normalized.\n    this._hasNormedSizes = true;\n\n    // Trigger an update of the parent widget.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Move the offset position of a split handle.\n   *\n   * @param index - The index of the handle of the interest.\n   *\n   * @param position - The desired offset position of the handle.\n   *\n   * #### Notes\n   * The position is relative to the offset parent.\n   *\n   * This will move the handle as close as possible to the desired\n   * position. The sibling widgets will be adjusted as necessary.\n   */\n  moveHandle(index: number, position: number): void {\n    // Bail if the index is invalid or the handle is hidden.\n    let handle = this._handles[index];\n    if (!handle || handle.classList.contains('lm-mod-hidden')) {\n      return;\n    }\n\n    // Compute the desired delta movement for the handle.\n    let delta: number;\n    if (this._orientation === 'horizontal') {\n      delta = position - handle.offsetLeft;\n    } else {\n      delta = position - handle.offsetTop;\n    }\n\n    // Bail if there is no handle movement.\n    if (delta === 0) {\n      return;\n    }\n\n    // Prevent widget resizing unless needed.\n    for (let sizer of this._sizers) {\n      if (sizer.size > 0) {\n        sizer.sizeHint = sizer.size;\n      }\n    }\n\n    // Adjust the sizers to reflect the handle movement.\n    BoxEngine.adjust(this._sizers, index, delta);\n\n    // Update the layout of the widgets.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    this.parent!.dataset['orientation'] = this.orientation;\n    this.parent!.dataset['alignment'] = this.alignment;\n    super.init();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Create the item, handle, and sizer for the new widget.\n    let item = new LayoutItem(widget);\n    let handle = Private.createHandle(this.renderer);\n    let average = Private.averageSize(this._sizers);\n    let sizer = Private.createSizer(average);\n\n    // Insert the item, handle, and sizer into the internal arrays.\n    ArrayExt.insert(this._items, index, item);\n    ArrayExt.insert(this._sizers, index, sizer);\n    ArrayExt.insert(this._handles, index, handle);\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget and handle nodes to the parent.\n    this.parent!.node.appendChild(widget.node);\n    this.parent!.node.appendChild(handle);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected moveWidget(fromIndex: number, toIndex: number, widget: Widget): void {\n    // Move the item, sizer, and handle for the widget.\n    ArrayExt.move(this._items, fromIndex, toIndex);\n    ArrayExt.move(this._sizers, fromIndex, toIndex);\n    ArrayExt.move(this._handles, fromIndex, toIndex);\n\n    // Post a fit request to the parent to show/hide last handle.\n    this.parent!.fit();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Remove the item, handle, and sizer for the widget.\n    let item = ArrayExt.removeAt(this._items, index);\n    let handle = ArrayExt.removeAt(this._handles, index);\n    ArrayExt.removeAt(this._sizers, index);\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget and handle nodes from the parent.\n    this.parent!.node.removeChild(widget.node);\n    this.parent!.node.removeChild(handle!);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Dispose of the layout item.\n    item!.dispose();\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Update the handles and track the visible widget count.\n    let nVisible = 0;\n    let lastHandleIndex = -1;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      if (this._items[i].isHidden) {\n        this._handles[i].classList.add('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this._handles[i].classList.add('p-mod-hidden');\n        /* </DEPRECATED> */\n      } else {\n        this._handles[i].classList.remove('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this._handles[i].classList.remove('p-mod-hidden');\n        /* </DEPRECATED> */\n        lastHandleIndex = i;\n        nVisible++;\n      }\n    }\n\n    // Hide the handle for the last visible widget.\n    if (lastHandleIndex !== -1) {\n      this._handles[lastHandleIndex].classList.add('lm-mod-hidden');\n      /* <DEPRECATED> */\n      this._handles[lastHandleIndex].classList.add('p-mod-hidden');\n      /* </DEPRECATED> */\n    }\n\n    // Update the fixed space for the visible items.\n    this._fixed = this._spacing * Math.max(0, nVisible - 1);\n\n    // Setup the computed minimum size.\n    let horz = this._orientation === 'horizontal';\n    let minW = horz ? this._fixed : 0;\n    let minH = horz ? 0 : this._fixed;\n\n    // Update the sizers and computed size limits.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item and corresponding box sizer.\n      let item = this._items[i];\n      let sizer = this._sizers[i];\n\n      // Prevent resizing unless necessary.\n      if (sizer.size > 0) {\n        sizer.sizeHint = sizer.size;\n      }\n\n      // If the item is hidden, it should consume zero size.\n      if (item.isHidden) {\n        sizer.minSize = 0;\n        sizer.maxSize = 0;\n        continue;\n      }\n\n      // Update the size limits for the item.\n      item.fit();\n\n      // Update the stretch factor.\n      sizer.stretch = SplitLayout.getStretch(item.widget);\n\n      // Update the sizer limits and computed min size.\n      if (horz) {\n        sizer.minSize = item.minWidth;\n        sizer.maxSize = item.maxWidth;\n        minW += item.minWidth;\n        minH = Math.max(minH, item.minHeight);\n      } else {\n        sizer.minSize = item.minHeight;\n        sizer.maxSize = item.maxHeight;\n        minH += item.minHeight;\n        minW = Math.max(minW, item.minWidth);\n      }\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Bail early if there are no visible items to layout.\n    if (nVisible === 0) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the actual layout bounds adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Compute the adjusted layout space.\n    let space: number;\n    let horz = this._orientation === 'horizontal';\n    if (horz) {\n      space = Math.max(0, width - this._fixed);\n    } else {\n      space = Math.max(0, height - this._fixed);\n    }\n\n    // Scale the size hints if they are normalized.\n    if (this._hasNormedSizes) {\n      for (let sizer of this._sizers) {\n        sizer.sizeHint *= space;\n      }\n      this._hasNormedSizes = false;\n    }\n\n    // Distribute the layout space to the box sizers.\n    let delta = BoxEngine.calc(this._sizers, space);\n\n    // Set up the variables for justification and alignment offset.\n    let extra = 0;\n    let offset = 0;\n\n    // Account for alignment if there is extra layout space.\n    if (delta > 0) {\n      switch (this._alignment) {\n      case 'start':\n        break;\n      case 'center':\n        extra = 0;\n        offset = delta / 2;\n        break;\n      case 'end':\n        extra = 0;\n        offset = delta;\n        break;\n      case 'justify':\n        extra = delta / nVisible;\n        offset = 0;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n\n    // Layout the items using the computed box sizes.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Fetch the computed size for the widget.\n      let size = this._sizers[i].size;\n\n      // Fetch the style for the handle.\n      let handleStyle = this._handles[i].style;\n\n      // Update the widget and handle, and advance the relevant edge.\n      if (horz) {\n        item.update(left + offset, top, size + extra, height);\n        left += size + extra;\n        handleStyle.top = `${top}px`;\n        handleStyle.left = `${left + offset}px`;\n        handleStyle.width = `${this._spacing}px`;\n        handleStyle.height = `${height}px`;\n        left += this._spacing;\n      } else {\n        item.update(left, top + offset, width, size + extra);\n        top += size + extra;\n        handleStyle.top = `${top + offset}px`;\n        handleStyle.left = `${left}px`;\n        handleStyle.width = `${width}px`;\n        handleStyle.height = `${this._spacing}px`;\n        top += this._spacing;\n      }\n    }\n  }\n\n  private _fixed = 0;\n  private _spacing = 4;\n  private _dirty = false;\n  private _hasNormedSizes = false;\n  private _sizers: BoxSizer[] = [];\n  private _items: LayoutItem[] = [];\n  private _handles: HTMLDivElement[] = [];\n  private _box: ElementExt.IBoxSizing | null = null;\n  private _alignment: SplitLayout.Alignment = 'start';\n  private _orientation: SplitLayout.Orientation = 'horizontal';\n}\n\n\n/**\n * The namespace for the `SplitLayout` class statics.\n */\nexport\nnamespace SplitLayout {\n  /**\n   * A type alias for a split layout orientation.\n   */\n  export\n  type Orientation = 'horizontal' | 'vertical';\n\n  /**\n   * A type alias for a split layout alignment.\n   */\n  export\n  type Alignment = 'start' | 'center' | 'end' | 'justify';\n\n  /**\n   * An options object for initializing a split layout.\n   */\n  export\n  interface IOptions {\n    /**\n     * The renderer to use for the split layout.\n     */\n    renderer: IRenderer;\n\n    /**\n     * The orientation of the layout.\n     *\n     * The default is `'horizontal'`.\n     */\n    orientation?: Orientation;\n\n    /**\n     * The content alignment of the layout.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the layout.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n  }\n\n  /**\n   * A renderer for use with a split layout.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Create a new handle for use with a split layout.\n     *\n     * @returns A new handle element.\n     */\n    createHandle(): HTMLDivElement;\n  }\n\n  /**\n   * Get the split layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The split layout stretch factor for the widget.\n   */\n  export\n  function getStretch(widget: Widget): number {\n    return Private.stretchProperty.get(widget);\n  }\n\n  /**\n   * Set the split layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export\n  function setStretch(widget: Widget, value: number): void {\n    Private.stretchProperty.set(widget, value);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The property descriptor for a widget stretch factor.\n   */\n  export\n  const stretchProperty = new AttachedProperty<Widget, number>({\n    name: 'stretch',\n    create: () => 0,\n    coerce: (owner, value) => Math.max(0, Math.floor(value)),\n    changed: onChildSizingChanged\n  });\n\n  /**\n   * Create a new box sizer with the given size hint.\n   */\n  export\n  function createSizer(size: number): BoxSizer {\n    let sizer = new BoxSizer();\n    sizer.sizeHint = Math.floor(size);\n    return sizer;\n  }\n\n  /**\n   * Create a new split handle node using the given renderer.\n   */\n  export\n  function createHandle(renderer: SplitLayout.IRenderer): HTMLDivElement {\n    let handle = renderer.createHandle();\n    handle.style.position = 'absolute';\n    return handle;\n  }\n\n  /**\n   * Clamp a spacing value to an integer >= 0.\n   */\n  export\n  function clampSpacing(value: number): number {\n    return Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Compute the average size of an array of box sizers.\n   */\n  export\n  function averageSize(sizers: BoxSizer[]): number {\n    return sizers.reduce((v, s) => v + s.size, 0) / sizers.length || 0;\n  }\n\n  /**\n   * Normalize an array of values.\n   */\n  export\n  function normalize(values: number[]): number[] {\n    let n = values.length;\n    if (n === 0) {\n      return [];\n    }\n    let sum = values.reduce((a, b) => a + Math.abs(b), 0);\n    return sum === 0 ? values.map(v => 1 / n) : values.map(v => v / sum);\n  }\n\n  /**\n   * The change handler for the attached sizing properties.\n   */\n  function onChildSizingChanged(child: Widget): void {\n    if (child.parent && child.parent.layout instanceof SplitLayout) {\n      child.parent.fit();\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt\n} from '@lumino/algorithm';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  Drag\n} from '@lumino/dragdrop';\n\nimport {\n  Message\n} from '@lumino/messaging';\n\nimport {\n  Panel\n} from './panel';\n\nimport {\n  SplitLayout\n} from './splitlayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A panel which arranges its widgets into resizable sections.\n *\n * #### Notes\n * This class provides a convenience wrapper around a [[SplitLayout]].\n */\nexport\nclass SplitPanel extends Panel {\n  /**\n   * Construct a new split panel.\n   *\n   * @param options - The options for initializing the split panel.\n   */\n  constructor(options: SplitPanel.IOptions = {}) {\n    super({ layout: Private.createLayout(options) });\n    this.addClass('lm-SplitPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-SplitPanel');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Dispose of the resources held by the panel.\n   */\n  dispose(): void {\n    this._releaseMouse();\n    super.dispose();\n  }\n\n  /**\n   * Get the layout orientation for the split panel.\n   */\n  get orientation(): SplitPanel.Orientation {\n    return (this.layout as SplitLayout).orientation;\n  }\n\n  /**\n   * Set the layout orientation for the split panel.\n   */\n  set orientation(value: SplitPanel.Orientation) {\n    (this.layout as SplitLayout).orientation = value;\n  }\n\n  /**\n   * Get the content alignment for the split panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire split panel.\n   */\n  get alignment(): SplitPanel.Alignment {\n    return (this.layout as SplitLayout).alignment;\n  }\n\n  /**\n   * Set the content alignment for the split panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire split panel.\n   */\n  set alignment(value: SplitPanel.Alignment) {\n    (this.layout as SplitLayout).alignment = value;\n  }\n\n  /**\n   * Get the inter-element spacing for the split panel.\n   */\n  get spacing(): number {\n    return (this.layout as SplitLayout).spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the split panel.\n   */\n  set spacing(value: number) {\n    (this.layout as SplitLayout).spacing = value;\n  }\n\n  /**\n   * The renderer used by the split panel.\n   */\n  get renderer(): SplitPanel.IRenderer {\n    return (this.layout as SplitLayout).renderer;\n  }\n\n  /**\n   * A read-only array of the split handles in the panel.\n   */\n  get handles(): ReadonlyArray<HTMLDivElement> {\n    return (this.layout as SplitLayout).handles;\n  }\n\n  /**\n   * Get the relative sizes of the widgets in the panel.\n   *\n   * @returns A new array of the relative sizes of the widgets.\n   *\n   * #### Notes\n   * The returned sizes reflect the sizes of the widgets normalized\n   * relative to their siblings.\n   *\n   * This method **does not** measure the DOM nodes.\n   */\n  relativeSizes(): number[] {\n    return (this.layout as SplitLayout).relativeSizes();\n  }\n\n  /**\n   * Set the relative sizes for the widgets in the panel.\n   *\n   * @param sizes - The relative sizes for the widgets in the panel.\n   *\n   * #### Notes\n   * Extra values are ignored, too few will yield an undefined layout.\n   *\n   * The actual geometry of the DOM nodes is updated asynchronously.\n   */\n  setRelativeSizes(sizes: number[]): void {\n    (this.layout as SplitLayout).setRelativeSizes(sizes);\n  }\n\n  /**\n   * Handle the DOM events for the split panel.\n   *\n   * @param event - The DOM event sent to the panel.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('mousedown', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('mousedown', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    msg.child.addClass('lm-SplitPanel-child');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-SplitPanel-child');\n    /* </DEPRECATED> */\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    msg.child.removeClass('lm-SplitPanel-child');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-SplitPanel-child');\n    /* </DEPRECATED> */\n    this._releaseMouse();\n  }\n\n  /**\n   * Handle the `'keydown'` event for the split panel.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop input events during drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Release the mouse if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      this._releaseMouse();\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the split panel.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not pressed.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Find the handle which contains the mouse target, if any.\n    let layout = this.layout as SplitLayout;\n    let index = ArrayExt.findFirstIndex(layout.handles, handle => {\n      return handle.contains(event.target as HTMLElement);\n    });\n\n    // Bail early if the mouse press was not on a handle.\n    if (index === -1) {\n      return;\n    }\n\n    // Stop the event when a split handle is pressed.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Add the extra document listeners.\n    document.addEventListener('mouseup', this, true);\n    document.addEventListener('mousemove', this, true);\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('contextmenu', this, true);\n\n    // Compute the offset delta for the handle press.\n    let delta: number;\n    let handle = layout.handles[index];\n    let rect = handle.getBoundingClientRect();\n    if (layout.orientation === 'horizontal') {\n      delta = event.clientX - rect.left;\n    } else {\n      delta = event.clientY - rect.top;\n    }\n\n    // Override the cursor and store the press data.\n    let style = window.getComputedStyle(handle);\n    let override = Drag.overrideCursor(style.cursor!);\n    this._pressData = { index, delta, override };\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the split panel.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Stop the event when dragging a split handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Compute the desired offset position for the handle.\n    let pos: number;\n    let layout = this.layout as SplitLayout;\n    let rect = this.node.getBoundingClientRect();\n    if (layout.orientation === 'horizontal') {\n      pos = event.clientX - rect.left - this._pressData!.delta;\n    } else {\n      pos = event.clientY - rect.top - this._pressData!.delta;\n    }\n\n    // Move the handle as close to the desired position as possible.\n    layout.moveHandle(this._pressData!.index, pos);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the split panel.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event when releasing a handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Finalize the mouse release.\n    this._releaseMouse();\n  }\n\n  /**\n   * Release the mouse grab for the split panel.\n   */\n  private _releaseMouse(): void {\n    // Bail early if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Clear the override cursor.\n    this._pressData.override.dispose();\n    this._pressData = null;\n\n    // Remove the extra document listeners.\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  private _pressData: Private.IPressData | null = null;\n}\n\n\n/**\n * The namespace for the `SplitPanel` class statics.\n */\nexport\nnamespace SplitPanel {\n  /**\n   * A type alias for a split panel orientation.\n   */\n  export\n  type Orientation = SplitLayout.Orientation;\n\n  /**\n   * A type alias for a split panel alignment.\n   */\n  export\n  type Alignment = SplitLayout.Alignment;\n\n  /**\n   * A type alias for a split panel renderer.\n   */\n  export\n  type IRenderer = SplitLayout.IRenderer;\n\n  /**\n   * An options object for initializing a split panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The renderer to use for the split panel.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n\n    /**\n     * The layout orientation of the panel.\n     *\n     * The default is `'horizontal'`.\n     */\n    orientation?: Orientation;\n\n    /**\n     * The content alignment of the panel.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the panel.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n\n    /**\n     * The split layout to use for the split panel.\n     *\n     * If this is provided, the other options are ignored.\n     *\n     * The default is a new `SplitLayout`.\n     */\n    layout?: SplitLayout;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Create a new handle for use with a split panel.\n     *\n     * @returns A new handle element for a split panel.\n     */\n    createHandle(): HTMLDivElement {\n      let handle = document.createElement('div');\n      handle.className = 'lm-SplitPanel-handle';\n      /* <DEPRECATED> */\n      handle.classList.add('p-SplitPanel-handle');\n      /* </DEPRECATED> */\n      return handle;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n\n  /**\n   * Get the split panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The split panel stretch factor for the widget.\n   */\n  export\n  function getStretch(widget: Widget): number {\n    return SplitLayout.getStretch(widget);\n  }\n\n  /**\n   * Set the split panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export\n  function setStretch(widget: Widget, value: number): void {\n    SplitLayout.setStretch(widget, value);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * An object which holds mouse press data.\n   */\n  export\n  interface IPressData {\n    /**\n     * The index of the pressed handle.\n     */\n    index: number;\n\n    /**\n     * The offset of the press in handle coordinates.\n     */\n    delta: number;\n\n    /**\n     * The disposable which will clear the override cursor.\n     */\n    override: IDisposable;\n  }\n\n  /**\n   * Create a split layout for the given panel options.\n   */\n  export\n  function createLayout(options: SplitPanel.IOptions): SplitLayout {\n    return options.layout || new SplitLayout({\n      renderer: options.renderer || SplitPanel.defaultRenderer,\n      orientation: options.orientation,\n      alignment: options.alignment,\n      spacing: options.spacing\n    });\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  LayoutItem\n} from './layout';\n\nimport {\n  PanelLayout\n} from './panellayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout where visible widgets are stacked atop one another.\n *\n * #### Notes\n * The Z-order of the visible widgets follows their layout order.\n */\nexport\nclass StackedLayout extends PanelLayout {\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the layout items.\n    each(this._items, item => { item.dispose(); });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Create and add a new layout item for the widget.\n    ArrayExt.insert(this._items, index, new LayoutItem(widget));\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected moveWidget(fromIndex: number, toIndex: number, widget: Widget): void {\n    // Move the layout item for the widget.\n    ArrayExt.move(this._items, fromIndex, toIndex);\n\n    // Post an update request for the parent widget.\n    this.parent!.update();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Remove the layout item for the widget.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Reset the z-index for the widget.\n    item!.widget.node.style.zIndex = '';\n\n    // Dispose of the layout item.\n    item!.dispose();\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Set up the computed minimum size.\n    let minW = 0;\n    let minH = 0;\n\n    // Update the computed minimum size.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Update the size limits for the item.\n      item.fit();\n\n      // Update the computed minimum size.\n      minW = Math.max(minW, item.minWidth);\n      minH = Math.max(minH, item.minHeight);\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Bail early if there are no visible items to layout.\n    if (nVisible === 0) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the actual layout bounds adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Update the widget stacking order and layout geometry.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Set the z-index for the widget.\n      item.widget.node.style.zIndex = `${i}`;\n\n      // Update the item geometry.\n      item.update(left, top, width, height);\n    }\n  }\n\n  private _dirty = false;\n  private _items: LayoutItem[] = [];\n  private _box: ElementExt.IBoxSizing | null = null;\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Panel\n} from './panel';\n\nimport {\n  StackedLayout\n} from './stackedlayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A panel where visible widgets are stacked atop one another.\n *\n * #### Notes\n * This class provides a convenience wrapper around a [[StackedLayout]].\n */\nexport\nclass StackedPanel extends Panel {\n  /**\n   * Construct a new stacked panel.\n   *\n   * @param options - The options for initializing the panel.\n   */\n  constructor(options: StackedPanel.IOptions = {}) {\n    super({ layout: Private.createLayout(options) });\n    this.addClass('lm-StackedPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-StackedPanel');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A signal emitted when a widget is removed from a stacked panel.\n   */\n  get widgetRemoved(): ISignal<this, Widget> {\n    return this._widgetRemoved;\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    msg.child.addClass('lm-StackedPanel-child');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-StackedPanel-child');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    msg.child.removeClass('lm-StackedPanel-child');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-StackedPanel-child');\n    /* </DEPRECATED> */\n    this._widgetRemoved.emit(msg.child);\n  }\n\n  private _widgetRemoved = new Signal<this, Widget>(this);\n}\n\n\n/**\n * The namespace for the `StackedPanel` class statics.\n */\nexport\nnamespace StackedPanel {\n  /**\n   * An options object for creating a stacked panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The stacked layout to use for the stacked panel.\n     *\n     * The default is a new `StackedLayout`.\n     */\n    layout?: StackedLayout;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create a stacked layout for the given panel options.\n   */\n  export\n  function createLayout(options: StackedPanel.IOptions): StackedLayout {\n    return options.layout || new StackedLayout();\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  Platform\n} from '@lumino/domutils';\n\nimport {\n  MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  BoxLayout\n} from './boxlayout';\n\nimport {\n  StackedPanel\n} from './stackedpanel';\n\nimport {\n  TabBar\n} from './tabbar';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which combines a `TabBar` and a `StackedPanel`.\n *\n * #### Notes\n * This is a simple panel which handles the common case of a tab bar\n * placed next to a content area. The selected tab controls the widget\n * which is shown in the content area.\n *\n * For use cases which require more control than is provided by this\n * panel, the `TabBar` widget may be used independently.\n */\nexport\nclass TabPanel extends Widget {\n  /**\n   * Construct a new tab panel.\n   *\n   * @param options - The options for initializing the tab panel.\n   */\n  constructor(options: TabPanel.IOptions = {}) {\n    super();\n    this.addClass('lm-TabPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-TabPanel');\n    /* </DEPRECATED> */\n\n    // Create the tab bar and stacked panel.\n    this.tabBar = new TabBar<Widget>(options);\n    this.tabBar.addClass('lm-TabPanel-tabBar');\n    this.stackedPanel = new StackedPanel();\n    this.stackedPanel.addClass('lm-TabPanel-stackedPanel');\n    /* <DEPRECATED> */\n    this.tabBar.addClass('p-TabPanel-tabBar');\n    this.stackedPanel.addClass('p-TabPanel-stackedPanel');\n    /* </DEPRECATED> */\n\n    // Connect the tab bar signal handlers.\n    this.tabBar.tabMoved.connect(this._onTabMoved, this);\n    this.tabBar.currentChanged.connect(this._onCurrentChanged, this);\n    this.tabBar.tabCloseRequested.connect(this._onTabCloseRequested, this);\n    this.tabBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n\n    // Connect the stacked panel signal handlers.\n    this.stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n\n    // Get the data related to the placement.\n    this._tabPlacement = options.tabPlacement || 'top';\n    let direction = Private.directionFromPlacement(this._tabPlacement);\n    let orientation = Private.orientationFromPlacement(this._tabPlacement);\n\n    // Configure the tab bar for the placement.\n    this.tabBar.orientation = orientation;\n    this.tabBar.dataset['placement'] = this._tabPlacement;\n\n    // Create the box layout.\n    let layout = new BoxLayout({ direction, spacing: 0 });\n\n    // Set the stretch factors for the child widgets.\n    BoxLayout.setStretch(this.tabBar, 0);\n    BoxLayout.setStretch(this.stackedPanel, 1);\n\n    // Add the child widgets to the layout.\n    layout.addWidget(this.tabBar);\n    layout.addWidget(this.stackedPanel);\n\n    // Install the layout on the tab panel.\n    this.layout = layout;\n  }\n\n  /**\n   * A signal emitted when the current tab is changed.\n   *\n   * #### Notes\n   * This signal is emitted when the currently selected tab is changed\n   * either through user or programmatic interaction.\n   *\n   * Notably, this signal is not emitted when the index of the current\n   * tab changes due to tabs being inserted, removed, or moved. It is\n   * only emitted when the actual current tab node is changed.\n   */\n  get currentChanged(): ISignal<this, TabPanel.ICurrentChangedArgs> {\n    return this._currentChanged;\n  }\n\n  /**\n   * Get the index of the currently selected tab.\n   *\n   * #### Notes\n   * This will be `-1` if no tab is selected.\n   */\n  get currentIndex(): number {\n    return this.tabBar.currentIndex;\n  }\n\n  /**\n   * Set the index of the currently selected tab.\n   *\n   * #### Notes\n   * If the index is out of range, it will be set to `-1`.\n   */\n  set currentIndex(value: number) {\n    this.tabBar.currentIndex = value;\n  }\n\n  /**\n   * Get the currently selected widget.\n   *\n   * #### Notes\n   * This will be `null` if there is no selected tab.\n   */\n  get currentWidget(): Widget | null {\n    let title = this.tabBar.currentTitle;\n    return title ? title.owner : null;\n  }\n\n  /**\n   * Set the currently selected widget.\n   *\n   * #### Notes\n   * If the widget is not in the panel, it will be set to `null`.\n   */\n  set currentWidget(value: Widget | null) {\n    this.tabBar.currentTitle = value ? value.title : null;\n  }\n\n  /**\n   * Get the whether the tabs are movable by the user.\n   *\n   * #### Notes\n   * Tabs can always be moved programmatically.\n   */\n  get tabsMovable(): boolean {\n    return this.tabBar.tabsMovable;\n  }\n\n  /**\n   * Set the whether the tabs are movable by the user.\n   *\n   * #### Notes\n   * Tabs can always be moved programmatically.\n   */\n  set tabsMovable(value: boolean) {\n    this.tabBar.tabsMovable = value;\n  }\n\n  /**\n   * Get the tab placement for the tab panel.\n   *\n   * #### Notes\n   * This controls the position of the tab bar relative to the content.\n   */\n  get tabPlacement(): TabPanel.TabPlacement {\n    return this._tabPlacement;\n  }\n\n  /**\n   * Set the tab placement for the tab panel.\n   *\n   * #### Notes\n   * This controls the position of the tab bar relative to the content.\n   */\n  set tabPlacement(value: TabPanel.TabPlacement) {\n    // Bail if the placement does not change.\n    if (this._tabPlacement === value) {\n      return;\n    }\n\n    // Update the internal value.\n    this._tabPlacement = value;\n\n    // Get the values related to the placement.\n    let direction = Private.directionFromPlacement(value);\n    let orientation = Private.orientationFromPlacement(value);\n\n    // Configure the tab bar for the placement.\n    this.tabBar.orientation = orientation;\n    this.tabBar.dataset['placement'] = value;\n\n    // Update the layout direction.\n    (this.layout as BoxLayout).direction = direction;\n  }\n\n  /**\n   * The tab bar used by the tab panel.\n   *\n   * #### Notes\n   * Modifying the tab bar directly can lead to undefined behavior.\n   */\n  readonly tabBar: TabBar<Widget>;\n\n  /**\n   * The stacked panel used by the tab panel.\n   *\n   * #### Notes\n   * Modifying the panel directly can lead to undefined behavior.\n   */\n  readonly stackedPanel: StackedPanel;\n\n  /**\n   * A read-only array of the widgets in the panel.\n   */\n  get widgets(): ReadonlyArray<Widget> {\n    return this.stackedPanel.widgets;\n  }\n\n  /**\n   * Add a widget to the end of the tab panel.\n   *\n   * @param widget - The widget to add to the tab panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   *\n   * The widget's `title` is used to populate the tab.\n   */\n  addWidget(widget: Widget): void {\n    this.insertWidget(this.widgets.length, widget);\n  }\n\n  /**\n   * Insert a widget into the tab panel at a specified index.\n   *\n   * @param index - The index at which to insert the widget.\n   *\n   * @param widget - The widget to insert into to the tab panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   *\n   * The widget's `title` is used to populate the tab.\n   */\n  insertWidget(index: number, widget: Widget): void {\n    if (widget !== this.currentWidget) {\n      widget.hide();\n    }\n    this.stackedPanel.insertWidget(index, widget);\n    this.tabBar.insertTab(index, widget.title);\n  }\n\n  /**\n   * Handle the `currentChanged` signal from the tab bar.\n   */\n  private _onCurrentChanged(sender: TabBar<Widget>, args: TabBar.ICurrentChangedArgs<Widget>): void {\n    // Extract the previous and current title from the args.\n    let { previousIndex, previousTitle, currentIndex, currentTitle } = args;\n\n    // Extract the widgets from the titles.\n    let previousWidget = previousTitle ? previousTitle.owner : null;\n    let currentWidget = currentTitle ? currentTitle.owner : null;\n\n    // Hide the previous widget.\n    if (previousWidget) {\n      previousWidget.hide();\n    }\n\n    // Show the current widget.\n    if (currentWidget) {\n      currentWidget.show();\n    }\n\n    // Emit the `currentChanged` signal for the tab panel.\n    this._currentChanged.emit({\n      previousIndex, previousWidget, currentIndex, currentWidget\n    });\n\n    // Flush the message loop on IE and Edge to prevent flicker.\n    if (Platform.IS_EDGE || Platform.IS_IE) {\n      MessageLoop.flush();\n    }\n  }\n\n  /**\n   * Handle the `tabActivateRequested` signal from the tab bar.\n   */\n  private _onTabActivateRequested(sender: TabBar<Widget>, args: TabBar.ITabActivateRequestedArgs<Widget>): void {\n    args.title.owner.activate();\n  }\n\n  /**\n   * Handle the `tabCloseRequested` signal from the tab bar.\n   */\n  private _onTabCloseRequested(sender: TabBar<Widget>, args: TabBar.ITabCloseRequestedArgs<Widget>): void {\n    args.title.owner.close();\n  }\n\n  /**\n   * Handle the `tabMoved` signal from the tab bar.\n   */\n  private _onTabMoved(sender: TabBar<Widget>, args: TabBar.ITabMovedArgs<Widget>): void {\n    this.stackedPanel.insertWidget(args.toIndex, args.title.owner);\n  }\n\n  /**\n   * Handle the `widgetRemoved` signal from the stacked panel.\n   */\n  private _onWidgetRemoved(sender: StackedPanel, widget: Widget): void {\n    this.tabBar.removeTab(widget.title);\n  }\n\n  private _tabPlacement: TabPanel.TabPlacement;\n  private _currentChanged = new Signal<this, TabPanel.ICurrentChangedArgs>(this);\n}\n\n\n/**\n * The namespace for the `TabPanel` class statics.\n */\nexport\nnamespace TabPanel {\n  /**\n   * A type alias for tab placement in a tab bar.\n   */\n  export\n  type TabPlacement = (\n    /**\n     * The tabs are placed as a row above the content.\n     */\n    'top' |\n\n    /**\n     * The tabs are placed as a column to the left of the content.\n     */\n    'left' |\n\n    /**\n     * The tabs are placed as a column to the right of the content.\n     */\n    'right' |\n\n    /**\n     * The tabs are placed as a row below the content.\n     */\n    'bottom'\n  );\n\n  /**\n   * An options object for initializing a tab panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * Whether the tabs are movable by the user.\n     *\n     * The default is `false`.\n     */\n    tabsMovable?: boolean;\n\n    /**\n     * The placement of the tab bar relative to the content.\n     *\n     * The default is `'top'`.\n     */\n    tabPlacement?: TabPlacement;\n\n    /**\n     * The renderer for the panel's tab bar.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: TabBar.IRenderer<Widget>;\n  }\n\n  /**\n   * The arguments object for the `currentChanged` signal.\n   */\n  export\n  interface ICurrentChangedArgs {\n    /**\n     * The previously selected index.\n     */\n    previousIndex: number;\n\n    /**\n     * The previously selected widget.\n     */\n    previousWidget: Widget | null;\n\n    /**\n     * The currently selected index.\n     */\n    currentIndex: number;\n\n    /**\n     * The currently selected widget.\n     */\n    currentWidget: Widget | null;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Convert a tab placement to tab bar orientation.\n   */\n  export\n  function orientationFromPlacement(plc: TabPanel.TabPlacement): TabBar.Orientation {\n    return placementToOrientationMap[plc];\n  }\n\n  /**\n   * Convert a tab placement to a box layout direction.\n   */\n  export\n  function directionFromPlacement(plc: TabPanel.TabPlacement): BoxLayout.Direction {\n    return placementToDirectionMap[plc];\n  }\n\n  /**\n   * A mapping of tab placement to tab bar orientation.\n   */\n  const placementToOrientationMap: { [key: string]: TabBar.Orientation } = {\n    'top': 'horizontal',\n    'left': 'vertical',\n    'right': 'vertical',\n    'bottom': 'horizontal'\n  };\n\n  /**\n   * A mapping of tab placement to box layout direction.\n   */\n  const placementToDirectionMap: { [key: string]: BoxLayout.Direction } = {\n    'top': 'top-to-bottom',\n    'left': 'left-to-right',\n    'right': 'right-to-left',\n    'bottom': 'bottom-to-top'\n  };\n}\n"]}