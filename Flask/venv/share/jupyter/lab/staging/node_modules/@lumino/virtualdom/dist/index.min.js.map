{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../src/index.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","VirtualDOM","Private","VirtualText","content","this","type","VirtualElement","tag","attrs","children","renderer","VirtualElementPass","_super","call","undefined","__","constructor","prototype","create","__extends","h","i","n","arguments","length","arg","push","extend","array","values","_i","values_1","child","a","bind","abbr","address","area","article","aside","audio","bdi","bdo","blockquote","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","dfn","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hr","iframe","img","input","ins","kbd","label","legend","li","main","map","mark","meter","nav","noscript","object","ol","optgroup","option","output","param","pre","progress","q","rp","rt","ruby","s","samp","section","select","small","source","span","strong","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var_","video","wbr","realize","node","createDOMNode","render","host","oldContent","hostMap","get","newContent","asContentArray","set","updateContent","before","insertBefore","document","createTextNode","addAttrs","createElement","WeakMap","value","oldKeyed","firstChild","keyMap","content_1","vNode","key","element","nextSibling","collectKeys","oldCopy","slice","currElem","newCount","oldVNode","newVNode","newKey","pair","ArrayExt","move","indexOf","oldKey","insert","updateAttrs","textContent","removeContent","_sentinel","oldNode","lastChild","childNodes","unrender","removeChild","specialAttrs","className","htmlFor","dataset","style","name_1","substr","setAttribute","name_2","addDataset","name","elemStyle","addStyle","oldAttrs","newAttrs","removeAttribute","oldDataset","newDataset","name_3","name_4","updateDataset","oldStyle","newStyle","updateStyle","Error"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt\n} from '@lumino/algorithm';\n\n\n/**\n * The names of the supported HTML5 DOM element attributes.\n *\n * This list is not all-encompassing, rather it attempts to define the\n * attribute names which are relevant for use in a virtual DOM context.\n * If a standardized or widely supported name is missing, please open\n * an issue to have it added.\n *\n * The attribute names were collected from the following sources:\n *   - https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n *   - https://www.w3.org/TR/html5/index.html#attributes-1\n *   - https://html.spec.whatwg.org/multipage/indices.html#attributes-3\n */\nexport\ntype ElementAttrNames = (\n  'abbr' |\n  'accept' |\n  'accept-charset' |\n  'accesskey' |\n  'action' |\n  'allowfullscreen' |\n  'alt' |\n  'autocomplete' |\n  'autofocus' |\n  'autoplay' |\n  'autosave' |\n  'checked' |\n  'cite' |\n  'cols' |\n  'colspan' |\n  'contenteditable' |\n  'controls' |\n  'coords' |\n  'crossorigin' |\n  'data' |\n  'datetime' |\n  'default' |\n  'dir' |\n  'dirname' |\n  'disabled' |\n  'download' |\n  'draggable' |\n  'dropzone' |\n  'enctype' |\n  'form' |\n  'formaction' |\n  'formenctype' |\n  'formmethod' |\n  'formnovalidate' |\n  'formtarget' |\n  'headers' |\n  'height' |\n  'hidden' |\n  'high' |\n  'href' |\n  'hreflang' |\n  'id' |\n  'inputmode' |\n  'integrity' |\n  'ismap' |\n  'kind' |\n  'label' |\n  'lang' |\n  'list' |\n  'loop' |\n  'low' |\n  'max' |\n  'maxlength' |\n  'media' |\n  'mediagroup' |\n  'method' |\n  'min' |\n  'minlength' |\n  'multiple' |\n  'muted' |\n  'name' |\n  'novalidate' |\n  'optimum' |\n  'pattern' |\n  'placeholder' |\n  'poster' |\n  'preload' |\n  'readonly' |\n  'rel' |\n  'required' |\n  'reversed' |\n  'rows' |\n  'rowspan' |\n  'sandbox' |\n  'scope' |\n  'selected' |\n  'shape' |\n  'size' |\n  'sizes' |\n  'span' |\n  'spellcheck' |\n  'src' |\n  'srcdoc' |\n  'srclang' |\n  'srcset' |\n  'start' |\n  'step' |\n  'tabindex' |\n  'target' |\n  'title' |\n  'type' |\n  'typemustmatch' |\n  'usemap' |\n  'value' |\n  'width' |\n  'wrap'\n);\n\n\n/**\n * The names of the supported HTML5 CSS property names.\n *\n * If a standardized or widely supported name is missing, please open\n * an issue to have it added.\n *\n * The property names were collected from the following sources:\n *   - TypeScript's `lib.dom.d.ts` file\n */\nexport\ntype CSSPropertyNames = (\n  'alignContent' |\n  'alignItems' |\n  'alignSelf' |\n  'alignmentBaseline' |\n  'animation' |\n  'animationDelay' |\n  'animationDirection' |\n  'animationDuration' |\n  'animationFillMode' |\n  'animationIterationCount' |\n  'animationName' |\n  'animationPlayState' |\n  'animationTimingFunction' |\n  'backfaceVisibility' |\n  'background' |\n  'backgroundAttachment' |\n  'backgroundClip' |\n  'backgroundColor' |\n  'backgroundImage' |\n  'backgroundOrigin' |\n  'backgroundPosition' |\n  'backgroundPositionX' |\n  'backgroundPositionY' |\n  'backgroundRepeat' |\n  'backgroundSize' |\n  'baselineShift' |\n  'border' |\n  'borderBottom' |\n  'borderBottomColor' |\n  'borderBottomLeftRadius' |\n  'borderBottomRightRadius' |\n  'borderBottomStyle' |\n  'borderBottomWidth' |\n  'borderCollapse' |\n  'borderColor' |\n  'borderImage' |\n  'borderImageOutset' |\n  'borderImageRepeat' |\n  'borderImageSlice' |\n  'borderImageSource' |\n  'borderImageWidth' |\n  'borderLeft' |\n  'borderLeftColor' |\n  'borderLeftStyle' |\n  'borderLeftWidth' |\n  'borderRadius' |\n  'borderRight' |\n  'borderRightColor' |\n  'borderRightStyle' |\n  'borderRightWidth' |\n  'borderSpacing' |\n  'borderStyle' |\n  'borderTop' |\n  'borderTopColor' |\n  'borderTopLeftRadius' |\n  'borderTopRightRadius' |\n  'borderTopStyle' |\n  'borderTopWidth' |\n  'borderWidth' |\n  'bottom' |\n  'boxShadow' |\n  'boxSizing' |\n  'breakAfter' |\n  'breakBefore' |\n  'breakInside' |\n  'captionSide' |\n  'clear' |\n  'clip' |\n  'clipPath' |\n  'clipRule' |\n  'color' |\n  'colorInterpolationFilters' |\n  'columnCount' |\n  'columnFill' |\n  'columnGap' |\n  'columnRule' |\n  'columnRuleColor' |\n  'columnRuleStyle' |\n  'columnRuleWidth' |\n  'columnSpan' |\n  'columnWidth' |\n  'columns' |\n  'content' |\n  'counterIncrement' |\n  'counterReset' |\n  'cssFloat' |\n  'cssText' |\n  'cursor' |\n  'direction' |\n  'display' |\n  'dominantBaseline' |\n  'emptyCells' |\n  'enableBackground' |\n  'fill' |\n  'fillOpacity' |\n  'fillRule' |\n  'filter' |\n  'flex' |\n  'flexBasis' |\n  'flexDirection' |\n  'flexFlow' |\n  'flexGrow' |\n  'flexShrink' |\n  'flexWrap' |\n  'floodColor' |\n  'floodOpacity' |\n  'font' |\n  'fontFamily' |\n  'fontFeatureSettings' |\n  'fontSize' |\n  'fontSizeAdjust' |\n  'fontStretch' |\n  'fontStyle' |\n  'fontVariant' |\n  'fontWeight' |\n  'glyphOrientationHorizontal' |\n  'glyphOrientationVertical' |\n  'height' |\n  'imeMode' |\n  'justifyContent' |\n  'kerning' |\n  'left' |\n  'letterSpacing' |\n  'lightingColor' |\n  'lineHeight' |\n  'listStyle' |\n  'listStyleImage' |\n  'listStylePosition' |\n  'listStyleType' |\n  'margin' |\n  'marginBottom' |\n  'marginLeft' |\n  'marginRight' |\n  'marginTop' |\n  'marker' |\n  'markerEnd' |\n  'markerMid' |\n  'markerStart' |\n  'mask' |\n  'maxHeight' |\n  'maxWidth' |\n  'minHeight' |\n  'minWidth' |\n  'msContentZoomChaining' |\n  'msContentZoomLimit' |\n  'msContentZoomLimitMax' |\n  'msContentZoomLimitMin' |\n  'msContentZoomSnap' |\n  'msContentZoomSnapPoints' |\n  'msContentZoomSnapType' |\n  'msContentZooming' |\n  'msFlowFrom' |\n  'msFlowInto' |\n  'msFontFeatureSettings' |\n  'msGridColumn' |\n  'msGridColumnAlign' |\n  'msGridColumnSpan' |\n  'msGridColumns' |\n  'msGridRow' |\n  'msGridRowAlign' |\n  'msGridRowSpan' |\n  'msGridRows' |\n  'msHighContrastAdjust' |\n  'msHyphenateLimitChars' |\n  'msHyphenateLimitLines' |\n  'msHyphenateLimitZone' |\n  'msHyphens' |\n  'msImeAlign' |\n  'msOverflowStyle' |\n  'msScrollChaining' |\n  'msScrollLimit' |\n  'msScrollLimitXMax' |\n  'msScrollLimitXMin' |\n  'msScrollLimitYMax' |\n  'msScrollLimitYMin' |\n  'msScrollRails' |\n  'msScrollSnapPointsX' |\n  'msScrollSnapPointsY' |\n  'msScrollSnapType' |\n  'msScrollSnapX' |\n  'msScrollSnapY' |\n  'msScrollTranslation' |\n  'msTextCombineHorizontal' |\n  'msTextSizeAdjust' |\n  'msTouchAction' |\n  'msTouchSelect' |\n  'msUserSelect' |\n  'msWrapFlow' |\n  'msWrapMargin' |\n  'msWrapThrough' |\n  'opacity' |\n  'order' |\n  'orphans' |\n  'outline' |\n  'outlineColor' |\n  'outlineStyle' |\n  'outlineWidth' |\n  'overflow' |\n  'overflowX' |\n  'overflowY' |\n  'padding' |\n  'paddingBottom' |\n  'paddingLeft' |\n  'paddingRight' |\n  'paddingTop' |\n  'pageBreakAfter' |\n  'pageBreakBefore' |\n  'pageBreakInside' |\n  'perspective' |\n  'perspectiveOrigin' |\n  'pointerEvents' |\n  'position' |\n  'quotes' |\n  'resize' |\n  'right' |\n  'rubyAlign' |\n  'rubyOverhang' |\n  'rubyPosition' |\n  'stopColor' |\n  'stopOpacity' |\n  'stroke' |\n  'strokeDasharray' |\n  'strokeDashoffset' |\n  'strokeLinecap' |\n  'strokeLinejoin' |\n  'strokeMiterlimit' |\n  'strokeOpacity' |\n  'strokeWidth' |\n  'tableLayout' |\n  'textAlign' |\n  'textAlignLast' |\n  'textAnchor' |\n  'textDecoration' |\n  'textIndent' |\n  'textJustify' |\n  'textKashida' |\n  'textKashidaSpace' |\n  'textOverflow' |\n  'textShadow' |\n  'textTransform' |\n  'textUnderlinePosition' |\n  'top' |\n  'touchAction' |\n  'transform' |\n  'transformOrigin' |\n  'transformStyle' |\n  'transition' |\n  'transitionDelay' |\n  'transitionDuration' |\n  'transitionProperty' |\n  'transitionTimingFunction' |\n  'unicodeBidi' |\n  'verticalAlign' |\n  'visibility' |\n  'webkitAlignContent' |\n  'webkitAlignItems' |\n  'webkitAlignSelf' |\n  'webkitAnimation' |\n  'webkitAnimationDelay' |\n  'webkitAnimationDirection' |\n  'webkitAnimationDuration' |\n  'webkitAnimationFillMode' |\n  'webkitAnimationIterationCount' |\n  'webkitAnimationName' |\n  'webkitAnimationPlayState' |\n  'webkitAnimationTimingFunction' |\n  'webkitAppearance' |\n  'webkitBackfaceVisibility' |\n  'webkitBackgroundClip' |\n  'webkitBackgroundOrigin' |\n  'webkitBackgroundSize' |\n  'webkitBorderBottomLeftRadius' |\n  'webkitBorderBottomRightRadius' |\n  'webkitBorderImage' |\n  'webkitBorderRadius' |\n  'webkitBorderTopLeftRadius' |\n  'webkitBorderTopRightRadius' |\n  'webkitBoxAlign' |\n  'webkitBoxDirection' |\n  'webkitBoxFlex' |\n  'webkitBoxOrdinalGroup' |\n  'webkitBoxOrient' |\n  'webkitBoxPack' |\n  'webkitBoxSizing' |\n  'webkitColumnBreakAfter' |\n  'webkitColumnBreakBefore' |\n  'webkitColumnBreakInside' |\n  'webkitColumnCount' |\n  'webkitColumnGap' |\n  'webkitColumnRule' |\n  'webkitColumnRuleColor' |\n  'webkitColumnRuleStyle' |\n  'webkitColumnRuleWidth' |\n  'webkitColumnSpan' |\n  'webkitColumnWidth' |\n  'webkitColumns' |\n  'webkitFilter' |\n  'webkitFlex' |\n  'webkitFlexBasis' |\n  'webkitFlexDirection' |\n  'webkitFlexFlow' |\n  'webkitFlexGrow' |\n  'webkitFlexShrink' |\n  'webkitFlexWrap' |\n  'webkitJustifyContent' |\n  'webkitOrder' |\n  'webkitPerspective' |\n  'webkitPerspectiveOrigin' |\n  'webkitTapHighlightColor' |\n  'webkitTextFillColor' |\n  'webkitTextSizeAdjust' |\n  'webkitTransform' |\n  'webkitTransformOrigin' |\n  'webkitTransformStyle' |\n  'webkitTransition' |\n  'webkitTransitionDelay' |\n  'webkitTransitionDuration' |\n  'webkitTransitionProperty' |\n  'webkitTransitionTimingFunction' |\n  'webkitUserModify' |\n  'webkitUserSelect' |\n  'webkitWritingMode' |\n  'whiteSpace' |\n  'widows' |\n  'width' |\n  'wordBreak' |\n  'wordSpacing' |\n  'wordWrap' |\n  'writingMode' |\n  'zIndex' |\n  'zoom'\n);\n\n\n/**\n * A mapping of inline event name to event object type.\n *\n * This mapping is used to create the event listener properties for\n * the virtual DOM element attributes object. If a standardized or\n * widely supported name is missing, please open an issue to have it\n * added.\n *\n * The event names were collected from the following sources:\n *   - TypeScript's `lib.dom.d.ts` file\n *   - https://www.w3.org/TR/html5/index.html#attributes-1\n *   - https://html.spec.whatwg.org/multipage/webappapis.html#idl-definitions\n */\nexport\ntype ElementEventMap = {\n  onabort: UIEvent;\n  onauxclick: MouseEvent;\n  onblur: FocusEvent;\n  oncanplay: Event;\n  oncanplaythrough: Event;\n  onchange: Event;\n  onclick: MouseEvent;\n  oncontextmenu: PointerEvent;\n  oncopy: ClipboardEvent;\n  oncuechange: Event;\n  oncut: ClipboardEvent;\n  ondblclick: MouseEvent;\n  ondrag: DragEvent;\n  ondragend: DragEvent;\n  ondragenter: DragEvent;\n  ondragexit: DragEvent;\n  ondragleave: DragEvent;\n  ondragover: DragEvent;\n  ondragstart: DragEvent;\n  ondrop: DragEvent;\n  ondurationchange: Event;\n  onemptied: Event;\n  onended: MediaStreamErrorEvent;\n  onerror: ErrorEvent;\n  onfocus: FocusEvent;\n  oninput: Event;\n  oninvalid: Event;\n  onkeydown: KeyboardEvent;\n  onkeypress: KeyboardEvent;\n  onkeyup: KeyboardEvent;\n  onload: Event;\n  onloadeddata: Event;\n  onloadedmetadata: Event;\n  onloadend: Event;\n  onloadstart: Event;\n  onmousedown: MouseEvent;\n  onmouseenter: MouseEvent;\n  onmouseleave: MouseEvent;\n  onmousemove: MouseEvent;\n  onmouseout: MouseEvent;\n  onmouseover: MouseEvent;\n  onmouseup: MouseEvent;\n  onmousewheel: WheelEvent;\n  onpaste: ClipboardEvent;\n  onpause: Event;\n  onplay: Event;\n  onplaying: Event;\n  onpointercancel: PointerEvent;\n  onpointerdown: PointerEvent;\n  onpointerenter: PointerEvent;\n  onpointerleave: PointerEvent;\n  onpointermove: PointerEvent;\n  onpointerout: PointerEvent;\n  onpointerover: PointerEvent;\n  onpointerup: PointerEvent;\n  onprogress: ProgressEvent;\n  onratechange: Event;\n  onreset: Event;\n  onscroll: UIEvent;\n  onseeked: Event;\n  onseeking: Event;\n  onselect: UIEvent;\n  onselectstart: Event;\n  onstalled: Event;\n  onsubmit: Event;\n  onsuspend: Event;\n  ontimeupdate: Event;\n  onvolumechange: Event;\n  onwaiting: Event;\n};\n\n\n/**\n * An object which represents a dataset for a virtual DOM element.\n *\n * The names of the dataset properties will be automatically prefixed\n * with `data-` before being added to the node, e.g. `{ thing: '12' }`\n * will be rendered as `data-thing='12'` in the DOM element.\n *\n * Dataset property names should not contain spaces.\n */\nexport\ntype ElementDataset = {\n  readonly [name: string]: string;\n};\n\n\n/**\n * The inline style for for a virtual DOM element.\n *\n * Style attributes use the JS camel-cased property names instead of\n * the CSS hyphenated names for performance and security.\n */\nexport\ntype ElementInlineStyle = {\n  readonly [T in CSSPropertyNames]?: string;\n};\n\n\n/**\n * The base attributes for a virtual element node.\n *\n * These are the attributes which are applied to a real DOM element via\n * `element.setAttribute()`. The supported attribute names are defined\n * by the `ElementAttrNames` type.\n *\n * Node attributes are specified using the lower-case HTML name instead\n * of the camel-case JS name due to browser inconsistencies in handling\n * the JS versions.\n */\nexport\ntype ElementBaseAttrs = {\n  readonly [T in ElementAttrNames]?: string;\n};\n\n\n/**\n * The inline event listener attributes for a virtual element node.\n *\n * The supported listeners are defined by the `ElementEventMap` type.\n */\nexport\ntype ElementEventAttrs = {\n  readonly [T in keyof ElementEventMap]?: (this: HTMLElement, event: ElementEventMap[T]) => any;\n};\n\n\n/**\n * The special-cased attributes for a virtual element node.\n */\nexport\ntype ElementSpecialAttrs = {\n  /**\n   * The key id for the virtual element node.\n   *\n   * If a node is given a key id, the generated DOM node will not be\n   * recreated during a rendering update if it only moves among its\n   * siblings in the render tree.\n   *\n   * In general, reordering child nodes will cause the nodes to be\n   * completely re-rendered. Keys allow this to be optimized away.\n   *\n   * If a key is provided, it must be unique among sibling nodes.\n   */\n  readonly key?: string;\n\n  /**\n   * The JS-safe name for the HTML `class` attribute.\n   */\n  readonly className?: string;\n\n  /**\n   * The JS-safe name for the HTML `for` attribute.\n   */\n  readonly htmlFor?: string;\n\n  /**\n   * The dataset for the rendered DOM element.\n   */\n  readonly dataset?: ElementDataset;\n\n  /**\n   * The inline style for the rendered DOM element.\n   */\n  readonly style?: ElementInlineStyle;\n};\n\n\n/**\n * The full set of attributes supported by a virtual element node.\n *\n * This is the combination of the base element attributes, the inline\n * element event listeners, and the special element attributes.\n */\nexport\ntype ElementAttrs = (\n  ElementBaseAttrs &\n  ElementEventAttrs &\n  ElementSpecialAttrs\n);\n\n\n/**\n * A virtual node which represents plain text content.\n *\n * #### Notes\n * User code will not typically create a `VirtualText` node directly.\n * Instead, the `h()` function will be used to create an element tree.\n */\nexport\nclass VirtualText {\n  /**\n   * The text content for the node.\n   */\n  readonly content: string;\n\n  /**\n   * The type of the node.\n   *\n   * This value can be used as a type guard for discriminating the\n   * `VirtualNode` union type.\n   */\n  readonly type: 'text' = 'text';\n\n  /**\n   * Construct a new virtual text node.\n   *\n   * @param content - The text content for the node.\n   */\n  constructor(content: string) {\n    this.content = content;\n  }\n}\n\n\n/**\n * A virtual node which represents an HTML element.\n *\n * #### Notes\n * User code will not typically create a `VirtualElement` node directly.\n * Instead, the `h()` function will be used to create an element tree.\n */\nexport\nclass VirtualElement {\n  /**\n   * The tag name for the element.\n   */\n  readonly tag: string;\n\n  /**\n   * The attributes for the element.\n   */\n  readonly attrs: ElementAttrs;\n\n  /**\n   * The children for the element.\n   */\n  readonly children: ReadonlyArray<VirtualNode>;\n\n  /**\n   * An optional custom renderer for the element's children. If set, on render\n   * this element's DOM node and it's attrs will be created/updated as normal.\n   * At that point the DOM node is handed off to the renderer.\n   */\n  readonly renderer: VirtualElement.IRenderer | undefined;\n\n  /**\n   * The type of the node.\n   *\n   * This value can be used as a type guard for discriminating the\n   * `VirtualNode` union type.\n   */\n  readonly type: 'element' = 'element';\n\n  /**\n   * Construct a new virtual element node.\n   *\n   * @param tag - The element tag name.\n   *\n   * @param attrs - The element attributes.\n   *\n   * @param children - The element children.\n   *\n   * @param renderer - An optional custom renderer for the element.\n   */\n  constructor(tag: string, attrs: ElementAttrs, children: ReadonlyArray<VirtualNode>, renderer?: VirtualElement.IRenderer) {\n    this.tag = tag;\n    this.attrs = attrs;\n    this.children = children;\n\n    this.renderer = renderer;\n  }\n}\n\nexport\nnamespace VirtualElement {\n  /**\n   * A type describing a custom element renderer\n   */\n  export type IRenderer = {\n    /**\n     * Customize how a DOM node is rendered. If .renderer is set on a given\n     * instance of VirtualElement, this function will be called every time\n     * that VirtualElement is rendered.\n     *\n     * @param host - The actual DOM node created for a VirtualElement during\n     * rendering.\n     *\n     * On render, host is created and its attrs are set/updated via\n     * the standard routines in updateContent. host is then handed off to this\n     * function.\n     *\n     * The render function is free to modify host. The only restriction is\n     * is that render should not modify any attributes set by external\n     * routines (ie updateContent), as this may cause thrashing when the\n     * virtual element is next rendered.\n     *\n     * @param options - Will be populated with the .attrs and .children fields\n     * set on the VirtualElement being rendered.\n     */\n    render: (host: HTMLElement, options?: {attrs?: ElementAttrs, children?: ReadonlyArray<VirtualNode>}) => void;\n\n    /**\n     * Optional cleanup function for custom renderers. If the .renderer field\n     * of a VirtualELement is set, and if .renderer.unrender is defined, when\n     * the element is changed or removed its corresponding DOM element will be\n     * passed to this function immediately before it is removed from the DOM.\n     *\n     * unrender is not required for for simple renderers, such as those\n     * implemented using `document.createElement()`. However, for certain\n     * rendering techniques explicit cleanup is required in order to avoid\n     * resource leaks.\n     *\n     * For example, if render calls `ReactDOM.render(..., host)`, then\n     * there has to also be a corresponding implementation of unrender that\n     * calls `ReactDOM.unmountComponentAtNode(host)` in order to prevent\n     * a memory leak.\n     *\n     * @param host - the DOM element to be removed.\n     *\n     * @param options - Will be populated with the .attrs and .children fields\n     * set on the VirtualElement being unrendered.\n     */\n    unrender?: (host: HTMLElement, options?: {attrs?: ElementAttrs, children?: ReadonlyArray<VirtualNode>}) => void;\n  };\n}\n\n/**\n * DEPRECATED - use VirtualElement with a defined renderer param instead.\n * This class is provided as a backwards compatibility shim\n *\n * A \"pass thru\" virtual node whose children are managed by a render and an\n * unrender callback. The intent of this flavor of virtual node is to make\n * it easy to blend other kinds of virtualdom (eg React) into Phosphor's\n * virtualdom.\n *\n * #### Notes\n * User code will not typically create a `VirtualElementPass` node directly.\n * Instead, the `hpass()` function will be used to create an element tree.\n */\nexport\nclass VirtualElementPass extends VirtualElement {\n  /**\n   * DEPRECATED - use VirtualElement with a defined renderer param instead\n   *\n   * Construct a new virtual element pass thru node.\n   *\n   * @param tag - the tag of the parent element of this node. Once the parent\n   * element is rendered, it will be passed as an argument to\n   * renderer.render\n   *\n   * @param attrs - attributes that will assigned to the\n   * parent element\n   *\n   * @param renderer - an object with render and unrender\n   * functions, each of which should take a single argument of type\n   * HTMLElement and return nothing. If null, the parent element\n   * will be rendered barren without any children.\n   */\n  constructor(tag: string, attrs: ElementAttrs, renderer: VirtualElementPass.IRenderer | null) {\n    super(tag, attrs, [], renderer || undefined);\n  }\n}\n\nexport\nnamespace VirtualElementPass {\n  /**\n   * DEPRECATED - use VirtualElement.IRenderer instead\n   *\n   * A type describing a custom element renderer\n   */\n  export type IRenderer = VirtualElement.IRenderer;\n}\n\n\n/**\n * A type alias for a general virtual node.\n */\nexport\ntype VirtualNode = VirtualElement | VirtualText;\n\n\n/**\n * Create a new virtual element node.\n *\n * @param tag - The tag name for the element.\n *\n * @param attrs - The attributes for the element, if any.\n *\n * @param renderer - An optional custom renderer for the element.\n *\n * @param children - The children for the element, if any.\n *\n * @returns A new virtual element node for the given parameters.\n *\n * #### Notes\n * The children may be string literals, other virtual nodes, `null`, or\n * an array of those things. Strings are converted into text nodes, and\n * arrays are inlined as if the array contents were given as positional\n * arguments. This makes it simple to build up an array of children by\n * any desired means. `null` child values are simply ignored.\n *\n * A bound function for each HTML tag name is available as a static\n * function attached to the `h()` function. E.g. `h('div', ...)` is\n * equivalent to `h.div(...)`.\n */\nexport function h(tag: string, ...children: h.Child[]): VirtualElement;\nexport function h(tag: string, attrs: ElementAttrs, ...children: h.Child[]): VirtualElement;\nexport function h(tag: string, renderer: VirtualElement.IRenderer, ...children: h.Child[]): VirtualElement;\nexport function h(tag: string, attrs: ElementAttrs, renderer: VirtualElement.IRenderer, ...children: h.Child[]): VirtualElement;\nexport function h(tag: string): VirtualElement {\n  let attrs: ElementAttrs = {};\n  let renderer: VirtualElement.IRenderer | undefined;\n  let children: VirtualNode[] = [];\n  for (let i = 1, n = arguments.length; i < n; ++i) {\n    let arg = arguments[i];\n    if (typeof arg === 'string') {\n      children.push(new VirtualText(arg));\n    } else if (arg instanceof VirtualText) {\n      children.push(arg);\n    } else if (arg instanceof VirtualElement) {\n      children.push(arg);\n    } else if (arg instanceof Array) {\n      extend(children, arg);\n    } else if ((i === 1 || i === 2) && arg && typeof arg === 'object') {\n      if (\"render\" in arg) {\n        renderer = arg;\n      }\n      else {\n        attrs = arg;\n      }\n    }\n  }\n  return new VirtualElement(tag, attrs, children, renderer);\n\n  function extend(array: VirtualNode[], values: h.Child[]): void {\n    for (let child of values) {\n      if (typeof child === 'string') {\n        array.push(new VirtualText(child));\n      } else if (child instanceof VirtualText) {\n        array.push(child);\n      } else if (child instanceof VirtualElement) {\n        array.push(child);\n      }\n    }\n  }\n}\n\n\n/**\n * The namespace for the `h` function statics.\n */\nexport\nnamespace h {\n  /**\n   * A type alias for the supported child argument types.\n   */\n  export\n  type Child = (string | VirtualNode | null) | Array<string | VirtualNode | null>;\n\n  /**\n   * A bound factory function for a specific `h()` tag.\n   */\n  export\n  interface IFactory {\n    (...children: Child[]): VirtualElement;\n    (attrs: ElementAttrs, ...children: Child[]): VirtualElement;\n    (renderer: VirtualElement.IRenderer, ...children: h.Child[]): VirtualElement;\n    (attrs: ElementAttrs, renderer: VirtualElement.IRenderer, ...children: h.Child[]): VirtualElement;\n  }\n\n  export const a: IFactory = h.bind(undefined, 'a');\n  export const abbr: IFactory = h.bind(undefined, 'abbr');\n  export const address: IFactory = h.bind(undefined, 'address');\n  export const area: IFactory = h.bind(undefined, 'area');\n  export const article: IFactory = h.bind(undefined, 'article');\n  export const aside: IFactory = h.bind(undefined, 'aside');\n  export const audio: IFactory = h.bind(undefined, 'audio');\n  export const b: IFactory = h.bind(undefined, 'b');\n  export const bdi: IFactory = h.bind(undefined, 'bdi');\n  export const bdo: IFactory = h.bind(undefined, 'bdo');\n  export const blockquote: IFactory = h.bind(undefined, 'blockquote');\n  export const br: IFactory = h.bind(undefined, 'br');\n  export const button: IFactory = h.bind(undefined, 'button');\n  export const canvas: IFactory = h.bind(undefined, 'canvas');\n  export const caption: IFactory = h.bind(undefined, 'caption');\n  export const cite: IFactory = h.bind(undefined, 'cite');\n  export const code: IFactory = h.bind(undefined, 'code');\n  export const col: IFactory = h.bind(undefined, 'col');\n  export const colgroup: IFactory = h.bind(undefined, 'colgroup');\n  export const data: IFactory = h.bind(undefined, 'data');\n  export const datalist: IFactory = h.bind(undefined, 'datalist');\n  export const dd: IFactory = h.bind(undefined, 'dd');\n  export const del: IFactory = h.bind(undefined, 'del');\n  export const dfn: IFactory = h.bind(undefined, 'dfn');\n  export const div: IFactory = h.bind(undefined, 'div');\n  export const dl: IFactory = h.bind(undefined, 'dl');\n  export const dt: IFactory = h.bind(undefined, 'dt');\n  export const em: IFactory = h.bind(undefined, 'em');\n  export const embed: IFactory = h.bind(undefined, 'embed');\n  export const fieldset: IFactory = h.bind(undefined, 'fieldset');\n  export const figcaption: IFactory = h.bind(undefined, 'figcaption');\n  export const figure: IFactory = h.bind(undefined, 'figure');\n  export const footer: IFactory = h.bind(undefined, 'footer');\n  export const form: IFactory = h.bind(undefined, 'form');\n  export const h1: IFactory = h.bind(undefined, 'h1');\n  export const h2: IFactory = h.bind(undefined, 'h2');\n  export const h3: IFactory = h.bind(undefined, 'h3');\n  export const h4: IFactory = h.bind(undefined, 'h4');\n  export const h5: IFactory = h.bind(undefined, 'h5');\n  export const h6: IFactory = h.bind(undefined, 'h6');\n  export const header: IFactory = h.bind(undefined, 'header');\n  export const hr: IFactory = h.bind(undefined, 'hr');\n  export const i: IFactory = h.bind(undefined, 'i');\n  export const iframe: IFactory = h.bind(undefined, 'iframe');\n  export const img: IFactory = h.bind(undefined, 'img');\n  export const input: IFactory = h.bind(undefined, 'input');\n  export const ins: IFactory = h.bind(undefined, 'ins');\n  export const kbd: IFactory = h.bind(undefined, 'kbd');\n  export const label: IFactory = h.bind(undefined, 'label');\n  export const legend: IFactory = h.bind(undefined, 'legend');\n  export const li: IFactory = h.bind(undefined, 'li');\n  export const main: IFactory = h.bind(undefined, 'main');\n  export const map: IFactory = h.bind(undefined, 'map');\n  export const mark: IFactory = h.bind(undefined, 'mark');\n  export const meter: IFactory = h.bind(undefined, 'meter');\n  export const nav: IFactory = h.bind(undefined, 'nav');\n  export const noscript: IFactory = h.bind(undefined, 'noscript');\n  export const object: IFactory = h.bind(undefined, 'object');\n  export const ol: IFactory = h.bind(undefined, 'ol');\n  export const optgroup: IFactory = h.bind(undefined, 'optgroup');\n  export const option: IFactory = h.bind(undefined, 'option');\n  export const output: IFactory = h.bind(undefined, 'output');\n  export const p: IFactory = h.bind(undefined, 'p');\n  export const param: IFactory = h.bind(undefined, 'param');\n  export const pre: IFactory = h.bind(undefined, 'pre');\n  export const progress: IFactory = h.bind(undefined, 'progress');\n  export const q: IFactory = h.bind(undefined, 'q');\n  export const rp: IFactory = h.bind(undefined, 'rp');\n  export const rt: IFactory = h.bind(undefined, 'rt');\n  export const ruby: IFactory = h.bind(undefined, 'ruby');\n  export const s: IFactory = h.bind(undefined, 's');\n  export const samp: IFactory = h.bind(undefined, 'samp');\n  export const section: IFactory = h.bind(undefined, 'section');\n  export const select: IFactory = h.bind(undefined, 'select');\n  export const small: IFactory = h.bind(undefined, 'small');\n  export const source: IFactory = h.bind(undefined, 'source');\n  export const span: IFactory = h.bind(undefined, 'span');\n  export const strong: IFactory = h.bind(undefined, 'strong');\n  export const sub: IFactory = h.bind(undefined, 'sub');\n  export const summary: IFactory = h.bind(undefined, 'summary');\n  export const sup: IFactory = h.bind(undefined, 'sup');\n  export const table: IFactory = h.bind(undefined, 'table');\n  export const tbody: IFactory = h.bind(undefined, 'tbody');\n  export const td: IFactory = h.bind(undefined, 'td');\n  export const textarea: IFactory = h.bind(undefined, 'textarea');\n  export const tfoot: IFactory = h.bind(undefined, 'tfoot');\n  export const th: IFactory = h.bind(undefined, 'th');\n  export const thead: IFactory = h.bind(undefined, 'thead');\n  export const time: IFactory = h.bind(undefined, 'time');\n  export const title: IFactory = h.bind(undefined, 'title');\n  export const tr: IFactory = h.bind(undefined, 'tr');\n  export const track: IFactory = h.bind(undefined, 'track');\n  export const u: IFactory = h.bind(undefined, 'u');\n  export const ul: IFactory = h.bind(undefined, 'ul');\n  export const var_: IFactory = h.bind(undefined, 'var');\n  export const video: IFactory = h.bind(undefined, 'video');\n  export const wbr: IFactory = h.bind(undefined, 'wbr');\n}\n\n\n/**\n * DEPRECATED - pass the renderer arg to the h function instead\n *\n * Create a new \"pass thru\" virtual element node.\n *\n * @param tag - The tag name for the parent element.\n *\n * @param attrs - The attributes for the parent element, if any.\n *\n * @param renderer - an object with render and unrender functions, if any.\n *\n * @returns A new \"pass thru\" virtual element node for the given parameters.\n *\n */\nexport function hpass(tag: string, renderer?: VirtualElementPass.IRenderer): VirtualElementPass;\nexport function hpass(tag: string, attrs: ElementAttrs, renderer?: VirtualElementPass.IRenderer): VirtualElementPass;\nexport function hpass(tag: string): VirtualElementPass {\n  let attrs: ElementAttrs = {};\n  let renderer: VirtualElementPass.IRenderer | null = null;\n\n  if (arguments.length === 2) {\n    const arg = arguments[1];\n\n    if (\"render\" in arg) {\n      renderer = arg;\n    } else {\n      attrs = arg;\n    }\n  } else if (arguments.length === 3) {\n    attrs = arguments[1];\n    renderer = arguments[2];\n  } else if (arguments.length > 3) {\n    throw new Error(\"hpass() should be called with 1, 2, or 3 arguments\");\n  }\n\n  return new VirtualElementPass(tag, attrs, renderer);\n}\n\n\n/**\n * The namespace for the virtual DOM rendering functions.\n */\nexport\nnamespace VirtualDOM {\n  /**\n   * Create a real DOM element from a virtual element node.\n   *\n   * @param node - The virtual element node to realize.\n   *\n   * @returns A new DOM element for the given virtual element node.\n   *\n   * #### Notes\n   * This creates a brand new *real* DOM element with a structure which\n   * matches the given virtual DOM node.\n   *\n   * If virtual diffing is desired, use the `render` function instead.\n   */\n  export function realize(node: VirtualText): Text;\n  export function realize(node: VirtualElement): HTMLElement;\n  export function realize(node: VirtualNode): HTMLElement | Text {\n    return Private.createDOMNode(node);\n  }\n\n  /**\n   * Render virtual DOM content into a host element.\n   *\n   * @param content - The virtual DOM content to render.\n   *\n   * @param host - The host element for the rendered content.\n   *\n   * #### Notes\n   * This renders the delta from the previous rendering. It assumes that\n   * the content of the host element is not manipulated by external code.\n   *\n   * Providing `null` content will clear the rendering.\n   *\n   * Externally modifying the provided content or the host element will\n   * result in undefined rendering behavior.\n   */\n  export\n  function render(content: VirtualNode | ReadonlyArray<VirtualNode> | null, host: HTMLElement): void {\n    let oldContent = Private.hostMap.get(host) || [];\n    let newContent = Private.asContentArray(content);\n    Private.hostMap.set(host, newContent);\n    Private.updateContent(host, oldContent, newContent);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A weak mapping of host element to virtual DOM content.\n   */\n  export\n  const hostMap = new WeakMap<HTMLElement, ReadonlyArray<VirtualNode>>();\n\n  /**\n   * Cast a content value to a content array.\n   */\n  export\n  function asContentArray(value: VirtualNode | ReadonlyArray<VirtualNode> | null): ReadonlyArray<VirtualNode> {\n    if (!value) {\n      return [];\n    }\n    if (value instanceof Array) {\n      return value as ReadonlyArray<VirtualNode>;\n    }\n    return [value as VirtualNode];\n  }\n\n  /**\n   * Create a new DOM element for a virtual node.\n   */\n  export function createDOMNode(node: VirtualText): Text;\n  export function createDOMNode(node: VirtualElement): HTMLElement;\n  export function createDOMNode(node: VirtualNode): HTMLElement | Text;\n  export function createDOMNode(node: VirtualNode, host: HTMLElement | null): HTMLElement | Text;\n  export function createDOMNode(node: VirtualNode, host: HTMLElement | null, before: Node | null): HTMLElement | Text;\n  export function createDOMNode(node: VirtualNode): HTMLElement | Text {\n    let host = arguments[1] || null;\n    const before = arguments[2] || null;\n\n    if (host) {\n      host.insertBefore(createDOMNode(node), before);\n    } else {\n      // Create a text node for a virtual text node.\n      if (node.type === 'text') {\n        return document.createTextNode(node.content);\n      }\n\n      // Create the HTML element with the specified tag.\n      host = document.createElement(node.tag);\n\n      // Add the attributes for the new element.\n      addAttrs(host, node.attrs);\n\n      if (node.renderer) {\n        node.renderer.render(host, {attrs: node.attrs, children: node.children});\n        return host;\n      }\n\n      // Recursively populate the element with child content.\n      for (let i = 0, n = node.children.length; i < n; ++i) {\n        createDOMNode(node.children[i], host);\n      }\n    }\n\n    return host;\n  }\n\n  /**\n   * Update a host element with the delta of the virtual content.\n   *\n   * This is the core \"diff\" algorithm. There is no explicit \"patch\"\n   * phase. The host is patched at each step as the diff progresses.\n   */\n  export\n  function updateContent(host: HTMLElement, oldContent: ReadonlyArray<VirtualNode>, newContent: ReadonlyArray<VirtualNode>): void {\n    // Bail early if the content is identical.\n    if (oldContent === newContent) {\n      return;\n    }\n\n    // Collect the old keyed elems into a mapping.\n    let oldKeyed = collectKeys(host, oldContent);\n\n    // Create a copy of the old content which can be modified in-place.\n    let oldCopy = oldContent.slice();\n\n    // Update the host with the new content. The diff always proceeds\n    // forward and never modifies a previously visited index. The old\n    // copy array is modified in-place to reflect the changes made to\n    // the host children. This causes the stale nodes to be pushed to\n    // the end of the host node and removed at the end of the loop.\n    let currElem = host.firstChild;\n    let newCount = newContent.length;\n    for (let i = 0; i < newCount; ++i) {\n\n      // If the old content is exhausted, create a new node.\n      if (i >= oldCopy.length) {\n        createDOMNode(newContent[i], host);\n        continue;\n      }\n\n      // Lookup the old and new virtual nodes.\n      let oldVNode = oldCopy[i];\n      let newVNode = newContent[i];\n\n      // If both elements are identical, there is nothing to do.\n      if (oldVNode === newVNode) {\n        currElem = currElem!.nextSibling;\n        continue;\n      }\n\n      // Handle the simplest case of in-place text update first.\n      if (oldVNode.type === 'text' && newVNode.type === 'text') {\n        currElem!.textContent = newVNode.content;\n        currElem = currElem!.nextSibling;\n        continue;\n      }\n\n      // If the old or new node is a text node, the other node is now\n      // known to be an element node, so create and insert a new node.\n      if (oldVNode.type === 'text' || newVNode.type === 'text') {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // If the old XOR new node has a custom renderer,\n      // create and insert a new node.\n      if (!(oldVNode.renderer) != !(newVNode.renderer)) {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // At this point, both nodes are known to be element nodes.\n\n      // If the new elem is keyed, move an old keyed elem to the proper\n      // location before proceeding with the diff. The search can start\n      // at the current index, since the unmatched old keyed elems are\n      // pushed forward in the old copy array.\n      let newKey = newVNode.attrs.key;\n      if (newKey && newKey in oldKeyed) {\n        let pair = oldKeyed[newKey];\n        if (pair.vNode !== oldVNode) {\n          ArrayExt.move(oldCopy, oldCopy.indexOf(pair.vNode, i + 1), i);\n          host.insertBefore(pair.element, currElem);\n          oldVNode = pair.vNode;\n          currElem = pair.element;\n        }\n      }\n\n      // If both elements are identical, there is nothing to do.\n      if (oldVNode === newVNode) {\n        currElem = currElem!.nextSibling;\n        continue;\n      }\n\n      // If the old elem is keyed and does not match the new elem key,\n      // create a new node. This is necessary since the old keyed elem\n      // may be matched at a later point in the diff.\n      let oldKey = oldVNode.attrs.key;\n      if (oldKey && oldKey !== newKey) {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // If the tags are different, create a new node.\n      if (oldVNode.tag !== newVNode.tag) {\n        ArrayExt.insert(oldCopy, i, newVNode);\n        createDOMNode(newVNode, host, currElem);\n        continue;\n      }\n\n      // At this point, the element can be updated in-place.\n\n      // Update the element attributes.\n      updateAttrs(currElem as HTMLElement, oldVNode.attrs, newVNode.attrs);\n\n      // Update the element content.\n      if (newVNode.renderer) {\n        newVNode.renderer.render(currElem as HTMLElement, {attrs: newVNode.attrs, children: newVNode.children});\n      } else {\n        updateContent(currElem as HTMLElement, oldVNode.children, newVNode.children);\n      }\n\n      // Step to the next sibling element.\n      currElem = currElem!.nextSibling;\n    }\n\n    // Cleanup stale DOM\n    removeContent(host, oldCopy, newCount, true);\n  }\n\n  /**\n   * Handle cleanup of stale vdom and its associated DOM. The host node is\n   * traversed recursively (in depth-first order), and any explicit cleanup\n   * required by a child node is carried out when it is visited (eg if a node\n   * has a custom renderer, the renderer.unrender function will be called).\n   * Once the subtree beneath each child of host has been completely visited,\n   * that child will be removed via a call to host.removeChild.\n   */\n  function removeContent(host: HTMLElement, oldContent: ReadonlyArray<VirtualNode>, newCount: number, _sentinel: boolean) {\n    // Dispose of the old nodes pushed to the end of the host.\n    for (let i = oldContent.length - 1; i >= newCount; --i) {\n      const oldNode = oldContent[i];\n      const child = (_sentinel ? host.lastChild : host.childNodes[i]) as HTMLElement;\n\n      // recursively clean up host children\n      if (oldNode.type === 'text') {} else if (oldNode.renderer && oldNode.renderer.unrender) {\n        oldNode.renderer.unrender(child!, {attrs: oldNode.attrs, children: oldNode.children});\n      } else {\n        removeContent(child!, oldNode.children, 0, false);\n      }\n\n      if (_sentinel) {\n        host.removeChild(child!);\n      }\n    }\n  }\n\n  /**\n   * A set of special-cased attribute names.\n   */\n  const specialAttrs = {\n    'key': true,\n    'className': true,\n    'htmlFor': true,\n    'dataset': true,\n    'style': true,\n  };\n\n  /**\n   * Add element attributes to a newly created HTML element.\n   */\n  function addAttrs(element: HTMLElement, attrs: ElementAttrs): void {\n    // Add the inline event listeners and node attributes.\n    for (let name in attrs) {\n      if (name in specialAttrs) {\n        continue;\n      }\n      if (name.substr(0, 2) === 'on') {\n        (element as any)[name] = (attrs as any)[name];\n      } else {\n        element.setAttribute(name, (attrs as any)[name]);\n      }\n    }\n\n    // Add the element `class` attribute.\n    if (attrs.className !== undefined) {\n      element.setAttribute('class', attrs.className);\n    }\n\n    // Add the element `for` attribute.\n    if (attrs.htmlFor !== undefined) {\n      element.setAttribute('for', attrs.htmlFor);\n    }\n\n    // Add the dataset values.\n    if (attrs.dataset) {\n      addDataset(element, attrs.dataset);\n    }\n\n    // Add the inline styles.\n    if (attrs.style) {\n      addStyle(element, attrs.style);\n    }\n  }\n\n  /**\n   * Update the element attributes of an HTML element.\n   */\n  function updateAttrs(element: HTMLElement, oldAttrs: ElementAttrs, newAttrs: ElementAttrs): void {\n    // Do nothing if the attrs are the same object.\n    if (oldAttrs === newAttrs) {\n      return;\n    }\n\n    // Setup the strongly typed loop variable.\n    let name: keyof ElementAttrs;\n\n    // Remove attributes and listeners which no longer exist.\n    for (name in oldAttrs) {\n      if (name in specialAttrs || name in newAttrs) {\n        continue;\n      }\n      if (name.substr(0, 2) === 'on') {\n        (element as any)[name] = null;\n      } else {\n        element.removeAttribute(name);\n      }\n    }\n\n    // Add and update new and existing attributes and listeners.\n    for (name in newAttrs) {\n      if (name in specialAttrs || oldAttrs[name] === newAttrs[name]) {\n        continue;\n      }\n      if (name.substr(0, 2) === 'on') {\n        (element as any)[name] = (newAttrs as any)[name];\n      } else {\n        element.setAttribute(name, (newAttrs as any)[name]);\n      }\n    }\n\n    // Update the element `class` attribute.\n    if (oldAttrs.className !== newAttrs.className) {\n      if (newAttrs.className !== undefined) {\n        element.setAttribute('class', newAttrs.className);\n      } else {\n        element.removeAttribute('class');\n      }\n    }\n\n    // Add the element `for` attribute.\n    if (oldAttrs.htmlFor !== newAttrs.htmlFor) {\n      if (newAttrs.htmlFor !== undefined) {\n        element.setAttribute('for', newAttrs.htmlFor);\n      } else {\n        element.removeAttribute('for');\n      }\n    }\n\n    // Update the dataset values.\n    if (oldAttrs.dataset !== newAttrs.dataset) {\n      updateDataset(element, oldAttrs.dataset || {}, newAttrs.dataset || {});\n    }\n\n    // Update the inline styles.\n    if (oldAttrs.style !== newAttrs.style) {\n      updateStyle(element, oldAttrs.style || {}, newAttrs.style || {});\n    }\n  }\n\n  /**\n   * Add dataset values to a newly created HTML element.\n   */\n  function addDataset(element: HTMLElement, dataset: ElementDataset): void {\n    for (let name in dataset) {\n      element.setAttribute(`data-${name}`, dataset[name]);\n    }\n  }\n\n  /**\n   * Update the dataset values of an HTML element.\n   */\n  function updateDataset(element: HTMLElement, oldDataset: ElementDataset, newDataset: ElementDataset): void {\n    for (let name in oldDataset) {\n      if (!(name in newDataset)) {\n        element.removeAttribute(`data-${name}`);\n      }\n    }\n    for (let name in newDataset) {\n      if (oldDataset[name] !== newDataset[name]) {\n        element.setAttribute(`data-${name}`, newDataset[name]);\n      }\n    }\n  }\n\n  /**\n   * Add inline style values to a newly created HTML element.\n   */\n  function addStyle(element: HTMLElement, style: ElementInlineStyle): void {\n    let elemStyle = element.style;\n    let name: keyof ElementInlineStyle;\n    for (name in style) {\n      elemStyle[name] = style[name];\n    }\n  }\n\n  /**\n   * Update the inline style values of an HTML element.\n   */\n  function updateStyle(element: HTMLElement, oldStyle: ElementInlineStyle, newStyle: ElementInlineStyle): void {\n    let elemStyle = element.style;\n    let name: keyof ElementInlineStyle;\n    for (name in oldStyle) {\n      if (!(name in newStyle)) {\n        elemStyle[name] = '';\n      }\n    }\n    for (name in newStyle) {\n      if (oldStyle[name] !== newStyle[name]) {\n        elemStyle[name] = newStyle[name];\n      }\n    }\n  }\n\n  /**\n   * A mapping of string key to pair of element and rendered node.\n   */\n  type KeyMap = {\n    [key: string]: { vNode: VirtualElement, element: HTMLElement };\n  };\n\n  /**\n   * Collect a mapping of keyed elements for the host content.\n   */\n  function collectKeys(host: HTMLElement, content: ReadonlyArray<VirtualNode>): KeyMap {\n    let node = host.firstChild;\n    let keyMap: KeyMap = Object.create(null);\n    for (let vNode of content) {\n      if (vNode.type === 'element' && vNode.attrs.key) {\n        keyMap[vNode.attrs.key] = { vNode, element: node as HTMLElement };\n      }\n      node = node!.nextSibling;\n    }\n    return keyMap;\n  }\n}\n"]}