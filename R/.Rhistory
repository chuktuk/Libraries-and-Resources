run.this <- function(x, func=mean) # default function is mean
{
# user supplies a vector (x) and a function to call (func)
do.call(func, args=list(x))
}
run.this(1:10)
run.this(1:10, sum)
func.switch <- function(x)
{
switch(x,
'a'='First',
'b'='Second',
'c'='Third')
}
func.switch(b)
func.switch <- function(x)
{
switch(x,
'a'='First',
'b'='Second',
'c'='Third')
}
func.switch('b')
func.switch <- function(x)
{
# first arg is the variable to check
# subsequent args are values and results
# last result if not assign a value is the default
switch(x,
'a'='First',
'b'='Second',
'c'='Third',
'Other')
}
func.switch('b')
func.switch('z')
func.switch(3)
func.switch(4)
func.switch(121) # nothing is returned (null)
is.null(func.switch(121))
ifelse(1 == 1, 'Yup', 'umm no')
ifelse(1 == 0, 'Yup', 'umm no')
# vector examples
myVec <- c(1, 0, 0, 1, 1)
ifelse(myVec == 1, 'Yup', 'No')
testVec <- c(1, 1, 0, 1, 0)
ifelse(myVec == testVec, 'Yup', 'No')
# can return different values
ifelse(myVec == testVec, 2^2, 'ok')
# can return different values
ifelse(myVec == testVec, 2^2, 'ok')
ifelse(myVec == testVec, myVec*testVec, 'Not Equal')
(1 == 1 && 2 > 0)
(1 == 1 && 2 < 0) || 4 < 5
ifelse(myVec == testVec | myVec < testVec, 'Yup', 'Nope')
print(myVec)
print(testVec)
ifelse(myVec == testVec | myVec < testVec, 'Yup', 'Nope')
i <- 1
while(i < 10)
{
print(i)
i <- i + 1
}
for(i in 1:10)
{
if(i == 3)
{
next
}
if(i == 7)
{
return('Breaking')
}
print(i)
}
for(i in 1:10)
{
if(i == 3)
{
next
}
if(i == 7)
{
print('Breaking')
}
print(i)
}
for(i in 1:10)
{
if(i == 3)
{
next
}
if(i == 7)
{
print('Breaking')
break
}
print(i)
}
